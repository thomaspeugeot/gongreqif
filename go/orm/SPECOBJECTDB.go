// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECOBJECT_sql sql.NullBool
var dummy_SPECOBJECT_time time.Duration
var dummy_SPECOBJECT_sort sort.Float64Slice

// SPECOBJECTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specobjectAPI
type SPECOBJECTAPI struct {
	gorm.Model

	models.SPECOBJECT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECOBJECTPointersEncoding SPECOBJECTPointersEncoding
}

// SPECOBJECTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECOBJECTPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field VALUES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VALUESID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// SPECOBJECTDB describes a specobject in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specobjectDB
type SPECOBJECTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specobjectDB.Name
	Name_Data sql.NullString

	// Declation for basic field specobjectDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field specobjectDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field specobjectDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field specobjectDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECOBJECTPointersEncoding
}

// SPECOBJECTDBs arrays specobjectDBs
// swagger:response specobjectDBsResponse
type SPECOBJECTDBs []SPECOBJECTDB

// SPECOBJECTDBResponse provides response
// swagger:response specobjectDBResponse
type SPECOBJECTDBResponse struct {
	SPECOBJECTDB
}

// SPECOBJECTWOP is a SPECOBJECT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECOBJECTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPECOBJECT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoSPECOBJECTStruct struct {
	// stores SPECOBJECTDB according to their gorm ID
	Map_SPECOBJECTDBID_SPECOBJECTDB map[uint]*SPECOBJECTDB

	// stores SPECOBJECTDB ID according to SPECOBJECT address
	Map_SPECOBJECTPtr_SPECOBJECTDBID map[*models.SPECOBJECT]uint

	// stores SPECOBJECT according to their gorm ID
	Map_SPECOBJECTDBID_SPECOBJECTPtr map[uint]*models.SPECOBJECT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECOBJECT.stage
	return
}

func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) GetDB() *gorm.DB {
	return backRepoSPECOBJECT.db
}

// GetSPECOBJECTDBFromSPECOBJECTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) GetSPECOBJECTDBFromSPECOBJECTPtr(specobject *models.SPECOBJECT) (specobjectDB *SPECOBJECTDB) {
	id := backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]
	specobjectDB = backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[id]
	return
}

// BackRepoSPECOBJECT.CommitPhaseOne commits all staged instances of SPECOBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specobject := range stage.SPECOBJECTs {
		backRepoSPECOBJECT.CommitPhaseOneInstance(specobject)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specobject := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr {
		if _, ok := stage.SPECOBJECTs[specobject]; !ok {
			backRepoSPECOBJECT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECOBJECT.CommitDeleteInstance commits deletion of SPECOBJECT to the BackRepo
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CommitDeleteInstance(id uint) (Error error) {

	specobject := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[id]

	// specobject is not staged anymore, remove specobjectDB
	specobjectDB := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[id]
	query := backRepoSPECOBJECT.db.Unscoped().Delete(&specobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID, specobject)
	delete(backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr, id)
	delete(backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB, id)

	return
}

// BackRepoSPECOBJECT.CommitPhaseOneInstance commits specobject staged instances of SPECOBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CommitPhaseOneInstance(specobject *models.SPECOBJECT) (Error error) {

	// check if the specobject is not commited yet
	if _, ok := backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]; ok {
		return
	}

	// initiate specobject
	var specobjectDB SPECOBJECTDB
	specobjectDB.CopyBasicFieldsFromSPECOBJECT(specobject)

	query := backRepoSPECOBJECT.db.Create(&specobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject] = specobjectDB.ID
	backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[specobjectDB.ID] = specobject
	backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[specobjectDB.ID] = &specobjectDB

	return
}

// BackRepoSPECOBJECT.CommitPhaseTwo commits all staged instances of SPECOBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specobject := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr {
		backRepoSPECOBJECT.CommitPhaseTwoInstance(backRepo, idx, specobject)
	}

	return
}

// BackRepoSPECOBJECT.CommitPhaseTwoInstance commits {{structname }} of models.SPECOBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specobject *models.SPECOBJECT) (Error error) {

	// fetch matching specobjectDB
	if specobjectDB, ok := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[idx]; ok {

		specobjectDB.CopyBasicFieldsFromSPECOBJECT(specobject)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value specobject.ALTERNATIVEID translates to updating the specobject.ALTERNATIVEIDID
		specobjectDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if specobject.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[specobject.ALTERNATIVEID]; ok {
				specobjectDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				specobjectDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			specobjectDB.ALTERNATIVEIDID.Int64 = 0
			specobjectDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value specobject.VALUES translates to updating the specobject.VALUESID
		specobjectDB.VALUESID.Valid = true // allow for a 0 value (nil association)
		if specobject.VALUES != nil {
			if VALUESId, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[specobject.VALUES]; ok {
				specobjectDB.VALUESID.Int64 = int64(VALUESId)
				specobjectDB.VALUESID.Valid = true
			}
		} else {
			specobjectDB.VALUESID.Int64 = 0
			specobjectDB.VALUESID.Valid = true
		}

		// commit pointer value specobject.TYPE translates to updating the specobject.TYPEID
		specobjectDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if specobject.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[specobject.TYPE]; ok {
				specobjectDB.TYPEID.Int64 = int64(TYPEId)
				specobjectDB.TYPEID.Valid = true
			}
		} else {
			specobjectDB.TYPEID.Int64 = 0
			specobjectDB.TYPEID.Valid = true
		}

		query := backRepoSPECOBJECT.db.Save(&specobjectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECOBJECT intance %s", specobject.Name))
		return err
	}

	return
}

// BackRepoSPECOBJECT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CheckoutPhaseOne() (Error error) {

	specobjectDBArray := make([]SPECOBJECTDB, 0)
	query := backRepoSPECOBJECT.db.Find(&specobjectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specobjectInstancesToBeRemovedFromTheStage := make(map[*models.SPECOBJECT]any)
	for key, value := range backRepoSPECOBJECT.stage.SPECOBJECTs {
		specobjectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specobjectDB := range specobjectDBArray {
		backRepoSPECOBJECT.CheckoutPhaseOneInstance(&specobjectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specobject, ok := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[specobjectDB.ID]
		if ok {
			delete(specobjectInstancesToBeRemovedFromTheStage, specobject)
		}
	}

	// remove from stage and back repo's 3 maps all specobjects that are not in the checkout
	for specobject := range specobjectInstancesToBeRemovedFromTheStage {
		specobject.Unstage(backRepoSPECOBJECT.GetStage())

		// remove instance from the back repo 3 maps
		specobjectID := backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]
		delete(backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID, specobject)
		delete(backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB, specobjectID)
		delete(backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr, specobjectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specobjectDB that has been found in the DB, updates the backRepo and stages the
// models version of the specobjectDB
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CheckoutPhaseOneInstance(specobjectDB *SPECOBJECTDB) (Error error) {

	specobject, ok := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[specobjectDB.ID]
	if !ok {
		specobject = new(models.SPECOBJECT)

		backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[specobjectDB.ID] = specobject
		backRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject] = specobjectDB.ID

		// append model store with the new element
		specobject.Name = specobjectDB.Name_Data.String
		specobject.Stage(backRepoSPECOBJECT.GetStage())
	}
	specobjectDB.CopyBasicFieldsToSPECOBJECT(specobject)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specobject.Stage(backRepoSPECOBJECT.GetStage())

	// preserve pointer to specobjectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECOBJECTDBID_SPECOBJECTDB)[specobjectDB hold variable pointers
	specobjectDB_Data := *specobjectDB
	preservedPtrToSPECOBJECT := &specobjectDB_Data
	backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[specobjectDB.ID] = preservedPtrToSPECOBJECT

	return
}

// BackRepoSPECOBJECT.CheckoutPhaseTwo Checkouts all staged instances of SPECOBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specobjectDB := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB {
		backRepoSPECOBJECT.CheckoutPhaseTwoInstance(backRepo, specobjectDB)
	}
	return
}

// BackRepoSPECOBJECT.CheckoutPhaseTwoInstance Checkouts staged instances of SPECOBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specobjectDB *SPECOBJECTDB) (Error error) {

	specobject := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr[specobjectDB.ID]

	specobjectDB.DecodePointers(backRepo, specobject)

	return
}

func (specobjectDB *SPECOBJECTDB) DecodePointers(backRepo *BackRepoStruct, specobject *models.SPECOBJECT) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	specobject.ALTERNATIVEID = nil
	if specobjectDB.ALTERNATIVEIDID.Int64 != 0 {
		specobject.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(specobjectDB.ALTERNATIVEIDID.Int64)]
	}
	// VALUES field
	specobject.VALUES = nil
	if specobjectDB.VALUESID.Int64 != 0 {
		specobject.VALUES = backRepo.BackRepoVALUES.Map_VALUESDBID_VALUESPtr[uint(specobjectDB.VALUESID.Int64)]
	}
	// TYPE field
	specobject.TYPE = nil
	if specobjectDB.TYPEID.Int64 != 0 {
		specobject.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(specobjectDB.TYPEID.Int64)]
	}
	return
}

// CommitSPECOBJECT allows commit of a single specobject (if already staged)
func (backRepo *BackRepoStruct) CommitSPECOBJECT(specobject *models.SPECOBJECT) {
	backRepo.BackRepoSPECOBJECT.CommitPhaseOneInstance(specobject)
	if id, ok := backRepo.BackRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]; ok {
		backRepo.BackRepoSPECOBJECT.CommitPhaseTwoInstance(backRepo, id, specobject)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECOBJECT allows checkout of a single specobject (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECOBJECT(specobject *models.SPECOBJECT) {
	// check if the specobject is staged
	if _, ok := backRepo.BackRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]; ok {

		if id, ok := backRepo.BackRepoSPECOBJECT.Map_SPECOBJECTPtr_SPECOBJECTDBID[specobject]; ok {
			var specobjectDB SPECOBJECTDB
			specobjectDB.ID = id

			if err := backRepo.BackRepoSPECOBJECT.db.First(&specobjectDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECOBJECT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECOBJECT.CheckoutPhaseOneInstance(&specobjectDB)
			backRepo.BackRepoSPECOBJECT.CheckoutPhaseTwoInstance(backRepo, &specobjectDB)
		}
	}
}

// CopyBasicFieldsFromSPECOBJECT
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsFromSPECOBJECT(specobject *models.SPECOBJECT) {
	// insertion point for fields commit

	specobjectDB.Name_Data.String = specobject.Name
	specobjectDB.Name_Data.Valid = true

	specobjectDB.DESCAttr_Data.String = specobject.DESCAttr
	specobjectDB.DESCAttr_Data.Valid = true

	specobjectDB.IDENTIFIERAttr_Data.String = specobject.IDENTIFIERAttr
	specobjectDB.IDENTIFIERAttr_Data.Valid = true

	specobjectDB.LASTCHANGEAttr_Data.String = specobject.LASTCHANGEAttr
	specobjectDB.LASTCHANGEAttr_Data.Valid = true

	specobjectDB.LONGNAMEAttr_Data.String = specobject.LONGNAMEAttr
	specobjectDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECOBJECT_WOP
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsFromSPECOBJECT_WOP(specobject *models.SPECOBJECT_WOP) {
	// insertion point for fields commit

	specobjectDB.Name_Data.String = specobject.Name
	specobjectDB.Name_Data.Valid = true

	specobjectDB.DESCAttr_Data.String = specobject.DESCAttr
	specobjectDB.DESCAttr_Data.Valid = true

	specobjectDB.IDENTIFIERAttr_Data.String = specobject.IDENTIFIERAttr
	specobjectDB.IDENTIFIERAttr_Data.Valid = true

	specobjectDB.LASTCHANGEAttr_Data.String = specobject.LASTCHANGEAttr
	specobjectDB.LASTCHANGEAttr_Data.Valid = true

	specobjectDB.LONGNAMEAttr_Data.String = specobject.LONGNAMEAttr
	specobjectDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECOBJECTWOP
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsFromSPECOBJECTWOP(specobject *SPECOBJECTWOP) {
	// insertion point for fields commit

	specobjectDB.Name_Data.String = specobject.Name
	specobjectDB.Name_Data.Valid = true

	specobjectDB.DESCAttr_Data.String = specobject.DESCAttr
	specobjectDB.DESCAttr_Data.Valid = true

	specobjectDB.IDENTIFIERAttr_Data.String = specobject.IDENTIFIERAttr
	specobjectDB.IDENTIFIERAttr_Data.Valid = true

	specobjectDB.LASTCHANGEAttr_Data.String = specobject.LASTCHANGEAttr
	specobjectDB.LASTCHANGEAttr_Data.Valid = true

	specobjectDB.LONGNAMEAttr_Data.String = specobject.LONGNAMEAttr
	specobjectDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToSPECOBJECT
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsToSPECOBJECT(specobject *models.SPECOBJECT) {
	// insertion point for checkout of basic fields (back repo to stage)
	specobject.Name = specobjectDB.Name_Data.String
	specobject.DESCAttr = specobjectDB.DESCAttr_Data.String
	specobject.IDENTIFIERAttr = specobjectDB.IDENTIFIERAttr_Data.String
	specobject.LASTCHANGEAttr = specobjectDB.LASTCHANGEAttr_Data.String
	specobject.LONGNAMEAttr = specobjectDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECOBJECT_WOP
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsToSPECOBJECT_WOP(specobject *models.SPECOBJECT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specobject.Name = specobjectDB.Name_Data.String
	specobject.DESCAttr = specobjectDB.DESCAttr_Data.String
	specobject.IDENTIFIERAttr = specobjectDB.IDENTIFIERAttr_Data.String
	specobject.LASTCHANGEAttr = specobjectDB.LASTCHANGEAttr_Data.String
	specobject.LONGNAMEAttr = specobjectDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECOBJECTWOP
func (specobjectDB *SPECOBJECTDB) CopyBasicFieldsToSPECOBJECTWOP(specobject *SPECOBJECTWOP) {
	specobject.ID = int(specobjectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specobject.Name = specobjectDB.Name_Data.String
	specobject.DESCAttr = specobjectDB.DESCAttr_Data.String
	specobject.IDENTIFIERAttr = specobjectDB.IDENTIFIERAttr_Data.String
	specobject.LASTCHANGEAttr = specobjectDB.LASTCHANGEAttr_Data.String
	specobject.LONGNAMEAttr = specobjectDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all SPECOBJECTDB instances in the backrepo
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECOBJECTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECOBJECTDB, 0)
	for _, specobjectDB := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB {
		forBackup = append(forBackup, specobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECOBJECT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECOBJECT file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECOBJECTDB instances in the backrepo
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECOBJECTDB, 0)
	for _, specobjectDB := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB {
		forBackup = append(forBackup, specobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECOBJECT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECOBJECT_Fields, -1)
	for _, specobjectDB := range forBackup {

		var specobjectWOP SPECOBJECTWOP
		specobjectDB.CopyBasicFieldsToSPECOBJECTWOP(&specobjectWOP)

		row := sh.AddRow()
		row.WriteStruct(&specobjectWOP, -1)
	}
}

// RestoreXL from the "SPECOBJECT" sheet all SPECOBJECTDB instances
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECOBJECTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECOBJECT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECOBJECT.rowVisitorSPECOBJECT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) rowVisitorSPECOBJECT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specobjectWOP SPECOBJECTWOP
		row.ReadStruct(&specobjectWOP)

		// add the unmarshalled struct to the stage
		specobjectDB := new(SPECOBJECTDB)
		specobjectDB.CopyBasicFieldsFromSPECOBJECTWOP(&specobjectWOP)

		specobjectDB_ID_atBackupTime := specobjectDB.ID
		specobjectDB.ID = 0
		query := backRepoSPECOBJECT.db.Create(specobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[specobjectDB.ID] = specobjectDB
		BackRepoSPECOBJECTid_atBckpTime_newID[specobjectDB_ID_atBackupTime] = specobjectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECOBJECTDB.json" in dirPath that stores an array
// of SPECOBJECTDB and stores it in the database
// the map BackRepoSPECOBJECTid_atBckpTime_newID is updated accordingly
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECOBJECTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECOBJECTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECOBJECT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECOBJECTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECOBJECTDBID_SPECOBJECTDB
	for _, specobjectDB := range forRestore {

		specobjectDB_ID_atBackupTime := specobjectDB.ID
		specobjectDB.ID = 0
		query := backRepoSPECOBJECT.db.Create(specobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[specobjectDB.ID] = specobjectDB
		BackRepoSPECOBJECTid_atBckpTime_newID[specobjectDB_ID_atBackupTime] = specobjectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECOBJECT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECOBJECT>id_atBckpTime_newID
// to compute new index
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) RestorePhaseTwo() {

	for _, specobjectDB := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB {

		// next line of code is to avert unused variable compilation error
		_ = specobjectDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if specobjectDB.ALTERNATIVEIDID.Int64 != 0 {
			specobjectDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(specobjectDB.ALTERNATIVEIDID.Int64)])
			specobjectDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing VALUES field
		if specobjectDB.VALUESID.Int64 != 0 {
			specobjectDB.VALUESID.Int64 = int64(BackRepoVALUESid_atBckpTime_newID[uint(specobjectDB.VALUESID.Int64)])
			specobjectDB.VALUESID.Valid = true
		}

		// reindexing TYPE field
		if specobjectDB.TYPEID.Int64 != 0 {
			specobjectDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(specobjectDB.TYPEID.Int64)])
			specobjectDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSPECOBJECT.db.Model(specobjectDB).Updates(*specobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECOBJECT.ResetReversePointers commits all staged instances of SPECOBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specobject := range backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTPtr {
		backRepoSPECOBJECT.ResetReversePointersInstance(backRepo, idx, specobject)
	}

	return
}

func (backRepoSPECOBJECT *BackRepoSPECOBJECTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specobject *models.SPECOBJECT) (Error error) {

	// fetch matching specobjectDB
	if specobjectDB, ok := backRepoSPECOBJECT.Map_SPECOBJECTDBID_SPECOBJECTDB[idx]; ok {
		_ = specobjectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECOBJECTid_atBckpTime_newID map[uint]uint
