// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEVALUEBOOLEAN_sql sql.NullBool
var dummy_ATTRIBUTEVALUEBOOLEAN_time time.Duration
var dummy_ATTRIBUTEVALUEBOOLEAN_sort sort.Float64Slice

// ATTRIBUTEVALUEBOOLEANAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributevaluebooleanAPI
type ATTRIBUTEVALUEBOOLEANAPI struct {
	gorm.Model

	models.ATTRIBUTEVALUEBOOLEAN_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEVALUEBOOLEANPointersEncoding ATTRIBUTEVALUEBOOLEANPointersEncoding
}

// ATTRIBUTEVALUEBOOLEANPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEVALUEBOOLEANPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFINITION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFINITIONID sql.NullInt64
}

// ATTRIBUTEVALUEBOOLEANDB describes a attributevalueboolean in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributevaluebooleanDB
type ATTRIBUTEVALUEBOOLEANDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributevaluebooleanDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributevaluebooleanDB.THEVALUEAttr
	// provide the sql storage for the boolan
	THEVALUEAttr_Data sql.NullBool
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEVALUEBOOLEANPointersEncoding
}

// ATTRIBUTEVALUEBOOLEANDBs arrays attributevaluebooleanDBs
// swagger:response attributevaluebooleanDBsResponse
type ATTRIBUTEVALUEBOOLEANDBs []ATTRIBUTEVALUEBOOLEANDB

// ATTRIBUTEVALUEBOOLEANDBResponse provides response
// swagger:response attributevaluebooleanDBResponse
type ATTRIBUTEVALUEBOOLEANDBResponse struct {
	ATTRIBUTEVALUEBOOLEANDB
}

// ATTRIBUTEVALUEBOOLEANWOP is a ATTRIBUTEVALUEBOOLEAN without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEVALUEBOOLEANWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	THEVALUEAttr bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEVALUEBOOLEAN_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"THEVALUEAttr",
}

type BackRepoATTRIBUTEVALUEBOOLEANStruct struct {
	// stores ATTRIBUTEVALUEBOOLEANDB according to their gorm ID
	Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB map[uint]*ATTRIBUTEVALUEBOOLEANDB

	// stores ATTRIBUTEVALUEBOOLEANDB ID according to ATTRIBUTEVALUEBOOLEAN address
	Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID map[*models.ATTRIBUTEVALUEBOOLEAN]uint

	// stores ATTRIBUTEVALUEBOOLEAN according to their gorm ID
	Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr map[uint]*models.ATTRIBUTEVALUEBOOLEAN

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEVALUEBOOLEAN.stage
	return
}

func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEVALUEBOOLEAN.db
}

// GetATTRIBUTEVALUEBOOLEANDBFromATTRIBUTEVALUEBOOLEANPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) GetATTRIBUTEVALUEBOOLEANDBFromATTRIBUTEVALUEBOOLEANPtr(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) {
	id := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]
	attributevaluebooleanDB = backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[id]
	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseOne commits all staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributevalueboolean := range stage.ATTRIBUTEVALUEBOOLEANs {
		backRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseOneInstance(attributevalueboolean)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributevalueboolean := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr {
		if _, ok := stage.ATTRIBUTEVALUEBOOLEANs[attributevalueboolean]; !ok {
			backRepoATTRIBUTEVALUEBOOLEAN.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CommitDeleteInstance commits deletion of ATTRIBUTEVALUEBOOLEAN to the BackRepo
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CommitDeleteInstance(id uint) (Error error) {

	attributevalueboolean := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[id]

	// attributevalueboolean is not staged anymore, remove attributevaluebooleanDB
	attributevaluebooleanDB := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[id]
	query := backRepoATTRIBUTEVALUEBOOLEAN.db.Unscoped().Delete(&attributevaluebooleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID, attributevalueboolean)
	delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr, id)
	delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB, id)

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseOneInstance commits attributevalueboolean staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CommitPhaseOneInstance(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) (Error error) {

	// check if the attributevalueboolean is not commited yet
	if _, ok := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]; ok {
		return
	}

	// initiate attributevalueboolean
	var attributevaluebooleanDB ATTRIBUTEVALUEBOOLEANDB
	attributevaluebooleanDB.CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN(attributevalueboolean)

	query := backRepoATTRIBUTEVALUEBOOLEAN.db.Create(&attributevaluebooleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean] = attributevaluebooleanDB.ID
	backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[attributevaluebooleanDB.ID] = attributevalueboolean
	backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[attributevaluebooleanDB.ID] = &attributevaluebooleanDB

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseTwo commits all staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueboolean := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr {
		backRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseTwoInstance(backRepo, idx, attributevalueboolean)
	}

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) (Error error) {

	// fetch matching attributevaluebooleanDB
	if attributevaluebooleanDB, ok := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[idx]; ok {

		attributevaluebooleanDB.CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN(attributevalueboolean)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributevalueboolean.DEFINITION translates to updating the attributevalueboolean.DEFINITIONID
		attributevaluebooleanDB.DEFINITIONID.Valid = true // allow for a 0 value (nil association)
		if attributevalueboolean.DEFINITION != nil {
			if DEFINITIONId, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[attributevalueboolean.DEFINITION]; ok {
				attributevaluebooleanDB.DEFINITIONID.Int64 = int64(DEFINITIONId)
				attributevaluebooleanDB.DEFINITIONID.Valid = true
			}
		} else {
			attributevaluebooleanDB.DEFINITIONID.Int64 = 0
			attributevaluebooleanDB.DEFINITIONID.Valid = true
		}

		query := backRepoATTRIBUTEVALUEBOOLEAN.db.Save(&attributevaluebooleanDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEVALUEBOOLEAN intance %s", attributevalueboolean.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CheckoutPhaseOne() (Error error) {

	attributevaluebooleanDBArray := make([]ATTRIBUTEVALUEBOOLEANDB, 0)
	query := backRepoATTRIBUTEVALUEBOOLEAN.db.Find(&attributevaluebooleanDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributevaluebooleanInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEVALUEBOOLEAN]any)
	for key, value := range backRepoATTRIBUTEVALUEBOOLEAN.stage.ATTRIBUTEVALUEBOOLEANs {
		attributevaluebooleanInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributevaluebooleanDB := range attributevaluebooleanDBArray {
		backRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseOneInstance(&attributevaluebooleanDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributevalueboolean, ok := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[attributevaluebooleanDB.ID]
		if ok {
			delete(attributevaluebooleanInstancesToBeRemovedFromTheStage, attributevalueboolean)
		}
	}

	// remove from stage and back repo's 3 maps all attributevaluebooleans that are not in the checkout
	for attributevalueboolean := range attributevaluebooleanInstancesToBeRemovedFromTheStage {
		attributevalueboolean.Unstage(backRepoATTRIBUTEVALUEBOOLEAN.GetStage())

		// remove instance from the back repo 3 maps
		attributevaluebooleanID := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]
		delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID, attributevalueboolean)
		delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB, attributevaluebooleanID)
		delete(backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr, attributevaluebooleanID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributevaluebooleanDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributevaluebooleanDB
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CheckoutPhaseOneInstance(attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) (Error error) {

	attributevalueboolean, ok := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[attributevaluebooleanDB.ID]
	if !ok {
		attributevalueboolean = new(models.ATTRIBUTEVALUEBOOLEAN)

		backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[attributevaluebooleanDB.ID] = attributevalueboolean
		backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean] = attributevaluebooleanDB.ID

		// append model store with the new element
		attributevalueboolean.Name = attributevaluebooleanDB.Name_Data.String
		attributevalueboolean.Stage(backRepoATTRIBUTEVALUEBOOLEAN.GetStage())
	}
	attributevaluebooleanDB.CopyBasicFieldsToATTRIBUTEVALUEBOOLEAN(attributevalueboolean)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributevalueboolean.Stage(backRepoATTRIBUTEVALUEBOOLEAN.GetStage())

	// preserve pointer to attributevaluebooleanDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB)[attributevaluebooleanDB hold variable pointers
	attributevaluebooleanDB_Data := *attributevaluebooleanDB
	preservedPtrToATTRIBUTEVALUEBOOLEAN := &attributevaluebooleanDB_Data
	backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[attributevaluebooleanDB.ID] = preservedPtrToATTRIBUTEVALUEBOOLEAN

	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributevaluebooleanDB := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB {
		backRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseTwoInstance(backRepo, attributevaluebooleanDB)
	}
	return
}

// BackRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) (Error error) {

	attributevalueboolean := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[attributevaluebooleanDB.ID]

	attributevaluebooleanDB.DecodePointers(backRepo, attributevalueboolean)

	return
}

func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) DecodePointers(backRepo *BackRepoStruct, attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) {

	// insertion point for checkout of pointer encoding
	// DEFINITION field
	attributevalueboolean.DEFINITION = nil
	if attributevaluebooleanDB.DEFINITIONID.Int64 != 0 {
		attributevalueboolean.DEFINITION = backRepo.BackRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[uint(attributevaluebooleanDB.DEFINITIONID.Int64)]
	}
	return
}

// CommitATTRIBUTEVALUEBOOLEAN allows commit of a single attributevalueboolean (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEVALUEBOOLEAN(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) {
	backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseOneInstance(attributevalueboolean)
	if id, ok := backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]; ok {
		backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.CommitPhaseTwoInstance(backRepo, id, attributevalueboolean)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEVALUEBOOLEAN allows checkout of a single attributevalueboolean (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEVALUEBOOLEAN(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) {
	// check if the attributevalueboolean is staged
	if _, ok := backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[attributevalueboolean]; ok {
			var attributevaluebooleanDB ATTRIBUTEVALUEBOOLEANDB
			attributevaluebooleanDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.db.First(&attributevaluebooleanDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEVALUEBOOLEAN : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseOneInstance(&attributevaluebooleanDB)
			backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.CheckoutPhaseTwoInstance(backRepo, &attributevaluebooleanDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) {
	// insertion point for fields commit

	attributevaluebooleanDB.Name_Data.String = attributevalueboolean.Name
	attributevaluebooleanDB.Name_Data.Valid = true

	attributevaluebooleanDB.THEVALUEAttr_Data.Bool = attributevalueboolean.THEVALUEAttr
	attributevaluebooleanDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN_WOP
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsFromATTRIBUTEVALUEBOOLEAN_WOP(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN_WOP) {
	// insertion point for fields commit

	attributevaluebooleanDB.Name_Data.String = attributevalueboolean.Name
	attributevaluebooleanDB.Name_Data.Valid = true

	attributevaluebooleanDB.THEVALUEAttr_Data.Bool = attributevalueboolean.THEVALUEAttr
	attributevaluebooleanDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEBOOLEANWOP
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsFromATTRIBUTEVALUEBOOLEANWOP(attributevalueboolean *ATTRIBUTEVALUEBOOLEANWOP) {
	// insertion point for fields commit

	attributevaluebooleanDB.Name_Data.String = attributevalueboolean.Name
	attributevaluebooleanDB.Name_Data.Valid = true

	attributevaluebooleanDB.THEVALUEAttr_Data.Bool = attributevalueboolean.THEVALUEAttr
	attributevaluebooleanDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEVALUEBOOLEAN
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsToATTRIBUTEVALUEBOOLEAN(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueboolean.Name = attributevaluebooleanDB.Name_Data.String
	attributevalueboolean.THEVALUEAttr = attributevaluebooleanDB.THEVALUEAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEVALUEBOOLEAN_WOP
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsToATTRIBUTEVALUEBOOLEAN_WOP(attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueboolean.Name = attributevaluebooleanDB.Name_Data.String
	attributevalueboolean.THEVALUEAttr = attributevaluebooleanDB.THEVALUEAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEVALUEBOOLEANWOP
func (attributevaluebooleanDB *ATTRIBUTEVALUEBOOLEANDB) CopyBasicFieldsToATTRIBUTEVALUEBOOLEANWOP(attributevalueboolean *ATTRIBUTEVALUEBOOLEANWOP) {
	attributevalueboolean.ID = int(attributevaluebooleanDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueboolean.Name = attributevaluebooleanDB.Name_Data.String
	attributevalueboolean.THEVALUEAttr = attributevaluebooleanDB.THEVALUEAttr_Data.Bool
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEBOOLEANDB instances in the backrepo
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEBOOLEANDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEBOOLEANDB, 0)
	for _, attributevaluebooleanDB := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB {
		forBackup = append(forBackup, attributevaluebooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEVALUEBOOLEAN ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEVALUEBOOLEAN file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEBOOLEANDB instances in the backrepo
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEBOOLEANDB, 0)
	for _, attributevaluebooleanDB := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB {
		forBackup = append(forBackup, attributevaluebooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEVALUEBOOLEAN")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEVALUEBOOLEAN_Fields, -1)
	for _, attributevaluebooleanDB := range forBackup {

		var attributevaluebooleanWOP ATTRIBUTEVALUEBOOLEANWOP
		attributevaluebooleanDB.CopyBasicFieldsToATTRIBUTEVALUEBOOLEANWOP(&attributevaluebooleanWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributevaluebooleanWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEVALUEBOOLEAN" sheet all ATTRIBUTEVALUEBOOLEANDB instances
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEVALUEBOOLEAN"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEVALUEBOOLEAN.rowVisitorATTRIBUTEVALUEBOOLEAN)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) rowVisitorATTRIBUTEVALUEBOOLEAN(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributevaluebooleanWOP ATTRIBUTEVALUEBOOLEANWOP
		row.ReadStruct(&attributevaluebooleanWOP)

		// add the unmarshalled struct to the stage
		attributevaluebooleanDB := new(ATTRIBUTEVALUEBOOLEANDB)
		attributevaluebooleanDB.CopyBasicFieldsFromATTRIBUTEVALUEBOOLEANWOP(&attributevaluebooleanWOP)

		attributevaluebooleanDB_ID_atBackupTime := attributevaluebooleanDB.ID
		attributevaluebooleanDB.ID = 0
		query := backRepoATTRIBUTEVALUEBOOLEAN.db.Create(attributevaluebooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[attributevaluebooleanDB.ID] = attributevaluebooleanDB
		BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID[attributevaluebooleanDB_ID_atBackupTime] = attributevaluebooleanDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEVALUEBOOLEANDB.json" in dirPath that stores an array
// of ATTRIBUTEVALUEBOOLEANDB and stores it in the database
// the map BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEBOOLEANDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEVALUEBOOLEAN file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEVALUEBOOLEANDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB
	for _, attributevaluebooleanDB := range forRestore {

		attributevaluebooleanDB_ID_atBackupTime := attributevaluebooleanDB.ID
		attributevaluebooleanDB.ID = 0
		query := backRepoATTRIBUTEVALUEBOOLEAN.db.Create(attributevaluebooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[attributevaluebooleanDB.ID] = attributevaluebooleanDB
		BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID[attributevaluebooleanDB_ID_atBackupTime] = attributevaluebooleanDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEVALUEBOOLEAN file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEVALUEBOOLEAN>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) RestorePhaseTwo() {

	for _, attributevaluebooleanDB := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB {

		// next line of code is to avert unused variable compilation error
		_ = attributevaluebooleanDB

		// insertion point for reindexing pointers encoding
		// reindexing DEFINITION field
		if attributevaluebooleanDB.DEFINITIONID.Int64 != 0 {
			attributevaluebooleanDB.DEFINITIONID.Int64 = int64(BackRepoDEFINITIONid_atBckpTime_newID[uint(attributevaluebooleanDB.DEFINITIONID.Int64)])
			attributevaluebooleanDB.DEFINITIONID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEVALUEBOOLEAN.db.Model(attributevaluebooleanDB).Updates(*attributevaluebooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEVALUEBOOLEAN.ResetReversePointers commits all staged instances of ATTRIBUTEVALUEBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueboolean := range backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr {
		backRepoATTRIBUTEVALUEBOOLEAN.ResetReversePointersInstance(backRepo, idx, attributevalueboolean)
	}

	return
}

func (backRepoATTRIBUTEVALUEBOOLEAN *BackRepoATTRIBUTEVALUEBOOLEANStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributevalueboolean *models.ATTRIBUTEVALUEBOOLEAN) (Error error) {

	// fetch matching attributevaluebooleanDB
	if attributevaluebooleanDB, ok := backRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANDB[idx]; ok {
		_ = attributevaluebooleanDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID map[uint]uint
