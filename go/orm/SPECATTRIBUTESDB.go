// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECATTRIBUTES_sql sql.NullBool
var dummy_SPECATTRIBUTES_time time.Duration
var dummy_SPECATTRIBUTES_sort sort.Float64Slice

// SPECATTRIBUTESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specattributesAPI
type SPECATTRIBUTESAPI struct {
	gorm.Model

	models.SPECATTRIBUTES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECATTRIBUTESPointersEncoding SPECATTRIBUTESPointersEncoding
}

// SPECATTRIBUTESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECATTRIBUTESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTEDEFINITIONBOOLEAN is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONBOOLEAN IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONDATE is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONDATE IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONENUMERATION IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONINTEGER is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONINTEGER IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONREAL is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONREAL IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONSTRING is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONSTRING IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTEDEFINITIONXHTML is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTEDEFINITIONXHTML IntSlice `gorm:"type:TEXT"`
}

// SPECATTRIBUTESDB describes a specattributes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specattributesDB
type SPECATTRIBUTESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specattributesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECATTRIBUTESPointersEncoding
}

// SPECATTRIBUTESDBs arrays specattributesDBs
// swagger:response specattributesDBsResponse
type SPECATTRIBUTESDBs []SPECATTRIBUTESDB

// SPECATTRIBUTESDBResponse provides response
// swagger:response specattributesDBResponse
type SPECATTRIBUTESDBResponse struct {
	SPECATTRIBUTESDB
}

// SPECATTRIBUTESWOP is a SPECATTRIBUTES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECATTRIBUTESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECATTRIBUTES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECATTRIBUTESStruct struct {
	// stores SPECATTRIBUTESDB according to their gorm ID
	Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB map[uint]*SPECATTRIBUTESDB

	// stores SPECATTRIBUTESDB ID according to SPECATTRIBUTES address
	Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID map[*models.SPECATTRIBUTES]uint

	// stores SPECATTRIBUTES according to their gorm ID
	Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr map[uint]*models.SPECATTRIBUTES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECATTRIBUTES.stage
	return
}

func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) GetDB() *gorm.DB {
	return backRepoSPECATTRIBUTES.db
}

// GetSPECATTRIBUTESDBFromSPECATTRIBUTESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) GetSPECATTRIBUTESDBFromSPECATTRIBUTESPtr(specattributes *models.SPECATTRIBUTES) (specattributesDB *SPECATTRIBUTESDB) {
	id := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]
	specattributesDB = backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[id]
	return
}

// BackRepoSPECATTRIBUTES.CommitPhaseOne commits all staged instances of SPECATTRIBUTES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specattributes := range stage.SPECATTRIBUTESs {
		backRepoSPECATTRIBUTES.CommitPhaseOneInstance(specattributes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specattributes := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr {
		if _, ok := stage.SPECATTRIBUTESs[specattributes]; !ok {
			backRepoSPECATTRIBUTES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECATTRIBUTES.CommitDeleteInstance commits deletion of SPECATTRIBUTES to the BackRepo
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CommitDeleteInstance(id uint) (Error error) {

	specattributes := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[id]

	// specattributes is not staged anymore, remove specattributesDB
	specattributesDB := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[id]
	query := backRepoSPECATTRIBUTES.db.Unscoped().Delete(&specattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID, specattributes)
	delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr, id)
	delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB, id)

	return
}

// BackRepoSPECATTRIBUTES.CommitPhaseOneInstance commits specattributes staged instances of SPECATTRIBUTES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CommitPhaseOneInstance(specattributes *models.SPECATTRIBUTES) (Error error) {

	// check if the specattributes is not commited yet
	if _, ok := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]; ok {
		return
	}

	// initiate specattributes
	var specattributesDB SPECATTRIBUTESDB
	specattributesDB.CopyBasicFieldsFromSPECATTRIBUTES(specattributes)

	query := backRepoSPECATTRIBUTES.db.Create(&specattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes] = specattributesDB.ID
	backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[specattributesDB.ID] = specattributes
	backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[specattributesDB.ID] = &specattributesDB

	return
}

// BackRepoSPECATTRIBUTES.CommitPhaseTwo commits all staged instances of SPECATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specattributes := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr {
		backRepoSPECATTRIBUTES.CommitPhaseTwoInstance(backRepo, idx, specattributes)
	}

	return
}

// BackRepoSPECATTRIBUTES.CommitPhaseTwoInstance commits {{structname }} of models.SPECATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specattributes *models.SPECATTRIBUTES) (Error error) {

	// fetch matching specattributesDB
	if specattributesDB, ok := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[idx]; ok {

		specattributesDB.CopyBasicFieldsFromSPECATTRIBUTES(specattributes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONBOOLEAN = make([]int, 0)
		// 2. encode
		for _, attributedefinitionbooleanAssocEnd := range specattributes.ATTRIBUTEDEFINITIONBOOLEAN {
			attributedefinitionbooleanAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONBOOLEAN.GetATTRIBUTEDEFINITIONBOOLEANDBFromATTRIBUTEDEFINITIONBOOLEANPtr(attributedefinitionbooleanAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionbooleanAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionbooleanAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONBOOLEAN =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONBOOLEAN, int(attributedefinitionbooleanAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONDATE = make([]int, 0)
		// 2. encode
		for _, attributedefinitiondateAssocEnd := range specattributes.ATTRIBUTEDEFINITIONDATE {
			attributedefinitiondateAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONDATE.GetATTRIBUTEDEFINITIONDATEDBFromATTRIBUTEDEFINITIONDATEPtr(attributedefinitiondateAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitiondateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitiondateAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONDATE =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONDATE, int(attributedefinitiondateAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONENUMERATION = make([]int, 0)
		// 2. encode
		for _, attributedefinitionenumerationAssocEnd := range specattributes.ATTRIBUTEDEFINITIONENUMERATION {
			attributedefinitionenumerationAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.GetATTRIBUTEDEFINITIONENUMERATIONDBFromATTRIBUTEDEFINITIONENUMERATIONPtr(attributedefinitionenumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionenumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionenumerationAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONENUMERATION =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONENUMERATION, int(attributedefinitionenumerationAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONINTEGER = make([]int, 0)
		// 2. encode
		for _, attributedefinitionintegerAssocEnd := range specattributes.ATTRIBUTEDEFINITIONINTEGER {
			attributedefinitionintegerAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.GetATTRIBUTEDEFINITIONINTEGERDBFromATTRIBUTEDEFINITIONINTEGERPtr(attributedefinitionintegerAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionintegerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionintegerAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONINTEGER =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONINTEGER, int(attributedefinitionintegerAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONREAL = make([]int, 0)
		// 2. encode
		for _, attributedefinitionrealAssocEnd := range specattributes.ATTRIBUTEDEFINITIONREAL {
			attributedefinitionrealAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONREAL.GetATTRIBUTEDEFINITIONREALDBFromATTRIBUTEDEFINITIONREALPtr(attributedefinitionrealAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionrealAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionrealAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONREAL =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONREAL, int(attributedefinitionrealAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONSTRING = make([]int, 0)
		// 2. encode
		for _, attributedefinitionstringAssocEnd := range specattributes.ATTRIBUTEDEFINITIONSTRING {
			attributedefinitionstringAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONSTRING.GetATTRIBUTEDEFINITIONSTRINGDBFromATTRIBUTEDEFINITIONSTRINGPtr(attributedefinitionstringAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionstringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionstringAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONSTRING =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONSTRING, int(attributedefinitionstringAssocEnd_DB.ID))
		}

		// 1. reset
		specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONXHTML = make([]int, 0)
		// 2. encode
		for _, attributedefinitionxhtmlAssocEnd := range specattributes.ATTRIBUTEDEFINITIONXHTML {
			attributedefinitionxhtmlAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.GetATTRIBUTEDEFINITIONXHTMLDBFromATTRIBUTEDEFINITIONXHTMLPtr(attributedefinitionxhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributedefinitionxhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributedefinitionxhtmlAssocEnd_DB == nil {
				continue
			}
			
			specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONXHTML =
				append(specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONXHTML, int(attributedefinitionxhtmlAssocEnd_DB.ID))
		}

		query := backRepoSPECATTRIBUTES.db.Save(&specattributesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECATTRIBUTES intance %s", specattributes.Name))
		return err
	}

	return
}

// BackRepoSPECATTRIBUTES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CheckoutPhaseOne() (Error error) {

	specattributesDBArray := make([]SPECATTRIBUTESDB, 0)
	query := backRepoSPECATTRIBUTES.db.Find(&specattributesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specattributesInstancesToBeRemovedFromTheStage := make(map[*models.SPECATTRIBUTES]any)
	for key, value := range backRepoSPECATTRIBUTES.stage.SPECATTRIBUTESs {
		specattributesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specattributesDB := range specattributesDBArray {
		backRepoSPECATTRIBUTES.CheckoutPhaseOneInstance(&specattributesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specattributes, ok := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[specattributesDB.ID]
		if ok {
			delete(specattributesInstancesToBeRemovedFromTheStage, specattributes)
		}
	}

	// remove from stage and back repo's 3 maps all specattributess that are not in the checkout
	for specattributes := range specattributesInstancesToBeRemovedFromTheStage {
		specattributes.Unstage(backRepoSPECATTRIBUTES.GetStage())

		// remove instance from the back repo 3 maps
		specattributesID := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]
		delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID, specattributes)
		delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB, specattributesID)
		delete(backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr, specattributesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specattributesDB that has been found in the DB, updates the backRepo and stages the
// models version of the specattributesDB
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CheckoutPhaseOneInstance(specattributesDB *SPECATTRIBUTESDB) (Error error) {

	specattributes, ok := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[specattributesDB.ID]
	if !ok {
		specattributes = new(models.SPECATTRIBUTES)

		backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[specattributesDB.ID] = specattributes
		backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes] = specattributesDB.ID

		// append model store with the new element
		specattributes.Name = specattributesDB.Name_Data.String
		specattributes.Stage(backRepoSPECATTRIBUTES.GetStage())
	}
	specattributesDB.CopyBasicFieldsToSPECATTRIBUTES(specattributes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specattributes.Stage(backRepoSPECATTRIBUTES.GetStage())

	// preserve pointer to specattributesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB)[specattributesDB hold variable pointers
	specattributesDB_Data := *specattributesDB
	preservedPtrToSPECATTRIBUTES := &specattributesDB_Data
	backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[specattributesDB.ID] = preservedPtrToSPECATTRIBUTES

	return
}

// BackRepoSPECATTRIBUTES.CheckoutPhaseTwo Checkouts all staged instances of SPECATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specattributesDB := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB {
		backRepoSPECATTRIBUTES.CheckoutPhaseTwoInstance(backRepo, specattributesDB)
	}
	return
}

// BackRepoSPECATTRIBUTES.CheckoutPhaseTwoInstance Checkouts staged instances of SPECATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specattributesDB *SPECATTRIBUTESDB) (Error error) {

	specattributes := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[specattributesDB.ID]

	specattributesDB.DecodePointers(backRepo, specattributes)

	return
}

func (specattributesDB *SPECATTRIBUTESDB) DecodePointers(backRepo *BackRepoStruct, specattributes *models.SPECATTRIBUTES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem specattributes.ATTRIBUTEDEFINITIONBOOLEAN in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONBOOLEANDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONBOOLEAN = specattributes.ATTRIBUTEDEFINITIONBOOLEAN[:0]
	for _, _ATTRIBUTEDEFINITIONBOOLEANid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONBOOLEAN {
		specattributes.ATTRIBUTEDEFINITIONBOOLEAN = append(specattributes.ATTRIBUTEDEFINITIONBOOLEAN, backRepo.BackRepoATTRIBUTEDEFINITIONBOOLEAN.Map_ATTRIBUTEDEFINITIONBOOLEANDBID_ATTRIBUTEDEFINITIONBOOLEANPtr[uint(_ATTRIBUTEDEFINITIONBOOLEANid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONDATE in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONDATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONDATE = specattributes.ATTRIBUTEDEFINITIONDATE[:0]
	for _, _ATTRIBUTEDEFINITIONDATEid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONDATE {
		specattributes.ATTRIBUTEDEFINITIONDATE = append(specattributes.ATTRIBUTEDEFINITIONDATE, backRepo.BackRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[uint(_ATTRIBUTEDEFINITIONDATEid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONENUMERATION in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONENUMERATION = specattributes.ATTRIBUTEDEFINITIONENUMERATION[:0]
	for _, _ATTRIBUTEDEFINITIONENUMERATIONid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONENUMERATION {
		specattributes.ATTRIBUTEDEFINITIONENUMERATION = append(specattributes.ATTRIBUTEDEFINITIONENUMERATION, backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[uint(_ATTRIBUTEDEFINITIONENUMERATIONid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONINTEGER in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONINTEGERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONINTEGER = specattributes.ATTRIBUTEDEFINITIONINTEGER[:0]
	for _, _ATTRIBUTEDEFINITIONINTEGERid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONINTEGER {
		specattributes.ATTRIBUTEDEFINITIONINTEGER = append(specattributes.ATTRIBUTEDEFINITIONINTEGER, backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[uint(_ATTRIBUTEDEFINITIONINTEGERid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONREAL in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONREALDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONREAL = specattributes.ATTRIBUTEDEFINITIONREAL[:0]
	for _, _ATTRIBUTEDEFINITIONREALid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONREAL {
		specattributes.ATTRIBUTEDEFINITIONREAL = append(specattributes.ATTRIBUTEDEFINITIONREAL, backRepo.BackRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[uint(_ATTRIBUTEDEFINITIONREALid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONSTRING in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONSTRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONSTRING = specattributes.ATTRIBUTEDEFINITIONSTRING[:0]
	for _, _ATTRIBUTEDEFINITIONSTRINGid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONSTRING {
		specattributes.ATTRIBUTEDEFINITIONSTRING = append(specattributes.ATTRIBUTEDEFINITIONSTRING, backRepo.BackRepoATTRIBUTEDEFINITIONSTRING.Map_ATTRIBUTEDEFINITIONSTRINGDBID_ATTRIBUTEDEFINITIONSTRINGPtr[uint(_ATTRIBUTEDEFINITIONSTRINGid)])
	}

	// This loop redeem specattributes.ATTRIBUTEDEFINITIONXHTML in the stage from the encode in the back repo
	// It parses all ATTRIBUTEDEFINITIONXHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specattributes.ATTRIBUTEDEFINITIONXHTML = specattributes.ATTRIBUTEDEFINITIONXHTML[:0]
	for _, _ATTRIBUTEDEFINITIONXHTMLid := range specattributesDB.SPECATTRIBUTESPointersEncoding.ATTRIBUTEDEFINITIONXHTML {
		specattributes.ATTRIBUTEDEFINITIONXHTML = append(specattributes.ATTRIBUTEDEFINITIONXHTML, backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[uint(_ATTRIBUTEDEFINITIONXHTMLid)])
	}

	return
}

// CommitSPECATTRIBUTES allows commit of a single specattributes (if already staged)
func (backRepo *BackRepoStruct) CommitSPECATTRIBUTES(specattributes *models.SPECATTRIBUTES) {
	backRepo.BackRepoSPECATTRIBUTES.CommitPhaseOneInstance(specattributes)
	if id, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]; ok {
		backRepo.BackRepoSPECATTRIBUTES.CommitPhaseTwoInstance(backRepo, id, specattributes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECATTRIBUTES allows checkout of a single specattributes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECATTRIBUTES(specattributes *models.SPECATTRIBUTES) {
	// check if the specattributes is staged
	if _, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]; ok {

		if id, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specattributes]; ok {
			var specattributesDB SPECATTRIBUTESDB
			specattributesDB.ID = id

			if err := backRepo.BackRepoSPECATTRIBUTES.db.First(&specattributesDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECATTRIBUTES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECATTRIBUTES.CheckoutPhaseOneInstance(&specattributesDB)
			backRepo.BackRepoSPECATTRIBUTES.CheckoutPhaseTwoInstance(backRepo, &specattributesDB)
		}
	}
}

// CopyBasicFieldsFromSPECATTRIBUTES
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsFromSPECATTRIBUTES(specattributes *models.SPECATTRIBUTES) {
	// insertion point for fields commit

	specattributesDB.Name_Data.String = specattributes.Name
	specattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECATTRIBUTES_WOP
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsFromSPECATTRIBUTES_WOP(specattributes *models.SPECATTRIBUTES_WOP) {
	// insertion point for fields commit

	specattributesDB.Name_Data.String = specattributes.Name
	specattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECATTRIBUTESWOP
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsFromSPECATTRIBUTESWOP(specattributes *SPECATTRIBUTESWOP) {
	// insertion point for fields commit

	specattributesDB.Name_Data.String = specattributes.Name
	specattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECATTRIBUTES
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsToSPECATTRIBUTES(specattributes *models.SPECATTRIBUTES) {
	// insertion point for checkout of basic fields (back repo to stage)
	specattributes.Name = specattributesDB.Name_Data.String
}

// CopyBasicFieldsToSPECATTRIBUTES_WOP
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsToSPECATTRIBUTES_WOP(specattributes *models.SPECATTRIBUTES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specattributes.Name = specattributesDB.Name_Data.String
}

// CopyBasicFieldsToSPECATTRIBUTESWOP
func (specattributesDB *SPECATTRIBUTESDB) CopyBasicFieldsToSPECATTRIBUTESWOP(specattributes *SPECATTRIBUTESWOP) {
	specattributes.ID = int(specattributesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specattributes.Name = specattributesDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECATTRIBUTESDB instances in the backrepo
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECATTRIBUTESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECATTRIBUTESDB, 0)
	for _, specattributesDB := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB {
		forBackup = append(forBackup, specattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECATTRIBUTES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECATTRIBUTES file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECATTRIBUTESDB instances in the backrepo
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECATTRIBUTESDB, 0)
	for _, specattributesDB := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB {
		forBackup = append(forBackup, specattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECATTRIBUTES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECATTRIBUTES_Fields, -1)
	for _, specattributesDB := range forBackup {

		var specattributesWOP SPECATTRIBUTESWOP
		specattributesDB.CopyBasicFieldsToSPECATTRIBUTESWOP(&specattributesWOP)

		row := sh.AddRow()
		row.WriteStruct(&specattributesWOP, -1)
	}
}

// RestoreXL from the "SPECATTRIBUTES" sheet all SPECATTRIBUTESDB instances
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECATTRIBUTESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECATTRIBUTES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECATTRIBUTES.rowVisitorSPECATTRIBUTES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) rowVisitorSPECATTRIBUTES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specattributesWOP SPECATTRIBUTESWOP
		row.ReadStruct(&specattributesWOP)

		// add the unmarshalled struct to the stage
		specattributesDB := new(SPECATTRIBUTESDB)
		specattributesDB.CopyBasicFieldsFromSPECATTRIBUTESWOP(&specattributesWOP)

		specattributesDB_ID_atBackupTime := specattributesDB.ID
		specattributesDB.ID = 0
		query := backRepoSPECATTRIBUTES.db.Create(specattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[specattributesDB.ID] = specattributesDB
		BackRepoSPECATTRIBUTESid_atBckpTime_newID[specattributesDB_ID_atBackupTime] = specattributesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECATTRIBUTESDB.json" in dirPath that stores an array
// of SPECATTRIBUTESDB and stores it in the database
// the map BackRepoSPECATTRIBUTESid_atBckpTime_newID is updated accordingly
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECATTRIBUTESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECATTRIBUTESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECATTRIBUTES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECATTRIBUTESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB
	for _, specattributesDB := range forRestore {

		specattributesDB_ID_atBackupTime := specattributesDB.ID
		specattributesDB.ID = 0
		query := backRepoSPECATTRIBUTES.db.Create(specattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[specattributesDB.ID] = specattributesDB
		BackRepoSPECATTRIBUTESid_atBckpTime_newID[specattributesDB_ID_atBackupTime] = specattributesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECATTRIBUTES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECATTRIBUTES>id_atBckpTime_newID
// to compute new index
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) RestorePhaseTwo() {

	for _, specattributesDB := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB {

		// next line of code is to avert unused variable compilation error
		_ = specattributesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECATTRIBUTES.db.Model(specattributesDB).Updates(*specattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECATTRIBUTES.ResetReversePointers commits all staged instances of SPECATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specattributes := range backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr {
		backRepoSPECATTRIBUTES.ResetReversePointersInstance(backRepo, idx, specattributes)
	}

	return
}

func (backRepoSPECATTRIBUTES *BackRepoSPECATTRIBUTESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specattributes *models.SPECATTRIBUTES) (Error error) {

	// fetch matching specattributesDB
	if specattributesDB, ok := backRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESDB[idx]; ok {
		_ = specattributesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECATTRIBUTESid_atBckpTime_newID map[uint]uint
