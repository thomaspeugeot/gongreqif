// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONSTRING_sql sql.NullBool
var dummy_DATATYPEDEFINITIONSTRING_time time.Duration
var dummy_DATATYPEDEFINITIONSTRING_sort sort.Float64Slice

// DATATYPEDEFINITIONSTRINGAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionstringAPI
type DATATYPEDEFINITIONSTRINGAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONSTRING_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONSTRINGPointersEncoding DATATYPEDEFINITIONSTRINGPointersEncoding
}

// DATATYPEDEFINITIONSTRINGPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONSTRINGPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64
}

// DATATYPEDEFINITIONSTRINGDB describes a datatypedefinitionstring in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionstringDB
type DATATYPEDEFINITIONSTRINGDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionstringDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionstringDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionstringDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionstringDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionstringDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionstringDB.MAXLENGTHAttr
	MAXLENGTHAttr_Data sql.NullInt64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONSTRINGPointersEncoding
}

// DATATYPEDEFINITIONSTRINGDBs arrays datatypedefinitionstringDBs
// swagger:response datatypedefinitionstringDBsResponse
type DATATYPEDEFINITIONSTRINGDBs []DATATYPEDEFINITIONSTRINGDB

// DATATYPEDEFINITIONSTRINGDBResponse provides response
// swagger:response datatypedefinitionstringDBResponse
type DATATYPEDEFINITIONSTRINGDBResponse struct {
	DATATYPEDEFINITIONSTRINGDB
}

// DATATYPEDEFINITIONSTRINGWOP is a DATATYPEDEFINITIONSTRING without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONSTRINGWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`

	MAXLENGTHAttr int `xlsx:"6"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONSTRING_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
	"MAXLENGTHAttr",
}

type BackRepoDATATYPEDEFINITIONSTRINGStruct struct {
	// stores DATATYPEDEFINITIONSTRINGDB according to their gorm ID
	Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB map[uint]*DATATYPEDEFINITIONSTRINGDB

	// stores DATATYPEDEFINITIONSTRINGDB ID according to DATATYPEDEFINITIONSTRING address
	Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID map[*models.DATATYPEDEFINITIONSTRING]uint

	// stores DATATYPEDEFINITIONSTRING according to their gorm ID
	Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr map[uint]*models.DATATYPEDEFINITIONSTRING

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONSTRING.stage
	return
}

func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONSTRING.db
}

// GetDATATYPEDEFINITIONSTRINGDBFromDATATYPEDEFINITIONSTRINGPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) GetDATATYPEDEFINITIONSTRINGDBFromDATATYPEDEFINITIONSTRINGPtr(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) {
	id := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]
	datatypedefinitionstringDB = backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitionstring := range stage.DATATYPEDEFINITIONSTRINGs {
		backRepoDATATYPEDEFINITIONSTRING.CommitPhaseOneInstance(datatypedefinitionstring)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitionstring := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr {
		if _, ok := stage.DATATYPEDEFINITIONSTRINGs[datatypedefinitionstring]; !ok {
			backRepoDATATYPEDEFINITIONSTRING.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONSTRING to the BackRepo
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitionstring := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[id]

	// datatypedefinitionstring is not staged anymore, remove datatypedefinitionstringDB
	datatypedefinitionstringDB := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[id]
	query := backRepoDATATYPEDEFINITIONSTRING.db.Unscoped().Delete(&datatypedefinitionstringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID, datatypedefinitionstring)
	delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr, id)
	delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseOneInstance commits datatypedefinitionstring staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CommitPhaseOneInstance(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) (Error error) {

	// check if the datatypedefinitionstring is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]; ok {
		return
	}

	// initiate datatypedefinitionstring
	var datatypedefinitionstringDB DATATYPEDEFINITIONSTRINGDB
	datatypedefinitionstringDB.CopyBasicFieldsFromDATATYPEDEFINITIONSTRING(datatypedefinitionstring)

	query := backRepoDATATYPEDEFINITIONSTRING.db.Create(&datatypedefinitionstringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring] = datatypedefinitionstringDB.ID
	backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[datatypedefinitionstringDB.ID] = datatypedefinitionstring
	backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[datatypedefinitionstringDB.ID] = &datatypedefinitionstringDB

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionstring := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr {
		backRepoDATATYPEDEFINITIONSTRING.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitionstring)
	}

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONSTRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) (Error error) {

	// fetch matching datatypedefinitionstringDB
	if datatypedefinitionstringDB, ok := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[idx]; ok {

		datatypedefinitionstringDB.CopyBasicFieldsFromDATATYPEDEFINITIONSTRING(datatypedefinitionstring)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitionstring.ALTERNATIVEID translates to updating the datatypedefinitionstring.ALTERNATIVEIDID
		datatypedefinitionstringDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionstring.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitionstring.ALTERNATIVEID]; ok {
				datatypedefinitionstringDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionstringDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionstringDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionstringDB.ALTERNATIVEIDID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONSTRING.db.Save(&datatypedefinitionstringDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONSTRING intance %s", datatypedefinitionstring.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionstringDBArray := make([]DATATYPEDEFINITIONSTRINGDB, 0)
	query := backRepoDATATYPEDEFINITIONSTRING.db.Find(&datatypedefinitionstringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionstringInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONSTRING]any)
	for key, value := range backRepoDATATYPEDEFINITIONSTRING.stage.DATATYPEDEFINITIONSTRINGs {
		datatypedefinitionstringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionstringDB := range datatypedefinitionstringDBArray {
		backRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseOneInstance(&datatypedefinitionstringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitionstring, ok := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[datatypedefinitionstringDB.ID]
		if ok {
			delete(datatypedefinitionstringInstancesToBeRemovedFromTheStage, datatypedefinitionstring)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionstrings that are not in the checkout
	for datatypedefinitionstring := range datatypedefinitionstringInstancesToBeRemovedFromTheStage {
		datatypedefinitionstring.Unstage(backRepoDATATYPEDEFINITIONSTRING.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionstringID := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]
		delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID, datatypedefinitionstring)
		delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB, datatypedefinitionstringID)
		delete(backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr, datatypedefinitionstringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionstringDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionstringDB
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CheckoutPhaseOneInstance(datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) (Error error) {

	datatypedefinitionstring, ok := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[datatypedefinitionstringDB.ID]
	if !ok {
		datatypedefinitionstring = new(models.DATATYPEDEFINITIONSTRING)

		backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[datatypedefinitionstringDB.ID] = datatypedefinitionstring
		backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring] = datatypedefinitionstringDB.ID

		// append model store with the new element
		datatypedefinitionstring.Name = datatypedefinitionstringDB.Name_Data.String
		datatypedefinitionstring.Stage(backRepoDATATYPEDEFINITIONSTRING.GetStage())
	}
	datatypedefinitionstringDB.CopyBasicFieldsToDATATYPEDEFINITIONSTRING(datatypedefinitionstring)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitionstring.Stage(backRepoDATATYPEDEFINITIONSTRING.GetStage())

	// preserve pointer to datatypedefinitionstringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB)[datatypedefinitionstringDB hold variable pointers
	datatypedefinitionstringDB_Data := *datatypedefinitionstringDB
	preservedPtrToDATATYPEDEFINITIONSTRING := &datatypedefinitionstringDB_Data
	backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[datatypedefinitionstringDB.ID] = preservedPtrToDATATYPEDEFINITIONSTRING

	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionstringDB := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB {
		backRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionstringDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) (Error error) {

	datatypedefinitionstring := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[datatypedefinitionstringDB.ID]

	datatypedefinitionstringDB.DecodePointers(backRepo, datatypedefinitionstring)

	return
}

func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitionstring.ALTERNATIVEID = nil
	if datatypedefinitionstringDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitionstring.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionstringDB.ALTERNATIVEIDID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONSTRING allows commit of a single datatypedefinitionstring (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONSTRING(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) {
	backRepo.BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseOneInstance(datatypedefinitionstring)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONSTRING.CommitPhaseTwoInstance(backRepo, id, datatypedefinitionstring)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONSTRING allows checkout of a single datatypedefinitionstring (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONSTRING(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) {
	// check if the datatypedefinitionstring is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGPtr_DATATYPEDEFINITIONSTRINGDBID[datatypedefinitionstring]; ok {
			var datatypedefinitionstringDB DATATYPEDEFINITIONSTRINGDB
			datatypedefinitionstringDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONSTRING.db.First(&datatypedefinitionstringDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONSTRING : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseOneInstance(&datatypedefinitionstringDB)
			backRepo.BackRepoDATATYPEDEFINITIONSTRING.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionstringDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONSTRING
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsFromDATATYPEDEFINITIONSTRING(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) {
	// insertion point for fields commit

	datatypedefinitionstringDB.Name_Data.String = datatypedefinitionstring.Name
	datatypedefinitionstringDB.Name_Data.Valid = true

	datatypedefinitionstringDB.DESCAttr_Data.String = datatypedefinitionstring.DESCAttr
	datatypedefinitionstringDB.DESCAttr_Data.Valid = true

	datatypedefinitionstringDB.IDENTIFIERAttr_Data.String = datatypedefinitionstring.IDENTIFIERAttr
	datatypedefinitionstringDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionstringDB.LASTCHANGEAttr_Data.String = datatypedefinitionstring.LASTCHANGEAttr
	datatypedefinitionstringDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionstringDB.LONGNAMEAttr_Data.String = datatypedefinitionstring.LONGNAMEAttr
	datatypedefinitionstringDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64 = int64(datatypedefinitionstring.MAXLENGTHAttr)
	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONSTRING_WOP
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsFromDATATYPEDEFINITIONSTRING_WOP(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING_WOP) {
	// insertion point for fields commit

	datatypedefinitionstringDB.Name_Data.String = datatypedefinitionstring.Name
	datatypedefinitionstringDB.Name_Data.Valid = true

	datatypedefinitionstringDB.DESCAttr_Data.String = datatypedefinitionstring.DESCAttr
	datatypedefinitionstringDB.DESCAttr_Data.Valid = true

	datatypedefinitionstringDB.IDENTIFIERAttr_Data.String = datatypedefinitionstring.IDENTIFIERAttr
	datatypedefinitionstringDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionstringDB.LASTCHANGEAttr_Data.String = datatypedefinitionstring.LASTCHANGEAttr
	datatypedefinitionstringDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionstringDB.LONGNAMEAttr_Data.String = datatypedefinitionstring.LONGNAMEAttr
	datatypedefinitionstringDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64 = int64(datatypedefinitionstring.MAXLENGTHAttr)
	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONSTRINGWOP
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsFromDATATYPEDEFINITIONSTRINGWOP(datatypedefinitionstring *DATATYPEDEFINITIONSTRINGWOP) {
	// insertion point for fields commit

	datatypedefinitionstringDB.Name_Data.String = datatypedefinitionstring.Name
	datatypedefinitionstringDB.Name_Data.Valid = true

	datatypedefinitionstringDB.DESCAttr_Data.String = datatypedefinitionstring.DESCAttr
	datatypedefinitionstringDB.DESCAttr_Data.Valid = true

	datatypedefinitionstringDB.IDENTIFIERAttr_Data.String = datatypedefinitionstring.IDENTIFIERAttr
	datatypedefinitionstringDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionstringDB.LASTCHANGEAttr_Data.String = datatypedefinitionstring.LASTCHANGEAttr
	datatypedefinitionstringDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionstringDB.LONGNAMEAttr_Data.String = datatypedefinitionstring.LONGNAMEAttr
	datatypedefinitionstringDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64 = int64(datatypedefinitionstring.MAXLENGTHAttr)
	datatypedefinitionstringDB.MAXLENGTHAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONSTRING
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsToDATATYPEDEFINITIONSTRING(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionstring.Name = datatypedefinitionstringDB.Name_Data.String
	datatypedefinitionstring.DESCAttr = datatypedefinitionstringDB.DESCAttr_Data.String
	datatypedefinitionstring.IDENTIFIERAttr = datatypedefinitionstringDB.IDENTIFIERAttr_Data.String
	datatypedefinitionstring.LASTCHANGEAttr = datatypedefinitionstringDB.LASTCHANGEAttr_Data.String
	datatypedefinitionstring.LONGNAMEAttr = datatypedefinitionstringDB.LONGNAMEAttr_Data.String
	datatypedefinitionstring.MAXLENGTHAttr = int(datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64)
}

// CopyBasicFieldsToDATATYPEDEFINITIONSTRING_WOP
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsToDATATYPEDEFINITIONSTRING_WOP(datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionstring.Name = datatypedefinitionstringDB.Name_Data.String
	datatypedefinitionstring.DESCAttr = datatypedefinitionstringDB.DESCAttr_Data.String
	datatypedefinitionstring.IDENTIFIERAttr = datatypedefinitionstringDB.IDENTIFIERAttr_Data.String
	datatypedefinitionstring.LASTCHANGEAttr = datatypedefinitionstringDB.LASTCHANGEAttr_Data.String
	datatypedefinitionstring.LONGNAMEAttr = datatypedefinitionstringDB.LONGNAMEAttr_Data.String
	datatypedefinitionstring.MAXLENGTHAttr = int(datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64)
}

// CopyBasicFieldsToDATATYPEDEFINITIONSTRINGWOP
func (datatypedefinitionstringDB *DATATYPEDEFINITIONSTRINGDB) CopyBasicFieldsToDATATYPEDEFINITIONSTRINGWOP(datatypedefinitionstring *DATATYPEDEFINITIONSTRINGWOP) {
	datatypedefinitionstring.ID = int(datatypedefinitionstringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionstring.Name = datatypedefinitionstringDB.Name_Data.String
	datatypedefinitionstring.DESCAttr = datatypedefinitionstringDB.DESCAttr_Data.String
	datatypedefinitionstring.IDENTIFIERAttr = datatypedefinitionstringDB.IDENTIFIERAttr_Data.String
	datatypedefinitionstring.LASTCHANGEAttr = datatypedefinitionstringDB.LASTCHANGEAttr_Data.String
	datatypedefinitionstring.LONGNAMEAttr = datatypedefinitionstringDB.LONGNAMEAttr_Data.String
	datatypedefinitionstring.MAXLENGTHAttr = int(datatypedefinitionstringDB.MAXLENGTHAttr_Data.Int64)
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONSTRINGDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONSTRINGDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONSTRINGDB, 0)
	for _, datatypedefinitionstringDB := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB {
		forBackup = append(forBackup, datatypedefinitionstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONSTRING ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONSTRING file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONSTRINGDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONSTRINGDB, 0)
	for _, datatypedefinitionstringDB := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB {
		forBackup = append(forBackup, datatypedefinitionstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONSTRING")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONSTRING_Fields, -1)
	for _, datatypedefinitionstringDB := range forBackup {

		var datatypedefinitionstringWOP DATATYPEDEFINITIONSTRINGWOP
		datatypedefinitionstringDB.CopyBasicFieldsToDATATYPEDEFINITIONSTRINGWOP(&datatypedefinitionstringWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionstringWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONSTRING" sheet all DATATYPEDEFINITIONSTRINGDB instances
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONSTRING"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONSTRING.rowVisitorDATATYPEDEFINITIONSTRING)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) rowVisitorDATATYPEDEFINITIONSTRING(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionstringWOP DATATYPEDEFINITIONSTRINGWOP
		row.ReadStruct(&datatypedefinitionstringWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionstringDB := new(DATATYPEDEFINITIONSTRINGDB)
		datatypedefinitionstringDB.CopyBasicFieldsFromDATATYPEDEFINITIONSTRINGWOP(&datatypedefinitionstringWOP)

		datatypedefinitionstringDB_ID_atBackupTime := datatypedefinitionstringDB.ID
		datatypedefinitionstringDB.ID = 0
		query := backRepoDATATYPEDEFINITIONSTRING.db.Create(datatypedefinitionstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[datatypedefinitionstringDB.ID] = datatypedefinitionstringDB
		BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID[datatypedefinitionstringDB_ID_atBackupTime] = datatypedefinitionstringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONSTRINGDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONSTRINGDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONSTRINGDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONSTRING file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONSTRINGDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB
	for _, datatypedefinitionstringDB := range forRestore {

		datatypedefinitionstringDB_ID_atBackupTime := datatypedefinitionstringDB.ID
		datatypedefinitionstringDB.ID = 0
		query := backRepoDATATYPEDEFINITIONSTRING.db.Create(datatypedefinitionstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[datatypedefinitionstringDB.ID] = datatypedefinitionstringDB
		BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID[datatypedefinitionstringDB_ID_atBackupTime] = datatypedefinitionstringDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONSTRING file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONSTRING>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) RestorePhaseTwo() {

	for _, datatypedefinitionstringDB := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionstringDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionstringDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionstringDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionstringDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionstringDB.ALTERNATIVEIDID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONSTRING.db.Model(datatypedefinitionstringDB).Updates(*datatypedefinitionstringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONSTRING.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONSTRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionstring := range backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr {
		backRepoDATATYPEDEFINITIONSTRING.ResetReversePointersInstance(backRepo, idx, datatypedefinitionstring)
	}

	return
}

func (backRepoDATATYPEDEFINITIONSTRING *BackRepoDATATYPEDEFINITIONSTRINGStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionstring *models.DATATYPEDEFINITIONSTRING) (Error error) {

	// fetch matching datatypedefinitionstringDB
	if datatypedefinitionstringDB, ok := backRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGDB[idx]; ok {
		_ = datatypedefinitionstringDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONSTRINGid_atBckpTime_newID map[uint]uint
