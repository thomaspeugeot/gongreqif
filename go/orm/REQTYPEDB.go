// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQTYPE_sql sql.NullBool
var dummy_REQTYPE_time time.Duration
var dummy_REQTYPE_sort sort.Float64Slice

// REQTYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reqtypeAPI
type REQTYPEAPI struct {
	gorm.Model

	models.REQTYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQTYPEPointersEncoding REQTYPEPointersEncoding
}

// REQTYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQTYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// REQTYPEDB describes a reqtype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reqtypeDB
type REQTYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field reqtypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field reqtypeDB.DATATYPEDEFINITIONBOOLEANREF
	DATATYPEDEFINITIONBOOLEANREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQTYPEPointersEncoding
}

// REQTYPEDBs arrays reqtypeDBs
// swagger:response reqtypeDBsResponse
type REQTYPEDBs []REQTYPEDB

// REQTYPEDBResponse provides response
// swagger:response reqtypeDBResponse
type REQTYPEDBResponse struct {
	REQTYPEDB
}

// REQTYPEWOP is a REQTYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQTYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DATATYPEDEFINITIONBOOLEANREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var REQTYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DATATYPEDEFINITIONBOOLEANREF",
}

type BackRepoREQTYPEStruct struct {
	// stores REQTYPEDB according to their gorm ID
	Map_REQTYPEDBID_REQTYPEDB map[uint]*REQTYPEDB

	// stores REQTYPEDB ID according to REQTYPE address
	Map_REQTYPEPtr_REQTYPEDBID map[*models.REQTYPE]uint

	// stores REQTYPE according to their gorm ID
	Map_REQTYPEDBID_REQTYPEPtr map[uint]*models.REQTYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQTYPE *BackRepoREQTYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQTYPE.stage
	return
}

func (backRepoREQTYPE *BackRepoREQTYPEStruct) GetDB() *gorm.DB {
	return backRepoREQTYPE.db
}

// GetREQTYPEDBFromREQTYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQTYPE *BackRepoREQTYPEStruct) GetREQTYPEDBFromREQTYPEPtr(reqtype *models.REQTYPE) (reqtypeDB *REQTYPEDB) {
	id := backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]
	reqtypeDB = backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[id]
	return
}

// BackRepoREQTYPE.CommitPhaseOne commits all staged instances of REQTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reqtype := range stage.REQTYPEs {
		backRepoREQTYPE.CommitPhaseOneInstance(reqtype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reqtype := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr {
		if _, ok := stage.REQTYPEs[reqtype]; !ok {
			backRepoREQTYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQTYPE.CommitDeleteInstance commits deletion of REQTYPE to the BackRepo
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	reqtype := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[id]

	// reqtype is not staged anymore, remove reqtypeDB
	reqtypeDB := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[id]
	query := backRepoREQTYPE.db.Unscoped().Delete(&reqtypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID, reqtype)
	delete(backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr, id)
	delete(backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB, id)

	return
}

// BackRepoREQTYPE.CommitPhaseOneInstance commits reqtype staged instances of REQTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CommitPhaseOneInstance(reqtype *models.REQTYPE) (Error error) {

	// check if the reqtype is not commited yet
	if _, ok := backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]; ok {
		return
	}

	// initiate reqtype
	var reqtypeDB REQTYPEDB
	reqtypeDB.CopyBasicFieldsFromREQTYPE(reqtype)

	query := backRepoREQTYPE.db.Create(&reqtypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype] = reqtypeDB.ID
	backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[reqtypeDB.ID] = reqtype
	backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[reqtypeDB.ID] = &reqtypeDB

	return
}

// BackRepoREQTYPE.CommitPhaseTwo commits all staged instances of REQTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reqtype := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr {
		backRepoREQTYPE.CommitPhaseTwoInstance(backRepo, idx, reqtype)
	}

	return
}

// BackRepoREQTYPE.CommitPhaseTwoInstance commits {{structname }} of models.REQTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reqtype *models.REQTYPE) (Error error) {

	// fetch matching reqtypeDB
	if reqtypeDB, ok := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[idx]; ok {

		reqtypeDB.CopyBasicFieldsFromREQTYPE(reqtype)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoREQTYPE.db.Save(&reqtypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQTYPE intance %s", reqtype.Name))
		return err
	}

	return
}

// BackRepoREQTYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CheckoutPhaseOne() (Error error) {

	reqtypeDBArray := make([]REQTYPEDB, 0)
	query := backRepoREQTYPE.db.Find(&reqtypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reqtypeInstancesToBeRemovedFromTheStage := make(map[*models.REQTYPE]any)
	for key, value := range backRepoREQTYPE.stage.REQTYPEs {
		reqtypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reqtypeDB := range reqtypeDBArray {
		backRepoREQTYPE.CheckoutPhaseOneInstance(&reqtypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reqtype, ok := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[reqtypeDB.ID]
		if ok {
			delete(reqtypeInstancesToBeRemovedFromTheStage, reqtype)
		}
	}

	// remove from stage and back repo's 3 maps all reqtypes that are not in the checkout
	for reqtype := range reqtypeInstancesToBeRemovedFromTheStage {
		reqtype.Unstage(backRepoREQTYPE.GetStage())

		// remove instance from the back repo 3 maps
		reqtypeID := backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]
		delete(backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID, reqtype)
		delete(backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB, reqtypeID)
		delete(backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr, reqtypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reqtypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the reqtypeDB
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CheckoutPhaseOneInstance(reqtypeDB *REQTYPEDB) (Error error) {

	reqtype, ok := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[reqtypeDB.ID]
	if !ok {
		reqtype = new(models.REQTYPE)

		backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[reqtypeDB.ID] = reqtype
		backRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype] = reqtypeDB.ID

		// append model store with the new element
		reqtype.Name = reqtypeDB.Name_Data.String
		reqtype.Stage(backRepoREQTYPE.GetStage())
	}
	reqtypeDB.CopyBasicFieldsToREQTYPE(reqtype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	reqtype.Stage(backRepoREQTYPE.GetStage())

	// preserve pointer to reqtypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQTYPEDBID_REQTYPEDB)[reqtypeDB hold variable pointers
	reqtypeDB_Data := *reqtypeDB
	preservedPtrToREQTYPE := &reqtypeDB_Data
	backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[reqtypeDB.ID] = preservedPtrToREQTYPE

	return
}

// BackRepoREQTYPE.CheckoutPhaseTwo Checkouts all staged instances of REQTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reqtypeDB := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB {
		backRepoREQTYPE.CheckoutPhaseTwoInstance(backRepo, reqtypeDB)
	}
	return
}

// BackRepoREQTYPE.CheckoutPhaseTwoInstance Checkouts staged instances of REQTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQTYPE *BackRepoREQTYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reqtypeDB *REQTYPEDB) (Error error) {

	reqtype := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[reqtypeDB.ID]

	reqtypeDB.DecodePointers(backRepo, reqtype)

	return
}

func (reqtypeDB *REQTYPEDB) DecodePointers(backRepo *BackRepoStruct, reqtype *models.REQTYPE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitREQTYPE allows commit of a single reqtype (if already staged)
func (backRepo *BackRepoStruct) CommitREQTYPE(reqtype *models.REQTYPE) {
	backRepo.BackRepoREQTYPE.CommitPhaseOneInstance(reqtype)
	if id, ok := backRepo.BackRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]; ok {
		backRepo.BackRepoREQTYPE.CommitPhaseTwoInstance(backRepo, id, reqtype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQTYPE allows checkout of a single reqtype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQTYPE(reqtype *models.REQTYPE) {
	// check if the reqtype is staged
	if _, ok := backRepo.BackRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]; ok {

		if id, ok := backRepo.BackRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[reqtype]; ok {
			var reqtypeDB REQTYPEDB
			reqtypeDB.ID = id

			if err := backRepo.BackRepoREQTYPE.db.First(&reqtypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQTYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQTYPE.CheckoutPhaseOneInstance(&reqtypeDB)
			backRepo.BackRepoREQTYPE.CheckoutPhaseTwoInstance(backRepo, &reqtypeDB)
		}
	}
}

// CopyBasicFieldsFromREQTYPE
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsFromREQTYPE(reqtype *models.REQTYPE) {
	// insertion point for fields commit

	reqtypeDB.Name_Data.String = reqtype.Name
	reqtypeDB.Name_Data.Valid = true

	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqtype.DATATYPEDEFINITIONBOOLEANREF
	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromREQTYPE_WOP
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsFromREQTYPE_WOP(reqtype *models.REQTYPE_WOP) {
	// insertion point for fields commit

	reqtypeDB.Name_Data.String = reqtype.Name
	reqtypeDB.Name_Data.Valid = true

	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqtype.DATATYPEDEFINITIONBOOLEANREF
	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromREQTYPEWOP
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsFromREQTYPEWOP(reqtype *REQTYPEWOP) {
	// insertion point for fields commit

	reqtypeDB.Name_Data.String = reqtype.Name
	reqtypeDB.Name_Data.Valid = true

	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqtype.DATATYPEDEFINITIONBOOLEANREF
	reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsToREQTYPE
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsToREQTYPE(reqtype *models.REQTYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqtype.Name = reqtypeDB.Name_Data.String
	reqtype.DATATYPEDEFINITIONBOOLEANREF = reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToREQTYPE_WOP
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsToREQTYPE_WOP(reqtype *models.REQTYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqtype.Name = reqtypeDB.Name_Data.String
	reqtype.DATATYPEDEFINITIONBOOLEANREF = reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToREQTYPEWOP
func (reqtypeDB *REQTYPEDB) CopyBasicFieldsToREQTYPEWOP(reqtype *REQTYPEWOP) {
	reqtype.ID = int(reqtypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reqtype.Name = reqtypeDB.Name_Data.String
	reqtype.DATATYPEDEFINITIONBOOLEANREF = reqtypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// Backup generates a json file from a slice of all REQTYPEDB instances in the backrepo
func (backRepoREQTYPE *BackRepoREQTYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQTYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQTYPEDB, 0)
	for _, reqtypeDB := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB {
		forBackup = append(forBackup, reqtypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQTYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQTYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQTYPEDB instances in the backrepo
func (backRepoREQTYPE *BackRepoREQTYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQTYPEDB, 0)
	for _, reqtypeDB := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB {
		forBackup = append(forBackup, reqtypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQTYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQTYPE_Fields, -1)
	for _, reqtypeDB := range forBackup {

		var reqtypeWOP REQTYPEWOP
		reqtypeDB.CopyBasicFieldsToREQTYPEWOP(&reqtypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&reqtypeWOP, -1)
	}
}

// RestoreXL from the "REQTYPE" sheet all REQTYPEDB instances
func (backRepoREQTYPE *BackRepoREQTYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQTYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQTYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQTYPE.rowVisitorREQTYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQTYPE *BackRepoREQTYPEStruct) rowVisitorREQTYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var reqtypeWOP REQTYPEWOP
		row.ReadStruct(&reqtypeWOP)

		// add the unmarshalled struct to the stage
		reqtypeDB := new(REQTYPEDB)
		reqtypeDB.CopyBasicFieldsFromREQTYPEWOP(&reqtypeWOP)

		reqtypeDB_ID_atBackupTime := reqtypeDB.ID
		reqtypeDB.ID = 0
		query := backRepoREQTYPE.db.Create(reqtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[reqtypeDB.ID] = reqtypeDB
		BackRepoREQTYPEid_atBckpTime_newID[reqtypeDB_ID_atBackupTime] = reqtypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQTYPEDB.json" in dirPath that stores an array
// of REQTYPEDB and stores it in the database
// the map BackRepoREQTYPEid_atBckpTime_newID is updated accordingly
func (backRepoREQTYPE *BackRepoREQTYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQTYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQTYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQTYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQTYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQTYPEDBID_REQTYPEDB
	for _, reqtypeDB := range forRestore {

		reqtypeDB_ID_atBackupTime := reqtypeDB.ID
		reqtypeDB.ID = 0
		query := backRepoREQTYPE.db.Create(reqtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[reqtypeDB.ID] = reqtypeDB
		BackRepoREQTYPEid_atBckpTime_newID[reqtypeDB_ID_atBackupTime] = reqtypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQTYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQTYPE>id_atBckpTime_newID
// to compute new index
func (backRepoREQTYPE *BackRepoREQTYPEStruct) RestorePhaseTwo() {

	for _, reqtypeDB := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = reqtypeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoREQTYPE.db.Model(reqtypeDB).Updates(*reqtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQTYPE.ResetReversePointers commits all staged instances of REQTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQTYPE *BackRepoREQTYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, reqtype := range backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr {
		backRepoREQTYPE.ResetReversePointersInstance(backRepo, idx, reqtype)
	}

	return
}

func (backRepoREQTYPE *BackRepoREQTYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, reqtype *models.REQTYPE) (Error error) {

	// fetch matching reqtypeDB
	if reqtypeDB, ok := backRepoREQTYPE.Map_REQTYPEDBID_REQTYPEDB[idx]; ok {
		_ = reqtypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQTYPEid_atBckpTime_newID map[uint]uint
