// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQIFTOOLEXTENSION_sql sql.NullBool
var dummy_REQIFTOOLEXTENSION_time time.Duration
var dummy_REQIFTOOLEXTENSION_sort sort.Float64Slice

// REQIFTOOLEXTENSIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reqiftoolextensionAPI
type REQIFTOOLEXTENSIONAPI struct {
	gorm.Model

	models.REQIFTOOLEXTENSION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQIFTOOLEXTENSIONPointersEncoding REQIFTOOLEXTENSIONPointersEncoding
}

// REQIFTOOLEXTENSIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQIFTOOLEXTENSIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// REQIFTOOLEXTENSIONDB describes a reqiftoolextension in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reqiftoolextensionDB
type REQIFTOOLEXTENSIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field reqiftoolextensionDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQIFTOOLEXTENSIONPointersEncoding
}

// REQIFTOOLEXTENSIONDBs arrays reqiftoolextensionDBs
// swagger:response reqiftoolextensionDBsResponse
type REQIFTOOLEXTENSIONDBs []REQIFTOOLEXTENSIONDB

// REQIFTOOLEXTENSIONDBResponse provides response
// swagger:response reqiftoolextensionDBResponse
type REQIFTOOLEXTENSIONDBResponse struct {
	REQIFTOOLEXTENSIONDB
}

// REQIFTOOLEXTENSIONWOP is a REQIFTOOLEXTENSION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQIFTOOLEXTENSIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var REQIFTOOLEXTENSION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoREQIFTOOLEXTENSIONStruct struct {
	// stores REQIFTOOLEXTENSIONDB according to their gorm ID
	Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB map[uint]*REQIFTOOLEXTENSIONDB

	// stores REQIFTOOLEXTENSIONDB ID according to REQIFTOOLEXTENSION address
	Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID map[*models.REQIFTOOLEXTENSION]uint

	// stores REQIFTOOLEXTENSION according to their gorm ID
	Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr map[uint]*models.REQIFTOOLEXTENSION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQIFTOOLEXTENSION.stage
	return
}

func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) GetDB() *gorm.DB {
	return backRepoREQIFTOOLEXTENSION.db
}

// GetREQIFTOOLEXTENSIONDBFromREQIFTOOLEXTENSIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) GetREQIFTOOLEXTENSIONDBFromREQIFTOOLEXTENSIONPtr(reqiftoolextension *models.REQIFTOOLEXTENSION) (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) {
	id := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]
	reqiftoolextensionDB = backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[id]
	return
}

// BackRepoREQIFTOOLEXTENSION.CommitPhaseOne commits all staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reqiftoolextension := range stage.REQIFTOOLEXTENSIONs {
		backRepoREQIFTOOLEXTENSION.CommitPhaseOneInstance(reqiftoolextension)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reqiftoolextension := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr {
		if _, ok := stage.REQIFTOOLEXTENSIONs[reqiftoolextension]; !ok {
			backRepoREQIFTOOLEXTENSION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQIFTOOLEXTENSION.CommitDeleteInstance commits deletion of REQIFTOOLEXTENSION to the BackRepo
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CommitDeleteInstance(id uint) (Error error) {

	reqiftoolextension := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[id]

	// reqiftoolextension is not staged anymore, remove reqiftoolextensionDB
	reqiftoolextensionDB := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[id]
	query := backRepoREQIFTOOLEXTENSION.db.Unscoped().Delete(&reqiftoolextensionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID, reqiftoolextension)
	delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr, id)
	delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB, id)

	return
}

// BackRepoREQIFTOOLEXTENSION.CommitPhaseOneInstance commits reqiftoolextension staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CommitPhaseOneInstance(reqiftoolextension *models.REQIFTOOLEXTENSION) (Error error) {

	// check if the reqiftoolextension is not commited yet
	if _, ok := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]; ok {
		return
	}

	// initiate reqiftoolextension
	var reqiftoolextensionDB REQIFTOOLEXTENSIONDB
	reqiftoolextensionDB.CopyBasicFieldsFromREQIFTOOLEXTENSION(reqiftoolextension)

	query := backRepoREQIFTOOLEXTENSION.db.Create(&reqiftoolextensionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension] = reqiftoolextensionDB.ID
	backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[reqiftoolextensionDB.ID] = reqiftoolextension
	backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[reqiftoolextensionDB.ID] = &reqiftoolextensionDB

	return
}

// BackRepoREQIFTOOLEXTENSION.CommitPhaseTwo commits all staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reqiftoolextension := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr {
		backRepoREQIFTOOLEXTENSION.CommitPhaseTwoInstance(backRepo, idx, reqiftoolextension)
	}

	return
}

// BackRepoREQIFTOOLEXTENSION.CommitPhaseTwoInstance commits {{structname }} of models.REQIFTOOLEXTENSION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reqiftoolextension *models.REQIFTOOLEXTENSION) (Error error) {

	// fetch matching reqiftoolextensionDB
	if reqiftoolextensionDB, ok := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[idx]; ok {

		reqiftoolextensionDB.CopyBasicFieldsFromREQIFTOOLEXTENSION(reqiftoolextension)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoREQIFTOOLEXTENSION.db.Save(&reqiftoolextensionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQIFTOOLEXTENSION intance %s", reqiftoolextension.Name))
		return err
	}

	return
}

// BackRepoREQIFTOOLEXTENSION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CheckoutPhaseOne() (Error error) {

	reqiftoolextensionDBArray := make([]REQIFTOOLEXTENSIONDB, 0)
	query := backRepoREQIFTOOLEXTENSION.db.Find(&reqiftoolextensionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reqiftoolextensionInstancesToBeRemovedFromTheStage := make(map[*models.REQIFTOOLEXTENSION]any)
	for key, value := range backRepoREQIFTOOLEXTENSION.stage.REQIFTOOLEXTENSIONs {
		reqiftoolextensionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reqiftoolextensionDB := range reqiftoolextensionDBArray {
		backRepoREQIFTOOLEXTENSION.CheckoutPhaseOneInstance(&reqiftoolextensionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reqiftoolextension, ok := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[reqiftoolextensionDB.ID]
		if ok {
			delete(reqiftoolextensionInstancesToBeRemovedFromTheStage, reqiftoolextension)
		}
	}

	// remove from stage and back repo's 3 maps all reqiftoolextensions that are not in the checkout
	for reqiftoolextension := range reqiftoolextensionInstancesToBeRemovedFromTheStage {
		reqiftoolextension.Unstage(backRepoREQIFTOOLEXTENSION.GetStage())

		// remove instance from the back repo 3 maps
		reqiftoolextensionID := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]
		delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID, reqiftoolextension)
		delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB, reqiftoolextensionID)
		delete(backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr, reqiftoolextensionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reqiftoolextensionDB that has been found in the DB, updates the backRepo and stages the
// models version of the reqiftoolextensionDB
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CheckoutPhaseOneInstance(reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) (Error error) {

	reqiftoolextension, ok := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[reqiftoolextensionDB.ID]
	if !ok {
		reqiftoolextension = new(models.REQIFTOOLEXTENSION)

		backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[reqiftoolextensionDB.ID] = reqiftoolextension
		backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension] = reqiftoolextensionDB.ID

		// append model store with the new element
		reqiftoolextension.Name = reqiftoolextensionDB.Name_Data.String
		reqiftoolextension.Stage(backRepoREQIFTOOLEXTENSION.GetStage())
	}
	reqiftoolextensionDB.CopyBasicFieldsToREQIFTOOLEXTENSION(reqiftoolextension)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	reqiftoolextension.Stage(backRepoREQIFTOOLEXTENSION.GetStage())

	// preserve pointer to reqiftoolextensionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB)[reqiftoolextensionDB hold variable pointers
	reqiftoolextensionDB_Data := *reqiftoolextensionDB
	preservedPtrToREQIFTOOLEXTENSION := &reqiftoolextensionDB_Data
	backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[reqiftoolextensionDB.ID] = preservedPtrToREQIFTOOLEXTENSION

	return
}

// BackRepoREQIFTOOLEXTENSION.CheckoutPhaseTwo Checkouts all staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reqiftoolextensionDB := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB {
		backRepoREQIFTOOLEXTENSION.CheckoutPhaseTwoInstance(backRepo, reqiftoolextensionDB)
	}
	return
}

// BackRepoREQIFTOOLEXTENSION.CheckoutPhaseTwoInstance Checkouts staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) (Error error) {

	reqiftoolextension := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[reqiftoolextensionDB.ID]

	reqiftoolextensionDB.DecodePointers(backRepo, reqiftoolextension)

	return
}

func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) DecodePointers(backRepo *BackRepoStruct, reqiftoolextension *models.REQIFTOOLEXTENSION) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitREQIFTOOLEXTENSION allows commit of a single reqiftoolextension (if already staged)
func (backRepo *BackRepoStruct) CommitREQIFTOOLEXTENSION(reqiftoolextension *models.REQIFTOOLEXTENSION) {
	backRepo.BackRepoREQIFTOOLEXTENSION.CommitPhaseOneInstance(reqiftoolextension)
	if id, ok := backRepo.BackRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]; ok {
		backRepo.BackRepoREQIFTOOLEXTENSION.CommitPhaseTwoInstance(backRepo, id, reqiftoolextension)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQIFTOOLEXTENSION allows checkout of a single reqiftoolextension (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQIFTOOLEXTENSION(reqiftoolextension *models.REQIFTOOLEXTENSION) {
	// check if the reqiftoolextension is staged
	if _, ok := backRepo.BackRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]; ok {

		if id, ok := backRepo.BackRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONPtr_REQIFTOOLEXTENSIONDBID[reqiftoolextension]; ok {
			var reqiftoolextensionDB REQIFTOOLEXTENSIONDB
			reqiftoolextensionDB.ID = id

			if err := backRepo.BackRepoREQIFTOOLEXTENSION.db.First(&reqiftoolextensionDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQIFTOOLEXTENSION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQIFTOOLEXTENSION.CheckoutPhaseOneInstance(&reqiftoolextensionDB)
			backRepo.BackRepoREQIFTOOLEXTENSION.CheckoutPhaseTwoInstance(backRepo, &reqiftoolextensionDB)
		}
	}
}

// CopyBasicFieldsFromREQIFTOOLEXTENSION
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsFromREQIFTOOLEXTENSION(reqiftoolextension *models.REQIFTOOLEXTENSION) {
	// insertion point for fields commit

	reqiftoolextensionDB.Name_Data.String = reqiftoolextension.Name
	reqiftoolextensionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromREQIFTOOLEXTENSION_WOP
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsFromREQIFTOOLEXTENSION_WOP(reqiftoolextension *models.REQIFTOOLEXTENSION_WOP) {
	// insertion point for fields commit

	reqiftoolextensionDB.Name_Data.String = reqiftoolextension.Name
	reqiftoolextensionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromREQIFTOOLEXTENSIONWOP
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsFromREQIFTOOLEXTENSIONWOP(reqiftoolextension *REQIFTOOLEXTENSIONWOP) {
	// insertion point for fields commit

	reqiftoolextensionDB.Name_Data.String = reqiftoolextension.Name
	reqiftoolextensionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToREQIFTOOLEXTENSION
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsToREQIFTOOLEXTENSION(reqiftoolextension *models.REQIFTOOLEXTENSION) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftoolextension.Name = reqiftoolextensionDB.Name_Data.String
}

// CopyBasicFieldsToREQIFTOOLEXTENSION_WOP
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsToREQIFTOOLEXTENSION_WOP(reqiftoolextension *models.REQIFTOOLEXTENSION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftoolextension.Name = reqiftoolextensionDB.Name_Data.String
}

// CopyBasicFieldsToREQIFTOOLEXTENSIONWOP
func (reqiftoolextensionDB *REQIFTOOLEXTENSIONDB) CopyBasicFieldsToREQIFTOOLEXTENSIONWOP(reqiftoolextension *REQIFTOOLEXTENSIONWOP) {
	reqiftoolextension.ID = int(reqiftoolextensionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftoolextension.Name = reqiftoolextensionDB.Name_Data.String
}

// Backup generates a json file from a slice of all REQIFTOOLEXTENSIONDB instances in the backrepo
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQIFTOOLEXTENSIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFTOOLEXTENSIONDB, 0)
	for _, reqiftoolextensionDB := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB {
		forBackup = append(forBackup, reqiftoolextensionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQIFTOOLEXTENSION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQIFTOOLEXTENSION file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQIFTOOLEXTENSIONDB instances in the backrepo
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFTOOLEXTENSIONDB, 0)
	for _, reqiftoolextensionDB := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB {
		forBackup = append(forBackup, reqiftoolextensionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQIFTOOLEXTENSION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQIFTOOLEXTENSION_Fields, -1)
	for _, reqiftoolextensionDB := range forBackup {

		var reqiftoolextensionWOP REQIFTOOLEXTENSIONWOP
		reqiftoolextensionDB.CopyBasicFieldsToREQIFTOOLEXTENSIONWOP(&reqiftoolextensionWOP)

		row := sh.AddRow()
		row.WriteStruct(&reqiftoolextensionWOP, -1)
	}
}

// RestoreXL from the "REQIFTOOLEXTENSION" sheet all REQIFTOOLEXTENSIONDB instances
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQIFTOOLEXTENSION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQIFTOOLEXTENSION.rowVisitorREQIFTOOLEXTENSION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) rowVisitorREQIFTOOLEXTENSION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var reqiftoolextensionWOP REQIFTOOLEXTENSIONWOP
		row.ReadStruct(&reqiftoolextensionWOP)

		// add the unmarshalled struct to the stage
		reqiftoolextensionDB := new(REQIFTOOLEXTENSIONDB)
		reqiftoolextensionDB.CopyBasicFieldsFromREQIFTOOLEXTENSIONWOP(&reqiftoolextensionWOP)

		reqiftoolextensionDB_ID_atBackupTime := reqiftoolextensionDB.ID
		reqiftoolextensionDB.ID = 0
		query := backRepoREQIFTOOLEXTENSION.db.Create(reqiftoolextensionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[reqiftoolextensionDB.ID] = reqiftoolextensionDB
		BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID[reqiftoolextensionDB_ID_atBackupTime] = reqiftoolextensionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQIFTOOLEXTENSIONDB.json" in dirPath that stores an array
// of REQIFTOOLEXTENSIONDB and stores it in the database
// the map BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID is updated accordingly
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQIFTOOLEXTENSIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQIFTOOLEXTENSION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQIFTOOLEXTENSIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB
	for _, reqiftoolextensionDB := range forRestore {

		reqiftoolextensionDB_ID_atBackupTime := reqiftoolextensionDB.ID
		reqiftoolextensionDB.ID = 0
		query := backRepoREQIFTOOLEXTENSION.db.Create(reqiftoolextensionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[reqiftoolextensionDB.ID] = reqiftoolextensionDB
		BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID[reqiftoolextensionDB_ID_atBackupTime] = reqiftoolextensionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQIFTOOLEXTENSION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQIFTOOLEXTENSION>id_atBckpTime_newID
// to compute new index
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) RestorePhaseTwo() {

	for _, reqiftoolextensionDB := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB {

		// next line of code is to avert unused variable compilation error
		_ = reqiftoolextensionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoREQIFTOOLEXTENSION.db.Model(reqiftoolextensionDB).Updates(*reqiftoolextensionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQIFTOOLEXTENSION.ResetReversePointers commits all staged instances of REQIFTOOLEXTENSION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, reqiftoolextension := range backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr {
		backRepoREQIFTOOLEXTENSION.ResetReversePointersInstance(backRepo, idx, reqiftoolextension)
	}

	return
}

func (backRepoREQIFTOOLEXTENSION *BackRepoREQIFTOOLEXTENSIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, reqiftoolextension *models.REQIFTOOLEXTENSION) (Error error) {

	// fetch matching reqiftoolextensionDB
	if reqiftoolextensionDB, ok := backRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONDB[idx]; ok {
		_ = reqiftoolextensionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQIFTOOLEXTENSIONid_atBckpTime_newID map[uint]uint
