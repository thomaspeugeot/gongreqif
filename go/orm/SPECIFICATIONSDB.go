// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECIFICATIONS_sql sql.NullBool
var dummy_SPECIFICATIONS_time time.Duration
var dummy_SPECIFICATIONS_sort sort.Float64Slice

// SPECIFICATIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specificationsAPI
type SPECIFICATIONSAPI struct {
	gorm.Model

	models.SPECIFICATIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECIFICATIONSPointersEncoding SPECIFICATIONSPointersEncoding
}

// SPECIFICATIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECIFICATIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field SPECIFICATION is a slice of pointers to another Struct (optional or 0..1)
	SPECIFICATION IntSlice `gorm:"type:TEXT"`
}

// SPECIFICATIONSDB describes a specifications in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specificationsDB
type SPECIFICATIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specificationsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECIFICATIONSPointersEncoding
}

// SPECIFICATIONSDBs arrays specificationsDBs
// swagger:response specificationsDBsResponse
type SPECIFICATIONSDBs []SPECIFICATIONSDB

// SPECIFICATIONSDBResponse provides response
// swagger:response specificationsDBResponse
type SPECIFICATIONSDBResponse struct {
	SPECIFICATIONSDB
}

// SPECIFICATIONSWOP is a SPECIFICATIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECIFICATIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECIFICATIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECIFICATIONSStruct struct {
	// stores SPECIFICATIONSDB according to their gorm ID
	Map_SPECIFICATIONSDBID_SPECIFICATIONSDB map[uint]*SPECIFICATIONSDB

	// stores SPECIFICATIONSDB ID according to SPECIFICATIONS address
	Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID map[*models.SPECIFICATIONS]uint

	// stores SPECIFICATIONS according to their gorm ID
	Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr map[uint]*models.SPECIFICATIONS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECIFICATIONS.stage
	return
}

func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) GetDB() *gorm.DB {
	return backRepoSPECIFICATIONS.db
}

// GetSPECIFICATIONSDBFromSPECIFICATIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) GetSPECIFICATIONSDBFromSPECIFICATIONSPtr(specifications *models.SPECIFICATIONS) (specificationsDB *SPECIFICATIONSDB) {
	id := backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]
	specificationsDB = backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[id]
	return
}

// BackRepoSPECIFICATIONS.CommitPhaseOne commits all staged instances of SPECIFICATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specifications := range stage.SPECIFICATIONSs {
		backRepoSPECIFICATIONS.CommitPhaseOneInstance(specifications)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specifications := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr {
		if _, ok := stage.SPECIFICATIONSs[specifications]; !ok {
			backRepoSPECIFICATIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECIFICATIONS.CommitDeleteInstance commits deletion of SPECIFICATIONS to the BackRepo
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	specifications := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[id]

	// specifications is not staged anymore, remove specificationsDB
	specificationsDB := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[id]
	query := backRepoSPECIFICATIONS.db.Unscoped().Delete(&specificationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID, specifications)
	delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr, id)
	delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB, id)

	return
}

// BackRepoSPECIFICATIONS.CommitPhaseOneInstance commits specifications staged instances of SPECIFICATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CommitPhaseOneInstance(specifications *models.SPECIFICATIONS) (Error error) {

	// check if the specifications is not commited yet
	if _, ok := backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]; ok {
		return
	}

	// initiate specifications
	var specificationsDB SPECIFICATIONSDB
	specificationsDB.CopyBasicFieldsFromSPECIFICATIONS(specifications)

	query := backRepoSPECIFICATIONS.db.Create(&specificationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications] = specificationsDB.ID
	backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[specificationsDB.ID] = specifications
	backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[specificationsDB.ID] = &specificationsDB

	return
}

// BackRepoSPECIFICATIONS.CommitPhaseTwo commits all staged instances of SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specifications := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr {
		backRepoSPECIFICATIONS.CommitPhaseTwoInstance(backRepo, idx, specifications)
	}

	return
}

// BackRepoSPECIFICATIONS.CommitPhaseTwoInstance commits {{structname }} of models.SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specifications *models.SPECIFICATIONS) (Error error) {

	// fetch matching specificationsDB
	if specificationsDB, ok := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[idx]; ok {

		specificationsDB.CopyBasicFieldsFromSPECIFICATIONS(specifications)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		specificationsDB.SPECIFICATIONSPointersEncoding.SPECIFICATION = make([]int, 0)
		// 2. encode
		for _, specificationAssocEnd := range specifications.SPECIFICATION {
			specificationAssocEnd_DB :=
				backRepo.BackRepoSPECIFICATION.GetSPECIFICATIONDBFromSPECIFICATIONPtr(specificationAssocEnd)
			
			// the stage might be inconsistant, meaning that the specificationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if specificationAssocEnd_DB == nil {
				continue
			}
			
			specificationsDB.SPECIFICATIONSPointersEncoding.SPECIFICATION =
				append(specificationsDB.SPECIFICATIONSPointersEncoding.SPECIFICATION, int(specificationAssocEnd_DB.ID))
		}

		query := backRepoSPECIFICATIONS.db.Save(&specificationsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECIFICATIONS intance %s", specifications.Name))
		return err
	}

	return
}

// BackRepoSPECIFICATIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CheckoutPhaseOne() (Error error) {

	specificationsDBArray := make([]SPECIFICATIONSDB, 0)
	query := backRepoSPECIFICATIONS.db.Find(&specificationsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specificationsInstancesToBeRemovedFromTheStage := make(map[*models.SPECIFICATIONS]any)
	for key, value := range backRepoSPECIFICATIONS.stage.SPECIFICATIONSs {
		specificationsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specificationsDB := range specificationsDBArray {
		backRepoSPECIFICATIONS.CheckoutPhaseOneInstance(&specificationsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specifications, ok := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[specificationsDB.ID]
		if ok {
			delete(specificationsInstancesToBeRemovedFromTheStage, specifications)
		}
	}

	// remove from stage and back repo's 3 maps all specificationss that are not in the checkout
	for specifications := range specificationsInstancesToBeRemovedFromTheStage {
		specifications.Unstage(backRepoSPECIFICATIONS.GetStage())

		// remove instance from the back repo 3 maps
		specificationsID := backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]
		delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID, specifications)
		delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB, specificationsID)
		delete(backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr, specificationsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specificationsDB that has been found in the DB, updates the backRepo and stages the
// models version of the specificationsDB
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CheckoutPhaseOneInstance(specificationsDB *SPECIFICATIONSDB) (Error error) {

	specifications, ok := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[specificationsDB.ID]
	if !ok {
		specifications = new(models.SPECIFICATIONS)

		backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[specificationsDB.ID] = specifications
		backRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications] = specificationsDB.ID

		// append model store with the new element
		specifications.Name = specificationsDB.Name_Data.String
		specifications.Stage(backRepoSPECIFICATIONS.GetStage())
	}
	specificationsDB.CopyBasicFieldsToSPECIFICATIONS(specifications)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specifications.Stage(backRepoSPECIFICATIONS.GetStage())

	// preserve pointer to specificationsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECIFICATIONSDBID_SPECIFICATIONSDB)[specificationsDB hold variable pointers
	specificationsDB_Data := *specificationsDB
	preservedPtrToSPECIFICATIONS := &specificationsDB_Data
	backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[specificationsDB.ID] = preservedPtrToSPECIFICATIONS

	return
}

// BackRepoSPECIFICATIONS.CheckoutPhaseTwo Checkouts all staged instances of SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specificationsDB := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB {
		backRepoSPECIFICATIONS.CheckoutPhaseTwoInstance(backRepo, specificationsDB)
	}
	return
}

// BackRepoSPECIFICATIONS.CheckoutPhaseTwoInstance Checkouts staged instances of SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specificationsDB *SPECIFICATIONSDB) (Error error) {

	specifications := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[specificationsDB.ID]

	specificationsDB.DecodePointers(backRepo, specifications)

	return
}

func (specificationsDB *SPECIFICATIONSDB) DecodePointers(backRepo *BackRepoStruct, specifications *models.SPECIFICATIONS) {

	// insertion point for checkout of pointer encoding
	// This loop redeem specifications.SPECIFICATION in the stage from the encode in the back repo
	// It parses all SPECIFICATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specifications.SPECIFICATION = specifications.SPECIFICATION[:0]
	for _, _SPECIFICATIONid := range specificationsDB.SPECIFICATIONSPointersEncoding.SPECIFICATION {
		specifications.SPECIFICATION = append(specifications.SPECIFICATION, backRepo.BackRepoSPECIFICATION.Map_SPECIFICATIONDBID_SPECIFICATIONPtr[uint(_SPECIFICATIONid)])
	}

	return
}

// CommitSPECIFICATIONS allows commit of a single specifications (if already staged)
func (backRepo *BackRepoStruct) CommitSPECIFICATIONS(specifications *models.SPECIFICATIONS) {
	backRepo.BackRepoSPECIFICATIONS.CommitPhaseOneInstance(specifications)
	if id, ok := backRepo.BackRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]; ok {
		backRepo.BackRepoSPECIFICATIONS.CommitPhaseTwoInstance(backRepo, id, specifications)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECIFICATIONS allows checkout of a single specifications (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECIFICATIONS(specifications *models.SPECIFICATIONS) {
	// check if the specifications is staged
	if _, ok := backRepo.BackRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]; ok {

		if id, ok := backRepo.BackRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[specifications]; ok {
			var specificationsDB SPECIFICATIONSDB
			specificationsDB.ID = id

			if err := backRepo.BackRepoSPECIFICATIONS.db.First(&specificationsDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECIFICATIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECIFICATIONS.CheckoutPhaseOneInstance(&specificationsDB)
			backRepo.BackRepoSPECIFICATIONS.CheckoutPhaseTwoInstance(backRepo, &specificationsDB)
		}
	}
}

// CopyBasicFieldsFromSPECIFICATIONS
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsFromSPECIFICATIONS(specifications *models.SPECIFICATIONS) {
	// insertion point for fields commit

	specificationsDB.Name_Data.String = specifications.Name
	specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATIONS_WOP
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsFromSPECIFICATIONS_WOP(specifications *models.SPECIFICATIONS_WOP) {
	// insertion point for fields commit

	specificationsDB.Name_Data.String = specifications.Name
	specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATIONSWOP
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsFromSPECIFICATIONSWOP(specifications *SPECIFICATIONSWOP) {
	// insertion point for fields commit

	specificationsDB.Name_Data.String = specifications.Name
	specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECIFICATIONS
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsToSPECIFICATIONS(specifications *models.SPECIFICATIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	specifications.Name = specificationsDB.Name_Data.String
}

// CopyBasicFieldsToSPECIFICATIONS_WOP
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsToSPECIFICATIONS_WOP(specifications *models.SPECIFICATIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specifications.Name = specificationsDB.Name_Data.String
}

// CopyBasicFieldsToSPECIFICATIONSWOP
func (specificationsDB *SPECIFICATIONSDB) CopyBasicFieldsToSPECIFICATIONSWOP(specifications *SPECIFICATIONSWOP) {
	specifications.ID = int(specificationsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specifications.Name = specificationsDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECIFICATIONSDB instances in the backrepo
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECIFICATIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATIONSDB, 0)
	for _, specificationsDB := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB {
		forBackup = append(forBackup, specificationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECIFICATIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECIFICATIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECIFICATIONSDB instances in the backrepo
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATIONSDB, 0)
	for _, specificationsDB := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB {
		forBackup = append(forBackup, specificationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECIFICATIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECIFICATIONS_Fields, -1)
	for _, specificationsDB := range forBackup {

		var specificationsWOP SPECIFICATIONSWOP
		specificationsDB.CopyBasicFieldsToSPECIFICATIONSWOP(&specificationsWOP)

		row := sh.AddRow()
		row.WriteStruct(&specificationsWOP, -1)
	}
}

// RestoreXL from the "SPECIFICATIONS" sheet all SPECIFICATIONSDB instances
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECIFICATIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECIFICATIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECIFICATIONS.rowVisitorSPECIFICATIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) rowVisitorSPECIFICATIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specificationsWOP SPECIFICATIONSWOP
		row.ReadStruct(&specificationsWOP)

		// add the unmarshalled struct to the stage
		specificationsDB := new(SPECIFICATIONSDB)
		specificationsDB.CopyBasicFieldsFromSPECIFICATIONSWOP(&specificationsWOP)

		specificationsDB_ID_atBackupTime := specificationsDB.ID
		specificationsDB.ID = 0
		query := backRepoSPECIFICATIONS.db.Create(specificationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[specificationsDB.ID] = specificationsDB
		BackRepoSPECIFICATIONSid_atBckpTime_newID[specificationsDB_ID_atBackupTime] = specificationsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECIFICATIONSDB.json" in dirPath that stores an array
// of SPECIFICATIONSDB and stores it in the database
// the map BackRepoSPECIFICATIONSid_atBckpTime_newID is updated accordingly
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECIFICATIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECIFICATIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECIFICATIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECIFICATIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECIFICATIONSDBID_SPECIFICATIONSDB
	for _, specificationsDB := range forRestore {

		specificationsDB_ID_atBackupTime := specificationsDB.ID
		specificationsDB.ID = 0
		query := backRepoSPECIFICATIONS.db.Create(specificationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[specificationsDB.ID] = specificationsDB
		BackRepoSPECIFICATIONSid_atBckpTime_newID[specificationsDB_ID_atBackupTime] = specificationsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECIFICATIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECIFICATIONS>id_atBckpTime_newID
// to compute new index
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) RestorePhaseTwo() {

	for _, specificationsDB := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = specificationsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECIFICATIONS.db.Model(specificationsDB).Updates(*specificationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECIFICATIONS.ResetReversePointers commits all staged instances of SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specifications := range backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr {
		backRepoSPECIFICATIONS.ResetReversePointersInstance(backRepo, idx, specifications)
	}

	return
}

func (backRepoSPECIFICATIONS *BackRepoSPECIFICATIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specifications *models.SPECIFICATIONS) (Error error) {

	// fetch matching specificationsDB
	if specificationsDB, ok := backRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSDB[idx]; ok {
		_ = specificationsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECIFICATIONSid_atBckpTime_newID map[uint]uint
