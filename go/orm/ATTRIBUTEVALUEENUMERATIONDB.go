// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEVALUEENUMERATION_sql sql.NullBool
var dummy_ATTRIBUTEVALUEENUMERATION_time time.Duration
var dummy_ATTRIBUTEVALUEENUMERATION_sort sort.Float64Slice

// ATTRIBUTEVALUEENUMERATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributevalueenumerationAPI
type ATTRIBUTEVALUEENUMERATIONAPI struct {
	gorm.Model

	models.ATTRIBUTEVALUEENUMERATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEVALUEENUMERATIONPointersEncoding ATTRIBUTEVALUEENUMERATIONPointersEncoding
}

// ATTRIBUTEVALUEENUMERATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEVALUEENUMERATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFINITION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFINITIONID sql.NullInt64

	// field VALUES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VALUESID sql.NullInt64
}

// ATTRIBUTEVALUEENUMERATIONDB describes a attributevalueenumeration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributevalueenumerationDB
type ATTRIBUTEVALUEENUMERATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributevalueenumerationDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEVALUEENUMERATIONPointersEncoding
}

// ATTRIBUTEVALUEENUMERATIONDBs arrays attributevalueenumerationDBs
// swagger:response attributevalueenumerationDBsResponse
type ATTRIBUTEVALUEENUMERATIONDBs []ATTRIBUTEVALUEENUMERATIONDB

// ATTRIBUTEVALUEENUMERATIONDBResponse provides response
// swagger:response attributevalueenumerationDBResponse
type ATTRIBUTEVALUEENUMERATIONDBResponse struct {
	ATTRIBUTEVALUEENUMERATIONDB
}

// ATTRIBUTEVALUEENUMERATIONWOP is a ATTRIBUTEVALUEENUMERATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEVALUEENUMERATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEVALUEENUMERATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoATTRIBUTEVALUEENUMERATIONStruct struct {
	// stores ATTRIBUTEVALUEENUMERATIONDB according to their gorm ID
	Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB map[uint]*ATTRIBUTEVALUEENUMERATIONDB

	// stores ATTRIBUTEVALUEENUMERATIONDB ID according to ATTRIBUTEVALUEENUMERATION address
	Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID map[*models.ATTRIBUTEVALUEENUMERATION]uint

	// stores ATTRIBUTEVALUEENUMERATION according to their gorm ID
	Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr map[uint]*models.ATTRIBUTEVALUEENUMERATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEVALUEENUMERATION.stage
	return
}

func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEVALUEENUMERATION.db
}

// GetATTRIBUTEVALUEENUMERATIONDBFromATTRIBUTEVALUEENUMERATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) GetATTRIBUTEVALUEENUMERATIONDBFromATTRIBUTEVALUEENUMERATIONPtr(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) {
	id := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]
	attributevalueenumerationDB = backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[id]
	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseOne commits all staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributevalueenumeration := range stage.ATTRIBUTEVALUEENUMERATIONs {
		backRepoATTRIBUTEVALUEENUMERATION.CommitPhaseOneInstance(attributevalueenumeration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributevalueenumeration := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr {
		if _, ok := stage.ATTRIBUTEVALUEENUMERATIONs[attributevalueenumeration]; !ok {
			backRepoATTRIBUTEVALUEENUMERATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CommitDeleteInstance commits deletion of ATTRIBUTEVALUEENUMERATION to the BackRepo
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	attributevalueenumeration := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[id]

	// attributevalueenumeration is not staged anymore, remove attributevalueenumerationDB
	attributevalueenumerationDB := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[id]
	query := backRepoATTRIBUTEVALUEENUMERATION.db.Unscoped().Delete(&attributevalueenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID, attributevalueenumeration)
	delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr, id)
	delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB, id)

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseOneInstance commits attributevalueenumeration staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CommitPhaseOneInstance(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) (Error error) {

	// check if the attributevalueenumeration is not commited yet
	if _, ok := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]; ok {
		return
	}

	// initiate attributevalueenumeration
	var attributevalueenumerationDB ATTRIBUTEVALUEENUMERATIONDB
	attributevalueenumerationDB.CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION(attributevalueenumeration)

	query := backRepoATTRIBUTEVALUEENUMERATION.db.Create(&attributevalueenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration] = attributevalueenumerationDB.ID
	backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[attributevalueenumerationDB.ID] = attributevalueenumeration
	backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[attributevalueenumerationDB.ID] = &attributevalueenumerationDB

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseTwo commits all staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueenumeration := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr {
		backRepoATTRIBUTEVALUEENUMERATION.CommitPhaseTwoInstance(backRepo, idx, attributevalueenumeration)
	}

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) (Error error) {

	// fetch matching attributevalueenumerationDB
	if attributevalueenumerationDB, ok := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[idx]; ok {

		attributevalueenumerationDB.CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION(attributevalueenumeration)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributevalueenumeration.DEFINITION translates to updating the attributevalueenumeration.DEFINITIONID
		attributevalueenumerationDB.DEFINITIONID.Valid = true // allow for a 0 value (nil association)
		if attributevalueenumeration.DEFINITION != nil {
			if DEFINITIONId, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[attributevalueenumeration.DEFINITION]; ok {
				attributevalueenumerationDB.DEFINITIONID.Int64 = int64(DEFINITIONId)
				attributevalueenumerationDB.DEFINITIONID.Valid = true
			}
		} else {
			attributevalueenumerationDB.DEFINITIONID.Int64 = 0
			attributevalueenumerationDB.DEFINITIONID.Valid = true
		}

		// commit pointer value attributevalueenumeration.VALUES translates to updating the attributevalueenumeration.VALUESID
		attributevalueenumerationDB.VALUESID.Valid = true // allow for a 0 value (nil association)
		if attributevalueenumeration.VALUES != nil {
			if VALUESId, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[attributevalueenumeration.VALUES]; ok {
				attributevalueenumerationDB.VALUESID.Int64 = int64(VALUESId)
				attributevalueenumerationDB.VALUESID.Valid = true
			}
		} else {
			attributevalueenumerationDB.VALUESID.Int64 = 0
			attributevalueenumerationDB.VALUESID.Valid = true
		}

		query := backRepoATTRIBUTEVALUEENUMERATION.db.Save(&attributevalueenumerationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEVALUEENUMERATION intance %s", attributevalueenumeration.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CheckoutPhaseOne() (Error error) {

	attributevalueenumerationDBArray := make([]ATTRIBUTEVALUEENUMERATIONDB, 0)
	query := backRepoATTRIBUTEVALUEENUMERATION.db.Find(&attributevalueenumerationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributevalueenumerationInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEVALUEENUMERATION]any)
	for key, value := range backRepoATTRIBUTEVALUEENUMERATION.stage.ATTRIBUTEVALUEENUMERATIONs {
		attributevalueenumerationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributevalueenumerationDB := range attributevalueenumerationDBArray {
		backRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseOneInstance(&attributevalueenumerationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributevalueenumeration, ok := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[attributevalueenumerationDB.ID]
		if ok {
			delete(attributevalueenumerationInstancesToBeRemovedFromTheStage, attributevalueenumeration)
		}
	}

	// remove from stage and back repo's 3 maps all attributevalueenumerations that are not in the checkout
	for attributevalueenumeration := range attributevalueenumerationInstancesToBeRemovedFromTheStage {
		attributevalueenumeration.Unstage(backRepoATTRIBUTEVALUEENUMERATION.GetStage())

		// remove instance from the back repo 3 maps
		attributevalueenumerationID := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]
		delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID, attributevalueenumeration)
		delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB, attributevalueenumerationID)
		delete(backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr, attributevalueenumerationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributevalueenumerationDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributevalueenumerationDB
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CheckoutPhaseOneInstance(attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) (Error error) {

	attributevalueenumeration, ok := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[attributevalueenumerationDB.ID]
	if !ok {
		attributevalueenumeration = new(models.ATTRIBUTEVALUEENUMERATION)

		backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[attributevalueenumerationDB.ID] = attributevalueenumeration
		backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration] = attributevalueenumerationDB.ID

		// append model store with the new element
		attributevalueenumeration.Name = attributevalueenumerationDB.Name_Data.String
		attributevalueenumeration.Stage(backRepoATTRIBUTEVALUEENUMERATION.GetStage())
	}
	attributevalueenumerationDB.CopyBasicFieldsToATTRIBUTEVALUEENUMERATION(attributevalueenumeration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributevalueenumeration.Stage(backRepoATTRIBUTEVALUEENUMERATION.GetStage())

	// preserve pointer to attributevalueenumerationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB)[attributevalueenumerationDB hold variable pointers
	attributevalueenumerationDB_Data := *attributevalueenumerationDB
	preservedPtrToATTRIBUTEVALUEENUMERATION := &attributevalueenumerationDB_Data
	backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[attributevalueenumerationDB.ID] = preservedPtrToATTRIBUTEVALUEENUMERATION

	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributevalueenumerationDB := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB {
		backRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseTwoInstance(backRepo, attributevalueenumerationDB)
	}
	return
}

// BackRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) (Error error) {

	attributevalueenumeration := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr[attributevalueenumerationDB.ID]

	attributevalueenumerationDB.DecodePointers(backRepo, attributevalueenumeration)

	return
}

func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) DecodePointers(backRepo *BackRepoStruct, attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) {

	// insertion point for checkout of pointer encoding
	// DEFINITION field
	attributevalueenumeration.DEFINITION = nil
	if attributevalueenumerationDB.DEFINITIONID.Int64 != 0 {
		attributevalueenumeration.DEFINITION = backRepo.BackRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[uint(attributevalueenumerationDB.DEFINITIONID.Int64)]
	}
	// VALUES field
	attributevalueenumeration.VALUES = nil
	if attributevalueenumerationDB.VALUESID.Int64 != 0 {
		attributevalueenumeration.VALUES = backRepo.BackRepoVALUES.Map_VALUESDBID_VALUESPtr[uint(attributevalueenumerationDB.VALUESID.Int64)]
	}
	return
}

// CommitATTRIBUTEVALUEENUMERATION allows commit of a single attributevalueenumeration (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEVALUEENUMERATION(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) {
	backRepo.BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseOneInstance(attributevalueenumeration)
	if id, ok := backRepo.BackRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]; ok {
		backRepo.BackRepoATTRIBUTEVALUEENUMERATION.CommitPhaseTwoInstance(backRepo, id, attributevalueenumeration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEVALUEENUMERATION allows checkout of a single attributevalueenumeration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEVALUEENUMERATION(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) {
	// check if the attributevalueenumeration is staged
	if _, ok := backRepo.BackRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONPtr_ATTRIBUTEVALUEENUMERATIONDBID[attributevalueenumeration]; ok {
			var attributevalueenumerationDB ATTRIBUTEVALUEENUMERATIONDB
			attributevalueenumerationDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEVALUEENUMERATION.db.First(&attributevalueenumerationDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEVALUEENUMERATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseOneInstance(&attributevalueenumerationDB)
			backRepo.BackRepoATTRIBUTEVALUEENUMERATION.CheckoutPhaseTwoInstance(backRepo, &attributevalueenumerationDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) {
	// insertion point for fields commit

	attributevalueenumerationDB.Name_Data.String = attributevalueenumeration.Name
	attributevalueenumerationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION_WOP
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEVALUEENUMERATION_WOP(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION_WOP) {
	// insertion point for fields commit

	attributevalueenumerationDB.Name_Data.String = attributevalueenumeration.Name
	attributevalueenumerationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEENUMERATIONWOP
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEVALUEENUMERATIONWOP(attributevalueenumeration *ATTRIBUTEVALUEENUMERATIONWOP) {
	// insertion point for fields commit

	attributevalueenumerationDB.Name_Data.String = attributevalueenumeration.Name
	attributevalueenumerationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEVALUEENUMERATION
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsToATTRIBUTEVALUEENUMERATION(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueenumeration.Name = attributevalueenumerationDB.Name_Data.String
}

// CopyBasicFieldsToATTRIBUTEVALUEENUMERATION_WOP
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsToATTRIBUTEVALUEENUMERATION_WOP(attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueenumeration.Name = attributevalueenumerationDB.Name_Data.String
}

// CopyBasicFieldsToATTRIBUTEVALUEENUMERATIONWOP
func (attributevalueenumerationDB *ATTRIBUTEVALUEENUMERATIONDB) CopyBasicFieldsToATTRIBUTEVALUEENUMERATIONWOP(attributevalueenumeration *ATTRIBUTEVALUEENUMERATIONWOP) {
	attributevalueenumeration.ID = int(attributevalueenumerationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueenumeration.Name = attributevalueenumerationDB.Name_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEENUMERATIONDB instances in the backrepo
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEENUMERATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEENUMERATIONDB, 0)
	for _, attributevalueenumerationDB := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB {
		forBackup = append(forBackup, attributevalueenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEVALUEENUMERATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEVALUEENUMERATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEENUMERATIONDB instances in the backrepo
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEENUMERATIONDB, 0)
	for _, attributevalueenumerationDB := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB {
		forBackup = append(forBackup, attributevalueenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEVALUEENUMERATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEVALUEENUMERATION_Fields, -1)
	for _, attributevalueenumerationDB := range forBackup {

		var attributevalueenumerationWOP ATTRIBUTEVALUEENUMERATIONWOP
		attributevalueenumerationDB.CopyBasicFieldsToATTRIBUTEVALUEENUMERATIONWOP(&attributevalueenumerationWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributevalueenumerationWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEVALUEENUMERATION" sheet all ATTRIBUTEVALUEENUMERATIONDB instances
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEVALUEENUMERATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEVALUEENUMERATION.rowVisitorATTRIBUTEVALUEENUMERATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) rowVisitorATTRIBUTEVALUEENUMERATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributevalueenumerationWOP ATTRIBUTEVALUEENUMERATIONWOP
		row.ReadStruct(&attributevalueenumerationWOP)

		// add the unmarshalled struct to the stage
		attributevalueenumerationDB := new(ATTRIBUTEVALUEENUMERATIONDB)
		attributevalueenumerationDB.CopyBasicFieldsFromATTRIBUTEVALUEENUMERATIONWOP(&attributevalueenumerationWOP)

		attributevalueenumerationDB_ID_atBackupTime := attributevalueenumerationDB.ID
		attributevalueenumerationDB.ID = 0
		query := backRepoATTRIBUTEVALUEENUMERATION.db.Create(attributevalueenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[attributevalueenumerationDB.ID] = attributevalueenumerationDB
		BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID[attributevalueenumerationDB_ID_atBackupTime] = attributevalueenumerationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEVALUEENUMERATIONDB.json" in dirPath that stores an array
// of ATTRIBUTEVALUEENUMERATIONDB and stores it in the database
// the map BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEENUMERATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEVALUEENUMERATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEVALUEENUMERATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB
	for _, attributevalueenumerationDB := range forRestore {

		attributevalueenumerationDB_ID_atBackupTime := attributevalueenumerationDB.ID
		attributevalueenumerationDB.ID = 0
		query := backRepoATTRIBUTEVALUEENUMERATION.db.Create(attributevalueenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[attributevalueenumerationDB.ID] = attributevalueenumerationDB
		BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID[attributevalueenumerationDB_ID_atBackupTime] = attributevalueenumerationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEVALUEENUMERATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEVALUEENUMERATION>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) RestorePhaseTwo() {

	for _, attributevalueenumerationDB := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = attributevalueenumerationDB

		// insertion point for reindexing pointers encoding
		// reindexing DEFINITION field
		if attributevalueenumerationDB.DEFINITIONID.Int64 != 0 {
			attributevalueenumerationDB.DEFINITIONID.Int64 = int64(BackRepoDEFINITIONid_atBckpTime_newID[uint(attributevalueenumerationDB.DEFINITIONID.Int64)])
			attributevalueenumerationDB.DEFINITIONID.Valid = true
		}

		// reindexing VALUES field
		if attributevalueenumerationDB.VALUESID.Int64 != 0 {
			attributevalueenumerationDB.VALUESID.Int64 = int64(BackRepoVALUESid_atBckpTime_newID[uint(attributevalueenumerationDB.VALUESID.Int64)])
			attributevalueenumerationDB.VALUESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEVALUEENUMERATION.db.Model(attributevalueenumerationDB).Updates(*attributevalueenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEVALUEENUMERATION.ResetReversePointers commits all staged instances of ATTRIBUTEVALUEENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueenumeration := range backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONPtr {
		backRepoATTRIBUTEVALUEENUMERATION.ResetReversePointersInstance(backRepo, idx, attributevalueenumeration)
	}

	return
}

func (backRepoATTRIBUTEVALUEENUMERATION *BackRepoATTRIBUTEVALUEENUMERATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributevalueenumeration *models.ATTRIBUTEVALUEENUMERATION) (Error error) {

	// fetch matching attributevalueenumerationDB
	if attributevalueenumerationDB, ok := backRepoATTRIBUTEVALUEENUMERATION.Map_ATTRIBUTEVALUEENUMERATIONDBID_ATTRIBUTEVALUEENUMERATIONDB[idx]; ok {
		_ = attributevalueenumerationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEVALUEENUMERATIONid_atBckpTime_newID map[uint]uint
