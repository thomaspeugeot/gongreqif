// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DEFINITION_sql sql.NullBool
var dummy_DEFINITION_time time.Duration
var dummy_DEFINITION_sort sort.Float64Slice

// DEFINITIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model definitionAPI
type DEFINITIONAPI struct {
	gorm.Model

	models.DEFINITION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DEFINITIONPointersEncoding DEFINITIONPointersEncoding
}

// DEFINITIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DEFINITIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DEFINITIONDB describes a definition in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model definitionDB
type DEFINITIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field definitionDB.Name
	Name_Data sql.NullString

	// Declation for basic field definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF
	ATTRIBUTEDEFINITIONBOOLEANREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DEFINITIONPointersEncoding
}

// DEFINITIONDBs arrays definitionDBs
// swagger:response definitionDBsResponse
type DEFINITIONDBs []DEFINITIONDB

// DEFINITIONDBResponse provides response
// swagger:response definitionDBResponse
type DEFINITIONDBResponse struct {
	DEFINITIONDB
}

// DEFINITIONWOP is a DEFINITION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DEFINITIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ATTRIBUTEDEFINITIONBOOLEANREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var DEFINITION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ATTRIBUTEDEFINITIONBOOLEANREF",
}

type BackRepoDEFINITIONStruct struct {
	// stores DEFINITIONDB according to their gorm ID
	Map_DEFINITIONDBID_DEFINITIONDB map[uint]*DEFINITIONDB

	// stores DEFINITIONDB ID according to DEFINITION address
	Map_DEFINITIONPtr_DEFINITIONDBID map[*models.DEFINITION]uint

	// stores DEFINITION according to their gorm ID
	Map_DEFINITIONDBID_DEFINITIONPtr map[uint]*models.DEFINITION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDEFINITION *BackRepoDEFINITIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDEFINITION.stage
	return
}

func (backRepoDEFINITION *BackRepoDEFINITIONStruct) GetDB() *gorm.DB {
	return backRepoDEFINITION.db
}

// GetDEFINITIONDBFromDEFINITIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) GetDEFINITIONDBFromDEFINITIONPtr(definition *models.DEFINITION) (definitionDB *DEFINITIONDB) {
	id := backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]
	definitionDB = backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[id]
	return
}

// BackRepoDEFINITION.CommitPhaseOne commits all staged instances of DEFINITION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for definition := range stage.DEFINITIONs {
		backRepoDEFINITION.CommitPhaseOneInstance(definition)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, definition := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr {
		if _, ok := stage.DEFINITIONs[definition]; !ok {
			backRepoDEFINITION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDEFINITION.CommitDeleteInstance commits deletion of DEFINITION to the BackRepo
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CommitDeleteInstance(id uint) (Error error) {

	definition := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[id]

	// definition is not staged anymore, remove definitionDB
	definitionDB := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[id]
	query := backRepoDEFINITION.db.Unscoped().Delete(&definitionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID, definition)
	delete(backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr, id)
	delete(backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB, id)

	return
}

// BackRepoDEFINITION.CommitPhaseOneInstance commits definition staged instances of DEFINITION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CommitPhaseOneInstance(definition *models.DEFINITION) (Error error) {

	// check if the definition is not commited yet
	if _, ok := backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]; ok {
		return
	}

	// initiate definition
	var definitionDB DEFINITIONDB
	definitionDB.CopyBasicFieldsFromDEFINITION(definition)

	query := backRepoDEFINITION.db.Create(&definitionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition] = definitionDB.ID
	backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[definitionDB.ID] = definition
	backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[definitionDB.ID] = &definitionDB

	return
}

// BackRepoDEFINITION.CommitPhaseTwo commits all staged instances of DEFINITION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, definition := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr {
		backRepoDEFINITION.CommitPhaseTwoInstance(backRepo, idx, definition)
	}

	return
}

// BackRepoDEFINITION.CommitPhaseTwoInstance commits {{structname }} of models.DEFINITION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, definition *models.DEFINITION) (Error error) {

	// fetch matching definitionDB
	if definitionDB, ok := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[idx]; ok {

		definitionDB.CopyBasicFieldsFromDEFINITION(definition)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDEFINITION.db.Save(&definitionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DEFINITION intance %s", definition.Name))
		return err
	}

	return
}

// BackRepoDEFINITION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CheckoutPhaseOne() (Error error) {

	definitionDBArray := make([]DEFINITIONDB, 0)
	query := backRepoDEFINITION.db.Find(&definitionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	definitionInstancesToBeRemovedFromTheStage := make(map[*models.DEFINITION]any)
	for key, value := range backRepoDEFINITION.stage.DEFINITIONs {
		definitionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, definitionDB := range definitionDBArray {
		backRepoDEFINITION.CheckoutPhaseOneInstance(&definitionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		definition, ok := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[definitionDB.ID]
		if ok {
			delete(definitionInstancesToBeRemovedFromTheStage, definition)
		}
	}

	// remove from stage and back repo's 3 maps all definitions that are not in the checkout
	for definition := range definitionInstancesToBeRemovedFromTheStage {
		definition.Unstage(backRepoDEFINITION.GetStage())

		// remove instance from the back repo 3 maps
		definitionID := backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]
		delete(backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID, definition)
		delete(backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB, definitionID)
		delete(backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr, definitionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a definitionDB that has been found in the DB, updates the backRepo and stages the
// models version of the definitionDB
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CheckoutPhaseOneInstance(definitionDB *DEFINITIONDB) (Error error) {

	definition, ok := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[definitionDB.ID]
	if !ok {
		definition = new(models.DEFINITION)

		backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[definitionDB.ID] = definition
		backRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition] = definitionDB.ID

		// append model store with the new element
		definition.Name = definitionDB.Name_Data.String
		definition.Stage(backRepoDEFINITION.GetStage())
	}
	definitionDB.CopyBasicFieldsToDEFINITION(definition)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	definition.Stage(backRepoDEFINITION.GetStage())

	// preserve pointer to definitionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DEFINITIONDBID_DEFINITIONDB)[definitionDB hold variable pointers
	definitionDB_Data := *definitionDB
	preservedPtrToDEFINITION := &definitionDB_Data
	backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[definitionDB.ID] = preservedPtrToDEFINITION

	return
}

// BackRepoDEFINITION.CheckoutPhaseTwo Checkouts all staged instances of DEFINITION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, definitionDB := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB {
		backRepoDEFINITION.CheckoutPhaseTwoInstance(backRepo, definitionDB)
	}
	return
}

// BackRepoDEFINITION.CheckoutPhaseTwoInstance Checkouts staged instances of DEFINITION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, definitionDB *DEFINITIONDB) (Error error) {

	definition := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[definitionDB.ID]

	definitionDB.DecodePointers(backRepo, definition)

	return
}

func (definitionDB *DEFINITIONDB) DecodePointers(backRepo *BackRepoStruct, definition *models.DEFINITION) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDEFINITION allows commit of a single definition (if already staged)
func (backRepo *BackRepoStruct) CommitDEFINITION(definition *models.DEFINITION) {
	backRepo.BackRepoDEFINITION.CommitPhaseOneInstance(definition)
	if id, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]; ok {
		backRepo.BackRepoDEFINITION.CommitPhaseTwoInstance(backRepo, id, definition)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDEFINITION allows checkout of a single definition (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDEFINITION(definition *models.DEFINITION) {
	// check if the definition is staged
	if _, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]; ok {

		if id, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[definition]; ok {
			var definitionDB DEFINITIONDB
			definitionDB.ID = id

			if err := backRepo.BackRepoDEFINITION.db.First(&definitionDB, id).Error; err != nil {
				log.Fatalln("CheckoutDEFINITION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDEFINITION.CheckoutPhaseOneInstance(&definitionDB)
			backRepo.BackRepoDEFINITION.CheckoutPhaseTwoInstance(backRepo, &definitionDB)
		}
	}
}

// CopyBasicFieldsFromDEFINITION
func (definitionDB *DEFINITIONDB) CopyBasicFieldsFromDEFINITION(definition *models.DEFINITION) {
	// insertion point for fields commit

	definitionDB.Name_Data.String = definition.Name
	definitionDB.Name_Data.Valid = true

	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String = definition.ATTRIBUTEDEFINITIONBOOLEANREF
	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromDEFINITION_WOP
func (definitionDB *DEFINITIONDB) CopyBasicFieldsFromDEFINITION_WOP(definition *models.DEFINITION_WOP) {
	// insertion point for fields commit

	definitionDB.Name_Data.String = definition.Name
	definitionDB.Name_Data.Valid = true

	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String = definition.ATTRIBUTEDEFINITIONBOOLEANREF
	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromDEFINITIONWOP
func (definitionDB *DEFINITIONDB) CopyBasicFieldsFromDEFINITIONWOP(definition *DEFINITIONWOP) {
	// insertion point for fields commit

	definitionDB.Name_Data.String = definition.Name
	definitionDB.Name_Data.Valid = true

	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String = definition.ATTRIBUTEDEFINITIONBOOLEANREF
	definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsToDEFINITION
func (definitionDB *DEFINITIONDB) CopyBasicFieldsToDEFINITION(definition *models.DEFINITION) {
	// insertion point for checkout of basic fields (back repo to stage)
	definition.Name = definitionDB.Name_Data.String
	definition.ATTRIBUTEDEFINITIONBOOLEANREF = definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToDEFINITION_WOP
func (definitionDB *DEFINITIONDB) CopyBasicFieldsToDEFINITION_WOP(definition *models.DEFINITION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	definition.Name = definitionDB.Name_Data.String
	definition.ATTRIBUTEDEFINITIONBOOLEANREF = definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToDEFINITIONWOP
func (definitionDB *DEFINITIONDB) CopyBasicFieldsToDEFINITIONWOP(definition *DEFINITIONWOP) {
	definition.ID = int(definitionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	definition.Name = definitionDB.Name_Data.String
	definition.ATTRIBUTEDEFINITIONBOOLEANREF = definitionDB.ATTRIBUTEDEFINITIONBOOLEANREF_Data.String
}

// Backup generates a json file from a slice of all DEFINITIONDB instances in the backrepo
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DEFINITIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DEFINITIONDB, 0)
	for _, definitionDB := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB {
		forBackup = append(forBackup, definitionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DEFINITION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DEFINITION file", err.Error())
	}
}

// Backup generates a json file from a slice of all DEFINITIONDB instances in the backrepo
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DEFINITIONDB, 0)
	for _, definitionDB := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB {
		forBackup = append(forBackup, definitionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DEFINITION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DEFINITION_Fields, -1)
	for _, definitionDB := range forBackup {

		var definitionWOP DEFINITIONWOP
		definitionDB.CopyBasicFieldsToDEFINITIONWOP(&definitionWOP)

		row := sh.AddRow()
		row.WriteStruct(&definitionWOP, -1)
	}
}

// RestoreXL from the "DEFINITION" sheet all DEFINITIONDB instances
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDEFINITIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DEFINITION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDEFINITION.rowVisitorDEFINITION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDEFINITION *BackRepoDEFINITIONStruct) rowVisitorDEFINITION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var definitionWOP DEFINITIONWOP
		row.ReadStruct(&definitionWOP)

		// add the unmarshalled struct to the stage
		definitionDB := new(DEFINITIONDB)
		definitionDB.CopyBasicFieldsFromDEFINITIONWOP(&definitionWOP)

		definitionDB_ID_atBackupTime := definitionDB.ID
		definitionDB.ID = 0
		query := backRepoDEFINITION.db.Create(definitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[definitionDB.ID] = definitionDB
		BackRepoDEFINITIONid_atBckpTime_newID[definitionDB_ID_atBackupTime] = definitionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DEFINITIONDB.json" in dirPath that stores an array
// of DEFINITIONDB and stores it in the database
// the map BackRepoDEFINITIONid_atBckpTime_newID is updated accordingly
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDEFINITIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DEFINITIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DEFINITION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DEFINITIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DEFINITIONDBID_DEFINITIONDB
	for _, definitionDB := range forRestore {

		definitionDB_ID_atBackupTime := definitionDB.ID
		definitionDB.ID = 0
		query := backRepoDEFINITION.db.Create(definitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[definitionDB.ID] = definitionDB
		BackRepoDEFINITIONid_atBckpTime_newID[definitionDB_ID_atBackupTime] = definitionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DEFINITION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DEFINITION>id_atBckpTime_newID
// to compute new index
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) RestorePhaseTwo() {

	for _, definitionDB := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB {

		// next line of code is to avert unused variable compilation error
		_ = definitionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDEFINITION.db.Model(definitionDB).Updates(*definitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDEFINITION.ResetReversePointers commits all staged instances of DEFINITION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFINITION *BackRepoDEFINITIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, definition := range backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr {
		backRepoDEFINITION.ResetReversePointersInstance(backRepo, idx, definition)
	}

	return
}

func (backRepoDEFINITION *BackRepoDEFINITIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, definition *models.DEFINITION) (Error error) {

	// fetch matching definitionDB
	if definitionDB, ok := backRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONDB[idx]; ok {
		_ = definitionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDEFINITIONid_atBckpTime_newID map[uint]uint
