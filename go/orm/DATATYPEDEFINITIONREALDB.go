// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONREAL_sql sql.NullBool
var dummy_DATATYPEDEFINITIONREAL_time time.Duration
var dummy_DATATYPEDEFINITIONREAL_sort sort.Float64Slice

// DATATYPEDEFINITIONREALAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionrealAPI
type DATATYPEDEFINITIONREALAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONREAL_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONREALPointersEncoding DATATYPEDEFINITIONREALPointersEncoding
}

// DATATYPEDEFINITIONREALPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONREALPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64
}

// DATATYPEDEFINITIONREALDB describes a datatypedefinitionreal in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionrealDB
type DATATYPEDEFINITIONREALDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionrealDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionrealDB.ACCURACYAttr
	ACCURACYAttr_Data sql.NullInt64

	// Declation for basic field datatypedefinitionrealDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionrealDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionrealDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionrealDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionrealDB.MAXAttr
	MAXAttr_Data sql.NullFloat64

	// Declation for basic field datatypedefinitionrealDB.MINAttr
	MINAttr_Data sql.NullFloat64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONREALPointersEncoding
}

// DATATYPEDEFINITIONREALDBs arrays datatypedefinitionrealDBs
// swagger:response datatypedefinitionrealDBsResponse
type DATATYPEDEFINITIONREALDBs []DATATYPEDEFINITIONREALDB

// DATATYPEDEFINITIONREALDBResponse provides response
// swagger:response datatypedefinitionrealDBResponse
type DATATYPEDEFINITIONREALDBResponse struct {
	DATATYPEDEFINITIONREALDB
}

// DATATYPEDEFINITIONREALWOP is a DATATYPEDEFINITIONREAL without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONREALWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ACCURACYAttr int `xlsx:"2"`

	DESCAttr string `xlsx:"3"`

	IDENTIFIERAttr string `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`

	MAXAttr float64 `xlsx:"7"`

	MINAttr float64 `xlsx:"8"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONREAL_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ACCURACYAttr",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
	"MAXAttr",
	"MINAttr",
}

type BackRepoDATATYPEDEFINITIONREALStruct struct {
	// stores DATATYPEDEFINITIONREALDB according to their gorm ID
	Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB map[uint]*DATATYPEDEFINITIONREALDB

	// stores DATATYPEDEFINITIONREALDB ID according to DATATYPEDEFINITIONREAL address
	Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID map[*models.DATATYPEDEFINITIONREAL]uint

	// stores DATATYPEDEFINITIONREAL according to their gorm ID
	Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr map[uint]*models.DATATYPEDEFINITIONREAL

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONREAL.stage
	return
}

func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONREAL.db
}

// GetDATATYPEDEFINITIONREALDBFromDATATYPEDEFINITIONREALPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) GetDATATYPEDEFINITIONREALDBFromDATATYPEDEFINITIONREALPtr(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) {
	id := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]
	datatypedefinitionrealDB = backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONREAL.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitionreal := range stage.DATATYPEDEFINITIONREALs {
		backRepoDATATYPEDEFINITIONREAL.CommitPhaseOneInstance(datatypedefinitionreal)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitionreal := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr {
		if _, ok := stage.DATATYPEDEFINITIONREALs[datatypedefinitionreal]; !ok {
			backRepoDATATYPEDEFINITIONREAL.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONREAL to the BackRepo
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitionreal := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[id]

	// datatypedefinitionreal is not staged anymore, remove datatypedefinitionrealDB
	datatypedefinitionrealDB := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[id]
	query := backRepoDATATYPEDEFINITIONREAL.db.Unscoped().Delete(&datatypedefinitionrealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID, datatypedefinitionreal)
	delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr, id)
	delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CommitPhaseOneInstance commits datatypedefinitionreal staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CommitPhaseOneInstance(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) (Error error) {

	// check if the datatypedefinitionreal is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]; ok {
		return
	}

	// initiate datatypedefinitionreal
	var datatypedefinitionrealDB DATATYPEDEFINITIONREALDB
	datatypedefinitionrealDB.CopyBasicFieldsFromDATATYPEDEFINITIONREAL(datatypedefinitionreal)

	query := backRepoDATATYPEDEFINITIONREAL.db.Create(&datatypedefinitionrealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal] = datatypedefinitionrealDB.ID
	backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[datatypedefinitionrealDB.ID] = datatypedefinitionreal
	backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[datatypedefinitionrealDB.ID] = &datatypedefinitionrealDB

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionreal := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr {
		backRepoDATATYPEDEFINITIONREAL.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitionreal)
	}

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) (Error error) {

	// fetch matching datatypedefinitionrealDB
	if datatypedefinitionrealDB, ok := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[idx]; ok {

		datatypedefinitionrealDB.CopyBasicFieldsFromDATATYPEDEFINITIONREAL(datatypedefinitionreal)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitionreal.ALTERNATIVEID translates to updating the datatypedefinitionreal.ALTERNATIVEIDID
		datatypedefinitionrealDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionreal.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitionreal.ALTERNATIVEID]; ok {
				datatypedefinitionrealDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionrealDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionrealDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionrealDB.ALTERNATIVEIDID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONREAL.db.Save(&datatypedefinitionrealDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONREAL intance %s", datatypedefinitionreal.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionrealDBArray := make([]DATATYPEDEFINITIONREALDB, 0)
	query := backRepoDATATYPEDEFINITIONREAL.db.Find(&datatypedefinitionrealDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionrealInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONREAL]any)
	for key, value := range backRepoDATATYPEDEFINITIONREAL.stage.DATATYPEDEFINITIONREALs {
		datatypedefinitionrealInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionrealDB := range datatypedefinitionrealDBArray {
		backRepoDATATYPEDEFINITIONREAL.CheckoutPhaseOneInstance(&datatypedefinitionrealDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitionreal, ok := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[datatypedefinitionrealDB.ID]
		if ok {
			delete(datatypedefinitionrealInstancesToBeRemovedFromTheStage, datatypedefinitionreal)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionreals that are not in the checkout
	for datatypedefinitionreal := range datatypedefinitionrealInstancesToBeRemovedFromTheStage {
		datatypedefinitionreal.Unstage(backRepoDATATYPEDEFINITIONREAL.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionrealID := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]
		delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID, datatypedefinitionreal)
		delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB, datatypedefinitionrealID)
		delete(backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr, datatypedefinitionrealID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionrealDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionrealDB
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CheckoutPhaseOneInstance(datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) (Error error) {

	datatypedefinitionreal, ok := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[datatypedefinitionrealDB.ID]
	if !ok {
		datatypedefinitionreal = new(models.DATATYPEDEFINITIONREAL)

		backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[datatypedefinitionrealDB.ID] = datatypedefinitionreal
		backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal] = datatypedefinitionrealDB.ID

		// append model store with the new element
		datatypedefinitionreal.Name = datatypedefinitionrealDB.Name_Data.String
		datatypedefinitionreal.Stage(backRepoDATATYPEDEFINITIONREAL.GetStage())
	}
	datatypedefinitionrealDB.CopyBasicFieldsToDATATYPEDEFINITIONREAL(datatypedefinitionreal)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitionreal.Stage(backRepoDATATYPEDEFINITIONREAL.GetStage())

	// preserve pointer to datatypedefinitionrealDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB)[datatypedefinitionrealDB hold variable pointers
	datatypedefinitionrealDB_Data := *datatypedefinitionrealDB
	preservedPtrToDATATYPEDEFINITIONREAL := &datatypedefinitionrealDB_Data
	backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[datatypedefinitionrealDB.ID] = preservedPtrToDATATYPEDEFINITIONREAL

	return
}

// BackRepoDATATYPEDEFINITIONREAL.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionrealDB := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB {
		backRepoDATATYPEDEFINITIONREAL.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionrealDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONREAL.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) (Error error) {

	datatypedefinitionreal := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[datatypedefinitionrealDB.ID]

	datatypedefinitionrealDB.DecodePointers(backRepo, datatypedefinitionreal)

	return
}

func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitionreal.ALTERNATIVEID = nil
	if datatypedefinitionrealDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitionreal.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionrealDB.ALTERNATIVEIDID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONREAL allows commit of a single datatypedefinitionreal (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONREAL(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) {
	backRepo.BackRepoDATATYPEDEFINITIONREAL.CommitPhaseOneInstance(datatypedefinitionreal)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONREAL.CommitPhaseTwoInstance(backRepo, id, datatypedefinitionreal)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONREAL allows checkout of a single datatypedefinitionreal (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONREAL(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) {
	// check if the datatypedefinitionreal is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALPtr_DATATYPEDEFINITIONREALDBID[datatypedefinitionreal]; ok {
			var datatypedefinitionrealDB DATATYPEDEFINITIONREALDB
			datatypedefinitionrealDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONREAL.db.First(&datatypedefinitionrealDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONREAL : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONREAL.CheckoutPhaseOneInstance(&datatypedefinitionrealDB)
			backRepo.BackRepoDATATYPEDEFINITIONREAL.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionrealDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONREAL
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsFromDATATYPEDEFINITIONREAL(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) {
	// insertion point for fields commit

	datatypedefinitionrealDB.Name_Data.String = datatypedefinitionreal.Name
	datatypedefinitionrealDB.Name_Data.Valid = true

	datatypedefinitionrealDB.ACCURACYAttr_Data.Int64 = int64(datatypedefinitionreal.ACCURACYAttr)
	datatypedefinitionrealDB.ACCURACYAttr_Data.Valid = true

	datatypedefinitionrealDB.DESCAttr_Data.String = datatypedefinitionreal.DESCAttr
	datatypedefinitionrealDB.DESCAttr_Data.Valid = true

	datatypedefinitionrealDB.IDENTIFIERAttr_Data.String = datatypedefinitionreal.IDENTIFIERAttr
	datatypedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionrealDB.LASTCHANGEAttr_Data.String = datatypedefinitionreal.LASTCHANGEAttr
	datatypedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionrealDB.LONGNAMEAttr_Data.String = datatypedefinitionreal.LONGNAMEAttr
	datatypedefinitionrealDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionrealDB.MAXAttr_Data.Float64 = datatypedefinitionreal.MAXAttr
	datatypedefinitionrealDB.MAXAttr_Data.Valid = true

	datatypedefinitionrealDB.MINAttr_Data.Float64 = datatypedefinitionreal.MINAttr
	datatypedefinitionrealDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONREAL_WOP
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsFromDATATYPEDEFINITIONREAL_WOP(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL_WOP) {
	// insertion point for fields commit

	datatypedefinitionrealDB.Name_Data.String = datatypedefinitionreal.Name
	datatypedefinitionrealDB.Name_Data.Valid = true

	datatypedefinitionrealDB.ACCURACYAttr_Data.Int64 = int64(datatypedefinitionreal.ACCURACYAttr)
	datatypedefinitionrealDB.ACCURACYAttr_Data.Valid = true

	datatypedefinitionrealDB.DESCAttr_Data.String = datatypedefinitionreal.DESCAttr
	datatypedefinitionrealDB.DESCAttr_Data.Valid = true

	datatypedefinitionrealDB.IDENTIFIERAttr_Data.String = datatypedefinitionreal.IDENTIFIERAttr
	datatypedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionrealDB.LASTCHANGEAttr_Data.String = datatypedefinitionreal.LASTCHANGEAttr
	datatypedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionrealDB.LONGNAMEAttr_Data.String = datatypedefinitionreal.LONGNAMEAttr
	datatypedefinitionrealDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionrealDB.MAXAttr_Data.Float64 = datatypedefinitionreal.MAXAttr
	datatypedefinitionrealDB.MAXAttr_Data.Valid = true

	datatypedefinitionrealDB.MINAttr_Data.Float64 = datatypedefinitionreal.MINAttr
	datatypedefinitionrealDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONREALWOP
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsFromDATATYPEDEFINITIONREALWOP(datatypedefinitionreal *DATATYPEDEFINITIONREALWOP) {
	// insertion point for fields commit

	datatypedefinitionrealDB.Name_Data.String = datatypedefinitionreal.Name
	datatypedefinitionrealDB.Name_Data.Valid = true

	datatypedefinitionrealDB.ACCURACYAttr_Data.Int64 = int64(datatypedefinitionreal.ACCURACYAttr)
	datatypedefinitionrealDB.ACCURACYAttr_Data.Valid = true

	datatypedefinitionrealDB.DESCAttr_Data.String = datatypedefinitionreal.DESCAttr
	datatypedefinitionrealDB.DESCAttr_Data.Valid = true

	datatypedefinitionrealDB.IDENTIFIERAttr_Data.String = datatypedefinitionreal.IDENTIFIERAttr
	datatypedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionrealDB.LASTCHANGEAttr_Data.String = datatypedefinitionreal.LASTCHANGEAttr
	datatypedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionrealDB.LONGNAMEAttr_Data.String = datatypedefinitionreal.LONGNAMEAttr
	datatypedefinitionrealDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionrealDB.MAXAttr_Data.Float64 = datatypedefinitionreal.MAXAttr
	datatypedefinitionrealDB.MAXAttr_Data.Valid = true

	datatypedefinitionrealDB.MINAttr_Data.Float64 = datatypedefinitionreal.MINAttr
	datatypedefinitionrealDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONREAL
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsToDATATYPEDEFINITIONREAL(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionreal.Name = datatypedefinitionrealDB.Name_Data.String
	datatypedefinitionreal.ACCURACYAttr = int(datatypedefinitionrealDB.ACCURACYAttr_Data.Int64)
	datatypedefinitionreal.DESCAttr = datatypedefinitionrealDB.DESCAttr_Data.String
	datatypedefinitionreal.IDENTIFIERAttr = datatypedefinitionrealDB.IDENTIFIERAttr_Data.String
	datatypedefinitionreal.LASTCHANGEAttr = datatypedefinitionrealDB.LASTCHANGEAttr_Data.String
	datatypedefinitionreal.LONGNAMEAttr = datatypedefinitionrealDB.LONGNAMEAttr_Data.String
	datatypedefinitionreal.MAXAttr = datatypedefinitionrealDB.MAXAttr_Data.Float64
	datatypedefinitionreal.MINAttr = datatypedefinitionrealDB.MINAttr_Data.Float64
}

// CopyBasicFieldsToDATATYPEDEFINITIONREAL_WOP
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsToDATATYPEDEFINITIONREAL_WOP(datatypedefinitionreal *models.DATATYPEDEFINITIONREAL_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionreal.Name = datatypedefinitionrealDB.Name_Data.String
	datatypedefinitionreal.ACCURACYAttr = int(datatypedefinitionrealDB.ACCURACYAttr_Data.Int64)
	datatypedefinitionreal.DESCAttr = datatypedefinitionrealDB.DESCAttr_Data.String
	datatypedefinitionreal.IDENTIFIERAttr = datatypedefinitionrealDB.IDENTIFIERAttr_Data.String
	datatypedefinitionreal.LASTCHANGEAttr = datatypedefinitionrealDB.LASTCHANGEAttr_Data.String
	datatypedefinitionreal.LONGNAMEAttr = datatypedefinitionrealDB.LONGNAMEAttr_Data.String
	datatypedefinitionreal.MAXAttr = datatypedefinitionrealDB.MAXAttr_Data.Float64
	datatypedefinitionreal.MINAttr = datatypedefinitionrealDB.MINAttr_Data.Float64
}

// CopyBasicFieldsToDATATYPEDEFINITIONREALWOP
func (datatypedefinitionrealDB *DATATYPEDEFINITIONREALDB) CopyBasicFieldsToDATATYPEDEFINITIONREALWOP(datatypedefinitionreal *DATATYPEDEFINITIONREALWOP) {
	datatypedefinitionreal.ID = int(datatypedefinitionrealDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionreal.Name = datatypedefinitionrealDB.Name_Data.String
	datatypedefinitionreal.ACCURACYAttr = int(datatypedefinitionrealDB.ACCURACYAttr_Data.Int64)
	datatypedefinitionreal.DESCAttr = datatypedefinitionrealDB.DESCAttr_Data.String
	datatypedefinitionreal.IDENTIFIERAttr = datatypedefinitionrealDB.IDENTIFIERAttr_Data.String
	datatypedefinitionreal.LASTCHANGEAttr = datatypedefinitionrealDB.LASTCHANGEAttr_Data.String
	datatypedefinitionreal.LONGNAMEAttr = datatypedefinitionrealDB.LONGNAMEAttr_Data.String
	datatypedefinitionreal.MAXAttr = datatypedefinitionrealDB.MAXAttr_Data.Float64
	datatypedefinitionreal.MINAttr = datatypedefinitionrealDB.MINAttr_Data.Float64
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONREALDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONREALDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONREALDB, 0)
	for _, datatypedefinitionrealDB := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB {
		forBackup = append(forBackup, datatypedefinitionrealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONREAL ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONREAL file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONREALDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONREALDB, 0)
	for _, datatypedefinitionrealDB := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB {
		forBackup = append(forBackup, datatypedefinitionrealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONREAL")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONREAL_Fields, -1)
	for _, datatypedefinitionrealDB := range forBackup {

		var datatypedefinitionrealWOP DATATYPEDEFINITIONREALWOP
		datatypedefinitionrealDB.CopyBasicFieldsToDATATYPEDEFINITIONREALWOP(&datatypedefinitionrealWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionrealWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONREAL" sheet all DATATYPEDEFINITIONREALDB instances
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONREAL"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONREAL.rowVisitorDATATYPEDEFINITIONREAL)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) rowVisitorDATATYPEDEFINITIONREAL(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionrealWOP DATATYPEDEFINITIONREALWOP
		row.ReadStruct(&datatypedefinitionrealWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionrealDB := new(DATATYPEDEFINITIONREALDB)
		datatypedefinitionrealDB.CopyBasicFieldsFromDATATYPEDEFINITIONREALWOP(&datatypedefinitionrealWOP)

		datatypedefinitionrealDB_ID_atBackupTime := datatypedefinitionrealDB.ID
		datatypedefinitionrealDB.ID = 0
		query := backRepoDATATYPEDEFINITIONREAL.db.Create(datatypedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[datatypedefinitionrealDB.ID] = datatypedefinitionrealDB
		BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID[datatypedefinitionrealDB_ID_atBackupTime] = datatypedefinitionrealDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONREALDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONREALDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONREALDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONREAL file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONREALDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB
	for _, datatypedefinitionrealDB := range forRestore {

		datatypedefinitionrealDB_ID_atBackupTime := datatypedefinitionrealDB.ID
		datatypedefinitionrealDB.ID = 0
		query := backRepoDATATYPEDEFINITIONREAL.db.Create(datatypedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[datatypedefinitionrealDB.ID] = datatypedefinitionrealDB
		BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID[datatypedefinitionrealDB_ID_atBackupTime] = datatypedefinitionrealDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONREAL file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONREAL>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) RestorePhaseTwo() {

	for _, datatypedefinitionrealDB := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionrealDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionrealDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionrealDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionrealDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionrealDB.ALTERNATIVEIDID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONREAL.db.Model(datatypedefinitionrealDB).Updates(*datatypedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONREAL.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionreal := range backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr {
		backRepoDATATYPEDEFINITIONREAL.ResetReversePointersInstance(backRepo, idx, datatypedefinitionreal)
	}

	return
}

func (backRepoDATATYPEDEFINITIONREAL *BackRepoDATATYPEDEFINITIONREALStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionreal *models.DATATYPEDEFINITIONREAL) (Error error) {

	// fetch matching datatypedefinitionrealDB
	if datatypedefinitionrealDB, ok := backRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALDB[idx]; ok {
		_ = datatypedefinitionrealDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONREALid_atBckpTime_newID map[uint]uint
