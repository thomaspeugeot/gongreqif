// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECTYPES_sql sql.NullBool
var dummy_SPECTYPES_time time.Duration
var dummy_SPECTYPES_sort sort.Float64Slice

// SPECTYPESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spectypesAPI
type SPECTYPESAPI struct {
	gorm.Model

	models.SPECTYPES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECTYPESPointersEncoding SPECTYPESPointersEncoding
}

// SPECTYPESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECTYPESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field RELATIONGROUPTYPE is a slice of pointers to another Struct (optional or 0..1)
	RELATIONGROUPTYPE IntSlice `gorm:"type:TEXT"`

	// field SPECOBJECTTYPE is a slice of pointers to another Struct (optional or 0..1)
	SPECOBJECTTYPE IntSlice `gorm:"type:TEXT"`

	// field SPECRELATIONTYPE is a slice of pointers to another Struct (optional or 0..1)
	SPECRELATIONTYPE IntSlice `gorm:"type:TEXT"`

	// field SPECIFICATIONTYPE is a slice of pointers to another Struct (optional or 0..1)
	SPECIFICATIONTYPE IntSlice `gorm:"type:TEXT"`
}

// SPECTYPESDB describes a spectypes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spectypesDB
type SPECTYPESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spectypesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECTYPESPointersEncoding
}

// SPECTYPESDBs arrays spectypesDBs
// swagger:response spectypesDBsResponse
type SPECTYPESDBs []SPECTYPESDB

// SPECTYPESDBResponse provides response
// swagger:response spectypesDBResponse
type SPECTYPESDBResponse struct {
	SPECTYPESDB
}

// SPECTYPESWOP is a SPECTYPES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECTYPESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECTYPES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECTYPESStruct struct {
	// stores SPECTYPESDB according to their gorm ID
	Map_SPECTYPESDBID_SPECTYPESDB map[uint]*SPECTYPESDB

	// stores SPECTYPESDB ID according to SPECTYPES address
	Map_SPECTYPESPtr_SPECTYPESDBID map[*models.SPECTYPES]uint

	// stores SPECTYPES according to their gorm ID
	Map_SPECTYPESDBID_SPECTYPESPtr map[uint]*models.SPECTYPES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECTYPES.stage
	return
}

func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) GetDB() *gorm.DB {
	return backRepoSPECTYPES.db
}

// GetSPECTYPESDBFromSPECTYPESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) GetSPECTYPESDBFromSPECTYPESPtr(spectypes *models.SPECTYPES) (spectypesDB *SPECTYPESDB) {
	id := backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]
	spectypesDB = backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[id]
	return
}

// BackRepoSPECTYPES.CommitPhaseOne commits all staged instances of SPECTYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spectypes := range stage.SPECTYPESs {
		backRepoSPECTYPES.CommitPhaseOneInstance(spectypes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spectypes := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr {
		if _, ok := stage.SPECTYPESs[spectypes]; !ok {
			backRepoSPECTYPES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECTYPES.CommitDeleteInstance commits deletion of SPECTYPES to the BackRepo
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CommitDeleteInstance(id uint) (Error error) {

	spectypes := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[id]

	// spectypes is not staged anymore, remove spectypesDB
	spectypesDB := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[id]
	query := backRepoSPECTYPES.db.Unscoped().Delete(&spectypesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID, spectypes)
	delete(backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr, id)
	delete(backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB, id)

	return
}

// BackRepoSPECTYPES.CommitPhaseOneInstance commits spectypes staged instances of SPECTYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CommitPhaseOneInstance(spectypes *models.SPECTYPES) (Error error) {

	// check if the spectypes is not commited yet
	if _, ok := backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]; ok {
		return
	}

	// initiate spectypes
	var spectypesDB SPECTYPESDB
	spectypesDB.CopyBasicFieldsFromSPECTYPES(spectypes)

	query := backRepoSPECTYPES.db.Create(&spectypesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes] = spectypesDB.ID
	backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[spectypesDB.ID] = spectypes
	backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[spectypesDB.ID] = &spectypesDB

	return
}

// BackRepoSPECTYPES.CommitPhaseTwo commits all staged instances of SPECTYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spectypes := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr {
		backRepoSPECTYPES.CommitPhaseTwoInstance(backRepo, idx, spectypes)
	}

	return
}

// BackRepoSPECTYPES.CommitPhaseTwoInstance commits {{structname }} of models.SPECTYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spectypes *models.SPECTYPES) (Error error) {

	// fetch matching spectypesDB
	if spectypesDB, ok := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[idx]; ok {

		spectypesDB.CopyBasicFieldsFromSPECTYPES(spectypes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		spectypesDB.SPECTYPESPointersEncoding.RELATIONGROUPTYPE = make([]int, 0)
		// 2. encode
		for _, relationgrouptypeAssocEnd := range spectypes.RELATIONGROUPTYPE {
			relationgrouptypeAssocEnd_DB :=
				backRepo.BackRepoRELATIONGROUPTYPE.GetRELATIONGROUPTYPEDBFromRELATIONGROUPTYPEPtr(relationgrouptypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the relationgrouptypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if relationgrouptypeAssocEnd_DB == nil {
				continue
			}
			
			spectypesDB.SPECTYPESPointersEncoding.RELATIONGROUPTYPE =
				append(spectypesDB.SPECTYPESPointersEncoding.RELATIONGROUPTYPE, int(relationgrouptypeAssocEnd_DB.ID))
		}

		// 1. reset
		spectypesDB.SPECTYPESPointersEncoding.SPECOBJECTTYPE = make([]int, 0)
		// 2. encode
		for _, specobjecttypeAssocEnd := range spectypes.SPECOBJECTTYPE {
			specobjecttypeAssocEnd_DB :=
				backRepo.BackRepoSPECOBJECTTYPE.GetSPECOBJECTTYPEDBFromSPECOBJECTTYPEPtr(specobjecttypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the specobjecttypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if specobjecttypeAssocEnd_DB == nil {
				continue
			}
			
			spectypesDB.SPECTYPESPointersEncoding.SPECOBJECTTYPE =
				append(spectypesDB.SPECTYPESPointersEncoding.SPECOBJECTTYPE, int(specobjecttypeAssocEnd_DB.ID))
		}

		// 1. reset
		spectypesDB.SPECTYPESPointersEncoding.SPECRELATIONTYPE = make([]int, 0)
		// 2. encode
		for _, specrelationtypeAssocEnd := range spectypes.SPECRELATIONTYPE {
			specrelationtypeAssocEnd_DB :=
				backRepo.BackRepoSPECRELATIONTYPE.GetSPECRELATIONTYPEDBFromSPECRELATIONTYPEPtr(specrelationtypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the specrelationtypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if specrelationtypeAssocEnd_DB == nil {
				continue
			}
			
			spectypesDB.SPECTYPESPointersEncoding.SPECRELATIONTYPE =
				append(spectypesDB.SPECTYPESPointersEncoding.SPECRELATIONTYPE, int(specrelationtypeAssocEnd_DB.ID))
		}

		// 1. reset
		spectypesDB.SPECTYPESPointersEncoding.SPECIFICATIONTYPE = make([]int, 0)
		// 2. encode
		for _, specificationtypeAssocEnd := range spectypes.SPECIFICATIONTYPE {
			specificationtypeAssocEnd_DB :=
				backRepo.BackRepoSPECIFICATIONTYPE.GetSPECIFICATIONTYPEDBFromSPECIFICATIONTYPEPtr(specificationtypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the specificationtypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if specificationtypeAssocEnd_DB == nil {
				continue
			}
			
			spectypesDB.SPECTYPESPointersEncoding.SPECIFICATIONTYPE =
				append(spectypesDB.SPECTYPESPointersEncoding.SPECIFICATIONTYPE, int(specificationtypeAssocEnd_DB.ID))
		}

		query := backRepoSPECTYPES.db.Save(&spectypesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECTYPES intance %s", spectypes.Name))
		return err
	}

	return
}

// BackRepoSPECTYPES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CheckoutPhaseOne() (Error error) {

	spectypesDBArray := make([]SPECTYPESDB, 0)
	query := backRepoSPECTYPES.db.Find(&spectypesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spectypesInstancesToBeRemovedFromTheStage := make(map[*models.SPECTYPES]any)
	for key, value := range backRepoSPECTYPES.stage.SPECTYPESs {
		spectypesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spectypesDB := range spectypesDBArray {
		backRepoSPECTYPES.CheckoutPhaseOneInstance(&spectypesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spectypes, ok := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[spectypesDB.ID]
		if ok {
			delete(spectypesInstancesToBeRemovedFromTheStage, spectypes)
		}
	}

	// remove from stage and back repo's 3 maps all spectypess that are not in the checkout
	for spectypes := range spectypesInstancesToBeRemovedFromTheStage {
		spectypes.Unstage(backRepoSPECTYPES.GetStage())

		// remove instance from the back repo 3 maps
		spectypesID := backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]
		delete(backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID, spectypes)
		delete(backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB, spectypesID)
		delete(backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr, spectypesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spectypesDB that has been found in the DB, updates the backRepo and stages the
// models version of the spectypesDB
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CheckoutPhaseOneInstance(spectypesDB *SPECTYPESDB) (Error error) {

	spectypes, ok := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[spectypesDB.ID]
	if !ok {
		spectypes = new(models.SPECTYPES)

		backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[spectypesDB.ID] = spectypes
		backRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes] = spectypesDB.ID

		// append model store with the new element
		spectypes.Name = spectypesDB.Name_Data.String
		spectypes.Stage(backRepoSPECTYPES.GetStage())
	}
	spectypesDB.CopyBasicFieldsToSPECTYPES(spectypes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spectypes.Stage(backRepoSPECTYPES.GetStage())

	// preserve pointer to spectypesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECTYPESDBID_SPECTYPESDB)[spectypesDB hold variable pointers
	spectypesDB_Data := *spectypesDB
	preservedPtrToSPECTYPES := &spectypesDB_Data
	backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[spectypesDB.ID] = preservedPtrToSPECTYPES

	return
}

// BackRepoSPECTYPES.CheckoutPhaseTwo Checkouts all staged instances of SPECTYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spectypesDB := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB {
		backRepoSPECTYPES.CheckoutPhaseTwoInstance(backRepo, spectypesDB)
	}
	return
}

// BackRepoSPECTYPES.CheckoutPhaseTwoInstance Checkouts staged instances of SPECTYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spectypesDB *SPECTYPESDB) (Error error) {

	spectypes := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[spectypesDB.ID]

	spectypesDB.DecodePointers(backRepo, spectypes)

	return
}

func (spectypesDB *SPECTYPESDB) DecodePointers(backRepo *BackRepoStruct, spectypes *models.SPECTYPES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem spectypes.RELATIONGROUPTYPE in the stage from the encode in the back repo
	// It parses all RELATIONGROUPTYPEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spectypes.RELATIONGROUPTYPE = spectypes.RELATIONGROUPTYPE[:0]
	for _, _RELATIONGROUPTYPEid := range spectypesDB.SPECTYPESPointersEncoding.RELATIONGROUPTYPE {
		spectypes.RELATIONGROUPTYPE = append(spectypes.RELATIONGROUPTYPE, backRepo.BackRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[uint(_RELATIONGROUPTYPEid)])
	}

	// This loop redeem spectypes.SPECOBJECTTYPE in the stage from the encode in the back repo
	// It parses all SPECOBJECTTYPEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spectypes.SPECOBJECTTYPE = spectypes.SPECOBJECTTYPE[:0]
	for _, _SPECOBJECTTYPEid := range spectypesDB.SPECTYPESPointersEncoding.SPECOBJECTTYPE {
		spectypes.SPECOBJECTTYPE = append(spectypes.SPECOBJECTTYPE, backRepo.BackRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[uint(_SPECOBJECTTYPEid)])
	}

	// This loop redeem spectypes.SPECRELATIONTYPE in the stage from the encode in the back repo
	// It parses all SPECRELATIONTYPEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spectypes.SPECRELATIONTYPE = spectypes.SPECRELATIONTYPE[:0]
	for _, _SPECRELATIONTYPEid := range spectypesDB.SPECTYPESPointersEncoding.SPECRELATIONTYPE {
		spectypes.SPECRELATIONTYPE = append(spectypes.SPECRELATIONTYPE, backRepo.BackRepoSPECRELATIONTYPE.Map_SPECRELATIONTYPEDBID_SPECRELATIONTYPEPtr[uint(_SPECRELATIONTYPEid)])
	}

	// This loop redeem spectypes.SPECIFICATIONTYPE in the stage from the encode in the back repo
	// It parses all SPECIFICATIONTYPEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spectypes.SPECIFICATIONTYPE = spectypes.SPECIFICATIONTYPE[:0]
	for _, _SPECIFICATIONTYPEid := range spectypesDB.SPECTYPESPointersEncoding.SPECIFICATIONTYPE {
		spectypes.SPECIFICATIONTYPE = append(spectypes.SPECIFICATIONTYPE, backRepo.BackRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[uint(_SPECIFICATIONTYPEid)])
	}

	return
}

// CommitSPECTYPES allows commit of a single spectypes (if already staged)
func (backRepo *BackRepoStruct) CommitSPECTYPES(spectypes *models.SPECTYPES) {
	backRepo.BackRepoSPECTYPES.CommitPhaseOneInstance(spectypes)
	if id, ok := backRepo.BackRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]; ok {
		backRepo.BackRepoSPECTYPES.CommitPhaseTwoInstance(backRepo, id, spectypes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECTYPES allows checkout of a single spectypes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECTYPES(spectypes *models.SPECTYPES) {
	// check if the spectypes is staged
	if _, ok := backRepo.BackRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]; ok {

		if id, ok := backRepo.BackRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[spectypes]; ok {
			var spectypesDB SPECTYPESDB
			spectypesDB.ID = id

			if err := backRepo.BackRepoSPECTYPES.db.First(&spectypesDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECTYPES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECTYPES.CheckoutPhaseOneInstance(&spectypesDB)
			backRepo.BackRepoSPECTYPES.CheckoutPhaseTwoInstance(backRepo, &spectypesDB)
		}
	}
}

// CopyBasicFieldsFromSPECTYPES
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsFromSPECTYPES(spectypes *models.SPECTYPES) {
	// insertion point for fields commit

	spectypesDB.Name_Data.String = spectypes.Name
	spectypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECTYPES_WOP
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsFromSPECTYPES_WOP(spectypes *models.SPECTYPES_WOP) {
	// insertion point for fields commit

	spectypesDB.Name_Data.String = spectypes.Name
	spectypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECTYPESWOP
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsFromSPECTYPESWOP(spectypes *SPECTYPESWOP) {
	// insertion point for fields commit

	spectypesDB.Name_Data.String = spectypes.Name
	spectypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECTYPES
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsToSPECTYPES(spectypes *models.SPECTYPES) {
	// insertion point for checkout of basic fields (back repo to stage)
	spectypes.Name = spectypesDB.Name_Data.String
}

// CopyBasicFieldsToSPECTYPES_WOP
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsToSPECTYPES_WOP(spectypes *models.SPECTYPES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spectypes.Name = spectypesDB.Name_Data.String
}

// CopyBasicFieldsToSPECTYPESWOP
func (spectypesDB *SPECTYPESDB) CopyBasicFieldsToSPECTYPESWOP(spectypes *SPECTYPESWOP) {
	spectypes.ID = int(spectypesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spectypes.Name = spectypesDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECTYPESDB instances in the backrepo
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECTYPESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECTYPESDB, 0)
	for _, spectypesDB := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB {
		forBackup = append(forBackup, spectypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECTYPES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECTYPES file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECTYPESDB instances in the backrepo
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECTYPESDB, 0)
	for _, spectypesDB := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB {
		forBackup = append(forBackup, spectypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECTYPES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECTYPES_Fields, -1)
	for _, spectypesDB := range forBackup {

		var spectypesWOP SPECTYPESWOP
		spectypesDB.CopyBasicFieldsToSPECTYPESWOP(&spectypesWOP)

		row := sh.AddRow()
		row.WriteStruct(&spectypesWOP, -1)
	}
}

// RestoreXL from the "SPECTYPES" sheet all SPECTYPESDB instances
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECTYPESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECTYPES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECTYPES.rowVisitorSPECTYPES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) rowVisitorSPECTYPES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spectypesWOP SPECTYPESWOP
		row.ReadStruct(&spectypesWOP)

		// add the unmarshalled struct to the stage
		spectypesDB := new(SPECTYPESDB)
		spectypesDB.CopyBasicFieldsFromSPECTYPESWOP(&spectypesWOP)

		spectypesDB_ID_atBackupTime := spectypesDB.ID
		spectypesDB.ID = 0
		query := backRepoSPECTYPES.db.Create(spectypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[spectypesDB.ID] = spectypesDB
		BackRepoSPECTYPESid_atBckpTime_newID[spectypesDB_ID_atBackupTime] = spectypesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECTYPESDB.json" in dirPath that stores an array
// of SPECTYPESDB and stores it in the database
// the map BackRepoSPECTYPESid_atBckpTime_newID is updated accordingly
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECTYPESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECTYPESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECTYPES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECTYPESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECTYPESDBID_SPECTYPESDB
	for _, spectypesDB := range forRestore {

		spectypesDB_ID_atBackupTime := spectypesDB.ID
		spectypesDB.ID = 0
		query := backRepoSPECTYPES.db.Create(spectypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[spectypesDB.ID] = spectypesDB
		BackRepoSPECTYPESid_atBckpTime_newID[spectypesDB_ID_atBackupTime] = spectypesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECTYPES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECTYPES>id_atBckpTime_newID
// to compute new index
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) RestorePhaseTwo() {

	for _, spectypesDB := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB {

		// next line of code is to avert unused variable compilation error
		_ = spectypesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECTYPES.db.Model(spectypesDB).Updates(*spectypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECTYPES.ResetReversePointers commits all staged instances of SPECTYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spectypes := range backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr {
		backRepoSPECTYPES.ResetReversePointersInstance(backRepo, idx, spectypes)
	}

	return
}

func (backRepoSPECTYPES *BackRepoSPECTYPESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spectypes *models.SPECTYPES) (Error error) {

	// fetch matching spectypesDB
	if spectypesDB, ok := backRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESDB[idx]; ok {
		_ = spectypesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECTYPESid_atBckpTime_newID map[uint]uint
