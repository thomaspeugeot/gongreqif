// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQIFHEADER_sql sql.NullBool
var dummy_REQIFHEADER_time time.Duration
var dummy_REQIFHEADER_sort sort.Float64Slice

// REQIFHEADERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reqifheaderAPI
type REQIFHEADERAPI struct {
	gorm.Model

	models.REQIFHEADER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQIFHEADERPointersEncoding REQIFHEADERPointersEncoding
}

// REQIFHEADERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQIFHEADERPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// REQIFHEADERDB describes a reqifheader in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reqifheaderDB
type REQIFHEADERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field reqifheaderDB.Name
	Name_Data sql.NullString

	// Declation for basic field reqifheaderDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field reqifheaderDB.COMMENT
	COMMENT_Data sql.NullString

	// Declation for basic field reqifheaderDB.CREATIONTIME
	CREATIONTIME_Data sql.NullString

	// Declation for basic field reqifheaderDB.REPOSITORYID
	REPOSITORYID_Data sql.NullString

	// Declation for basic field reqifheaderDB.REQIFTOOLID
	REQIFTOOLID_Data sql.NullString

	// Declation for basic field reqifheaderDB.REQIFVERSION
	REQIFVERSION_Data sql.NullString

	// Declation for basic field reqifheaderDB.SOURCETOOLID
	SOURCETOOLID_Data sql.NullString

	// Declation for basic field reqifheaderDB.TITLE
	TITLE_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQIFHEADERPointersEncoding
}

// REQIFHEADERDBs arrays reqifheaderDBs
// swagger:response reqifheaderDBsResponse
type REQIFHEADERDBs []REQIFHEADERDB

// REQIFHEADERDBResponse provides response
// swagger:response reqifheaderDBResponse
type REQIFHEADERDBResponse struct {
	REQIFHEADERDB
}

// REQIFHEADERWOP is a REQIFHEADER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQIFHEADERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IDENTIFIERAttr string `xlsx:"2"`

	COMMENT string `xlsx:"3"`

	CREATIONTIME string `xlsx:"4"`

	REPOSITORYID string `xlsx:"5"`

	REQIFTOOLID string `xlsx:"6"`

	REQIFVERSION string `xlsx:"7"`

	SOURCETOOLID string `xlsx:"8"`

	TITLE string `xlsx:"9"`
	// insertion for WOP pointer fields
}

var REQIFHEADER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IDENTIFIERAttr",
	"COMMENT",
	"CREATIONTIME",
	"REPOSITORYID",
	"REQIFTOOLID",
	"REQIFVERSION",
	"SOURCETOOLID",
	"TITLE",
}

type BackRepoREQIFHEADERStruct struct {
	// stores REQIFHEADERDB according to their gorm ID
	Map_REQIFHEADERDBID_REQIFHEADERDB map[uint]*REQIFHEADERDB

	// stores REQIFHEADERDB ID according to REQIFHEADER address
	Map_REQIFHEADERPtr_REQIFHEADERDBID map[*models.REQIFHEADER]uint

	// stores REQIFHEADER according to their gorm ID
	Map_REQIFHEADERDBID_REQIFHEADERPtr map[uint]*models.REQIFHEADER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQIFHEADER.stage
	return
}

func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) GetDB() *gorm.DB {
	return backRepoREQIFHEADER.db
}

// GetREQIFHEADERDBFromREQIFHEADERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) GetREQIFHEADERDBFromREQIFHEADERPtr(reqifheader *models.REQIFHEADER) (reqifheaderDB *REQIFHEADERDB) {
	id := backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]
	reqifheaderDB = backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[id]
	return
}

// BackRepoREQIFHEADER.CommitPhaseOne commits all staged instances of REQIFHEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reqifheader := range stage.REQIFHEADERs {
		backRepoREQIFHEADER.CommitPhaseOneInstance(reqifheader)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reqifheader := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr {
		if _, ok := stage.REQIFHEADERs[reqifheader]; !ok {
			backRepoREQIFHEADER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQIFHEADER.CommitDeleteInstance commits deletion of REQIFHEADER to the BackRepo
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CommitDeleteInstance(id uint) (Error error) {

	reqifheader := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[id]

	// reqifheader is not staged anymore, remove reqifheaderDB
	reqifheaderDB := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[id]
	query := backRepoREQIFHEADER.db.Unscoped().Delete(&reqifheaderDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID, reqifheader)
	delete(backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr, id)
	delete(backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB, id)

	return
}

// BackRepoREQIFHEADER.CommitPhaseOneInstance commits reqifheader staged instances of REQIFHEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CommitPhaseOneInstance(reqifheader *models.REQIFHEADER) (Error error) {

	// check if the reqifheader is not commited yet
	if _, ok := backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]; ok {
		return
	}

	// initiate reqifheader
	var reqifheaderDB REQIFHEADERDB
	reqifheaderDB.CopyBasicFieldsFromREQIFHEADER(reqifheader)

	query := backRepoREQIFHEADER.db.Create(&reqifheaderDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader] = reqifheaderDB.ID
	backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[reqifheaderDB.ID] = reqifheader
	backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[reqifheaderDB.ID] = &reqifheaderDB

	return
}

// BackRepoREQIFHEADER.CommitPhaseTwo commits all staged instances of REQIFHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reqifheader := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr {
		backRepoREQIFHEADER.CommitPhaseTwoInstance(backRepo, idx, reqifheader)
	}

	return
}

// BackRepoREQIFHEADER.CommitPhaseTwoInstance commits {{structname }} of models.REQIFHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reqifheader *models.REQIFHEADER) (Error error) {

	// fetch matching reqifheaderDB
	if reqifheaderDB, ok := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[idx]; ok {

		reqifheaderDB.CopyBasicFieldsFromREQIFHEADER(reqifheader)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoREQIFHEADER.db.Save(&reqifheaderDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQIFHEADER intance %s", reqifheader.Name))
		return err
	}

	return
}

// BackRepoREQIFHEADER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CheckoutPhaseOne() (Error error) {

	reqifheaderDBArray := make([]REQIFHEADERDB, 0)
	query := backRepoREQIFHEADER.db.Find(&reqifheaderDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reqifheaderInstancesToBeRemovedFromTheStage := make(map[*models.REQIFHEADER]any)
	for key, value := range backRepoREQIFHEADER.stage.REQIFHEADERs {
		reqifheaderInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reqifheaderDB := range reqifheaderDBArray {
		backRepoREQIFHEADER.CheckoutPhaseOneInstance(&reqifheaderDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reqifheader, ok := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[reqifheaderDB.ID]
		if ok {
			delete(reqifheaderInstancesToBeRemovedFromTheStage, reqifheader)
		}
	}

	// remove from stage and back repo's 3 maps all reqifheaders that are not in the checkout
	for reqifheader := range reqifheaderInstancesToBeRemovedFromTheStage {
		reqifheader.Unstage(backRepoREQIFHEADER.GetStage())

		// remove instance from the back repo 3 maps
		reqifheaderID := backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]
		delete(backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID, reqifheader)
		delete(backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB, reqifheaderID)
		delete(backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr, reqifheaderID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reqifheaderDB that has been found in the DB, updates the backRepo and stages the
// models version of the reqifheaderDB
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CheckoutPhaseOneInstance(reqifheaderDB *REQIFHEADERDB) (Error error) {

	reqifheader, ok := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[reqifheaderDB.ID]
	if !ok {
		reqifheader = new(models.REQIFHEADER)

		backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[reqifheaderDB.ID] = reqifheader
		backRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader] = reqifheaderDB.ID

		// append model store with the new element
		reqifheader.Name = reqifheaderDB.Name_Data.String
		reqifheader.Stage(backRepoREQIFHEADER.GetStage())
	}
	reqifheaderDB.CopyBasicFieldsToREQIFHEADER(reqifheader)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	reqifheader.Stage(backRepoREQIFHEADER.GetStage())

	// preserve pointer to reqifheaderDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQIFHEADERDBID_REQIFHEADERDB)[reqifheaderDB hold variable pointers
	reqifheaderDB_Data := *reqifheaderDB
	preservedPtrToREQIFHEADER := &reqifheaderDB_Data
	backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[reqifheaderDB.ID] = preservedPtrToREQIFHEADER

	return
}

// BackRepoREQIFHEADER.CheckoutPhaseTwo Checkouts all staged instances of REQIFHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reqifheaderDB := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB {
		backRepoREQIFHEADER.CheckoutPhaseTwoInstance(backRepo, reqifheaderDB)
	}
	return
}

// BackRepoREQIFHEADER.CheckoutPhaseTwoInstance Checkouts staged instances of REQIFHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reqifheaderDB *REQIFHEADERDB) (Error error) {

	reqifheader := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[reqifheaderDB.ID]

	reqifheaderDB.DecodePointers(backRepo, reqifheader)

	return
}

func (reqifheaderDB *REQIFHEADERDB) DecodePointers(backRepo *BackRepoStruct, reqifheader *models.REQIFHEADER) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitREQIFHEADER allows commit of a single reqifheader (if already staged)
func (backRepo *BackRepoStruct) CommitREQIFHEADER(reqifheader *models.REQIFHEADER) {
	backRepo.BackRepoREQIFHEADER.CommitPhaseOneInstance(reqifheader)
	if id, ok := backRepo.BackRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]; ok {
		backRepo.BackRepoREQIFHEADER.CommitPhaseTwoInstance(backRepo, id, reqifheader)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQIFHEADER allows checkout of a single reqifheader (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQIFHEADER(reqifheader *models.REQIFHEADER) {
	// check if the reqifheader is staged
	if _, ok := backRepo.BackRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]; ok {

		if id, ok := backRepo.BackRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[reqifheader]; ok {
			var reqifheaderDB REQIFHEADERDB
			reqifheaderDB.ID = id

			if err := backRepo.BackRepoREQIFHEADER.db.First(&reqifheaderDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQIFHEADER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQIFHEADER.CheckoutPhaseOneInstance(&reqifheaderDB)
			backRepo.BackRepoREQIFHEADER.CheckoutPhaseTwoInstance(backRepo, &reqifheaderDB)
		}
	}
}

// CopyBasicFieldsFromREQIFHEADER
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsFromREQIFHEADER(reqifheader *models.REQIFHEADER) {
	// insertion point for fields commit

	reqifheaderDB.Name_Data.String = reqifheader.Name
	reqifheaderDB.Name_Data.Valid = true

	reqifheaderDB.IDENTIFIERAttr_Data.String = reqifheader.IDENTIFIERAttr
	reqifheaderDB.IDENTIFIERAttr_Data.Valid = true

	reqifheaderDB.COMMENT_Data.String = reqifheader.COMMENT
	reqifheaderDB.COMMENT_Data.Valid = true

	reqifheaderDB.CREATIONTIME_Data.String = reqifheader.CREATIONTIME
	reqifheaderDB.CREATIONTIME_Data.Valid = true

	reqifheaderDB.REPOSITORYID_Data.String = reqifheader.REPOSITORYID
	reqifheaderDB.REPOSITORYID_Data.Valid = true

	reqifheaderDB.REQIFTOOLID_Data.String = reqifheader.REQIFTOOLID
	reqifheaderDB.REQIFTOOLID_Data.Valid = true

	reqifheaderDB.REQIFVERSION_Data.String = reqifheader.REQIFVERSION
	reqifheaderDB.REQIFVERSION_Data.Valid = true

	reqifheaderDB.SOURCETOOLID_Data.String = reqifheader.SOURCETOOLID
	reqifheaderDB.SOURCETOOLID_Data.Valid = true

	reqifheaderDB.TITLE_Data.String = reqifheader.TITLE
	reqifheaderDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromREQIFHEADER_WOP
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsFromREQIFHEADER_WOP(reqifheader *models.REQIFHEADER_WOP) {
	// insertion point for fields commit

	reqifheaderDB.Name_Data.String = reqifheader.Name
	reqifheaderDB.Name_Data.Valid = true

	reqifheaderDB.IDENTIFIERAttr_Data.String = reqifheader.IDENTIFIERAttr
	reqifheaderDB.IDENTIFIERAttr_Data.Valid = true

	reqifheaderDB.COMMENT_Data.String = reqifheader.COMMENT
	reqifheaderDB.COMMENT_Data.Valid = true

	reqifheaderDB.CREATIONTIME_Data.String = reqifheader.CREATIONTIME
	reqifheaderDB.CREATIONTIME_Data.Valid = true

	reqifheaderDB.REPOSITORYID_Data.String = reqifheader.REPOSITORYID
	reqifheaderDB.REPOSITORYID_Data.Valid = true

	reqifheaderDB.REQIFTOOLID_Data.String = reqifheader.REQIFTOOLID
	reqifheaderDB.REQIFTOOLID_Data.Valid = true

	reqifheaderDB.REQIFVERSION_Data.String = reqifheader.REQIFVERSION
	reqifheaderDB.REQIFVERSION_Data.Valid = true

	reqifheaderDB.SOURCETOOLID_Data.String = reqifheader.SOURCETOOLID
	reqifheaderDB.SOURCETOOLID_Data.Valid = true

	reqifheaderDB.TITLE_Data.String = reqifheader.TITLE
	reqifheaderDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromREQIFHEADERWOP
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsFromREQIFHEADERWOP(reqifheader *REQIFHEADERWOP) {
	// insertion point for fields commit

	reqifheaderDB.Name_Data.String = reqifheader.Name
	reqifheaderDB.Name_Data.Valid = true

	reqifheaderDB.IDENTIFIERAttr_Data.String = reqifheader.IDENTIFIERAttr
	reqifheaderDB.IDENTIFIERAttr_Data.Valid = true

	reqifheaderDB.COMMENT_Data.String = reqifheader.COMMENT
	reqifheaderDB.COMMENT_Data.Valid = true

	reqifheaderDB.CREATIONTIME_Data.String = reqifheader.CREATIONTIME
	reqifheaderDB.CREATIONTIME_Data.Valid = true

	reqifheaderDB.REPOSITORYID_Data.String = reqifheader.REPOSITORYID
	reqifheaderDB.REPOSITORYID_Data.Valid = true

	reqifheaderDB.REQIFTOOLID_Data.String = reqifheader.REQIFTOOLID
	reqifheaderDB.REQIFTOOLID_Data.Valid = true

	reqifheaderDB.REQIFVERSION_Data.String = reqifheader.REQIFVERSION
	reqifheaderDB.REQIFVERSION_Data.Valid = true

	reqifheaderDB.SOURCETOOLID_Data.String = reqifheader.SOURCETOOLID
	reqifheaderDB.SOURCETOOLID_Data.Valid = true

	reqifheaderDB.TITLE_Data.String = reqifheader.TITLE
	reqifheaderDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsToREQIFHEADER
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsToREQIFHEADER(reqifheader *models.REQIFHEADER) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqifheader.Name = reqifheaderDB.Name_Data.String
	reqifheader.IDENTIFIERAttr = reqifheaderDB.IDENTIFIERAttr_Data.String
	reqifheader.COMMENT = reqifheaderDB.COMMENT_Data.String
	reqifheader.CREATIONTIME = reqifheaderDB.CREATIONTIME_Data.String
	reqifheader.REPOSITORYID = reqifheaderDB.REPOSITORYID_Data.String
	reqifheader.REQIFTOOLID = reqifheaderDB.REQIFTOOLID_Data.String
	reqifheader.REQIFVERSION = reqifheaderDB.REQIFVERSION_Data.String
	reqifheader.SOURCETOOLID = reqifheaderDB.SOURCETOOLID_Data.String
	reqifheader.TITLE = reqifheaderDB.TITLE_Data.String
}

// CopyBasicFieldsToREQIFHEADER_WOP
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsToREQIFHEADER_WOP(reqifheader *models.REQIFHEADER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqifheader.Name = reqifheaderDB.Name_Data.String
	reqifheader.IDENTIFIERAttr = reqifheaderDB.IDENTIFIERAttr_Data.String
	reqifheader.COMMENT = reqifheaderDB.COMMENT_Data.String
	reqifheader.CREATIONTIME = reqifheaderDB.CREATIONTIME_Data.String
	reqifheader.REPOSITORYID = reqifheaderDB.REPOSITORYID_Data.String
	reqifheader.REQIFTOOLID = reqifheaderDB.REQIFTOOLID_Data.String
	reqifheader.REQIFVERSION = reqifheaderDB.REQIFVERSION_Data.String
	reqifheader.SOURCETOOLID = reqifheaderDB.SOURCETOOLID_Data.String
	reqifheader.TITLE = reqifheaderDB.TITLE_Data.String
}

// CopyBasicFieldsToREQIFHEADERWOP
func (reqifheaderDB *REQIFHEADERDB) CopyBasicFieldsToREQIFHEADERWOP(reqifheader *REQIFHEADERWOP) {
	reqifheader.ID = int(reqifheaderDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reqifheader.Name = reqifheaderDB.Name_Data.String
	reqifheader.IDENTIFIERAttr = reqifheaderDB.IDENTIFIERAttr_Data.String
	reqifheader.COMMENT = reqifheaderDB.COMMENT_Data.String
	reqifheader.CREATIONTIME = reqifheaderDB.CREATIONTIME_Data.String
	reqifheader.REPOSITORYID = reqifheaderDB.REPOSITORYID_Data.String
	reqifheader.REQIFTOOLID = reqifheaderDB.REQIFTOOLID_Data.String
	reqifheader.REQIFVERSION = reqifheaderDB.REQIFVERSION_Data.String
	reqifheader.SOURCETOOLID = reqifheaderDB.SOURCETOOLID_Data.String
	reqifheader.TITLE = reqifheaderDB.TITLE_Data.String
}

// Backup generates a json file from a slice of all REQIFHEADERDB instances in the backrepo
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQIFHEADERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFHEADERDB, 0)
	for _, reqifheaderDB := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB {
		forBackup = append(forBackup, reqifheaderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQIFHEADER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQIFHEADER file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQIFHEADERDB instances in the backrepo
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFHEADERDB, 0)
	for _, reqifheaderDB := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB {
		forBackup = append(forBackup, reqifheaderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQIFHEADER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQIFHEADER_Fields, -1)
	for _, reqifheaderDB := range forBackup {

		var reqifheaderWOP REQIFHEADERWOP
		reqifheaderDB.CopyBasicFieldsToREQIFHEADERWOP(&reqifheaderWOP)

		row := sh.AddRow()
		row.WriteStruct(&reqifheaderWOP, -1)
	}
}

// RestoreXL from the "REQIFHEADER" sheet all REQIFHEADERDB instances
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQIFHEADERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQIFHEADER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQIFHEADER.rowVisitorREQIFHEADER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) rowVisitorREQIFHEADER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var reqifheaderWOP REQIFHEADERWOP
		row.ReadStruct(&reqifheaderWOP)

		// add the unmarshalled struct to the stage
		reqifheaderDB := new(REQIFHEADERDB)
		reqifheaderDB.CopyBasicFieldsFromREQIFHEADERWOP(&reqifheaderWOP)

		reqifheaderDB_ID_atBackupTime := reqifheaderDB.ID
		reqifheaderDB.ID = 0
		query := backRepoREQIFHEADER.db.Create(reqifheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[reqifheaderDB.ID] = reqifheaderDB
		BackRepoREQIFHEADERid_atBckpTime_newID[reqifheaderDB_ID_atBackupTime] = reqifheaderDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQIFHEADERDB.json" in dirPath that stores an array
// of REQIFHEADERDB and stores it in the database
// the map BackRepoREQIFHEADERid_atBckpTime_newID is updated accordingly
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQIFHEADERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQIFHEADERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQIFHEADER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQIFHEADERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQIFHEADERDBID_REQIFHEADERDB
	for _, reqifheaderDB := range forRestore {

		reqifheaderDB_ID_atBackupTime := reqifheaderDB.ID
		reqifheaderDB.ID = 0
		query := backRepoREQIFHEADER.db.Create(reqifheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[reqifheaderDB.ID] = reqifheaderDB
		BackRepoREQIFHEADERid_atBckpTime_newID[reqifheaderDB_ID_atBackupTime] = reqifheaderDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQIFHEADER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQIFHEADER>id_atBckpTime_newID
// to compute new index
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) RestorePhaseTwo() {

	for _, reqifheaderDB := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB {

		// next line of code is to avert unused variable compilation error
		_ = reqifheaderDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoREQIFHEADER.db.Model(reqifheaderDB).Updates(*reqifheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQIFHEADER.ResetReversePointers commits all staged instances of REQIFHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, reqifheader := range backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr {
		backRepoREQIFHEADER.ResetReversePointersInstance(backRepo, idx, reqifheader)
	}

	return
}

func (backRepoREQIFHEADER *BackRepoREQIFHEADERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, reqifheader *models.REQIFHEADER) (Error error) {

	// fetch matching reqifheaderDB
	if reqifheaderDB, ok := backRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERDB[idx]; ok {
		_ = reqifheaderDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQIFHEADERid_atBckpTime_newID map[uint]uint
