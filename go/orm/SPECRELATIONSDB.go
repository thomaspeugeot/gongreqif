// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECRELATIONS_sql sql.NullBool
var dummy_SPECRELATIONS_time time.Duration
var dummy_SPECRELATIONS_sort sort.Float64Slice

// SPECRELATIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specrelationsAPI
type SPECRELATIONSAPI struct {
	gorm.Model

	models.SPECRELATIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECRELATIONSPointersEncoding SPECRELATIONSPointersEncoding
}

// SPECRELATIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECRELATIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SPECRELATIONSDB describes a specrelations in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specrelationsDB
type SPECRELATIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specrelationsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECRELATIONSPointersEncoding
}

// SPECRELATIONSDBs arrays specrelationsDBs
// swagger:response specrelationsDBsResponse
type SPECRELATIONSDBs []SPECRELATIONSDB

// SPECRELATIONSDBResponse provides response
// swagger:response specrelationsDBResponse
type SPECRELATIONSDBResponse struct {
	SPECRELATIONSDB
}

// SPECRELATIONSWOP is a SPECRELATIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECRELATIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECRELATIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECRELATIONSStruct struct {
	// stores SPECRELATIONSDB according to their gorm ID
	Map_SPECRELATIONSDBID_SPECRELATIONSDB map[uint]*SPECRELATIONSDB

	// stores SPECRELATIONSDB ID according to SPECRELATIONS address
	Map_SPECRELATIONSPtr_SPECRELATIONSDBID map[*models.SPECRELATIONS]uint

	// stores SPECRELATIONS according to their gorm ID
	Map_SPECRELATIONSDBID_SPECRELATIONSPtr map[uint]*models.SPECRELATIONS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECRELATIONS.stage
	return
}

func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) GetDB() *gorm.DB {
	return backRepoSPECRELATIONS.db
}

// GetSPECRELATIONSDBFromSPECRELATIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) GetSPECRELATIONSDBFromSPECRELATIONSPtr(specrelations *models.SPECRELATIONS) (specrelationsDB *SPECRELATIONSDB) {
	id := backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]
	specrelationsDB = backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[id]
	return
}

// BackRepoSPECRELATIONS.CommitPhaseOne commits all staged instances of SPECRELATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specrelations := range stage.SPECRELATIONSs {
		backRepoSPECRELATIONS.CommitPhaseOneInstance(specrelations)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specrelations := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr {
		if _, ok := stage.SPECRELATIONSs[specrelations]; !ok {
			backRepoSPECRELATIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECRELATIONS.CommitDeleteInstance commits deletion of SPECRELATIONS to the BackRepo
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	specrelations := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[id]

	// specrelations is not staged anymore, remove specrelationsDB
	specrelationsDB := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[id]
	query := backRepoSPECRELATIONS.db.Unscoped().Delete(&specrelationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID, specrelations)
	delete(backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr, id)
	delete(backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB, id)

	return
}

// BackRepoSPECRELATIONS.CommitPhaseOneInstance commits specrelations staged instances of SPECRELATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CommitPhaseOneInstance(specrelations *models.SPECRELATIONS) (Error error) {

	// check if the specrelations is not commited yet
	if _, ok := backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]; ok {
		return
	}

	// initiate specrelations
	var specrelationsDB SPECRELATIONSDB
	specrelationsDB.CopyBasicFieldsFromSPECRELATIONS(specrelations)

	query := backRepoSPECRELATIONS.db.Create(&specrelationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations] = specrelationsDB.ID
	backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[specrelationsDB.ID] = specrelations
	backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[specrelationsDB.ID] = &specrelationsDB

	return
}

// BackRepoSPECRELATIONS.CommitPhaseTwo commits all staged instances of SPECRELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelations := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr {
		backRepoSPECRELATIONS.CommitPhaseTwoInstance(backRepo, idx, specrelations)
	}

	return
}

// BackRepoSPECRELATIONS.CommitPhaseTwoInstance commits {{structname }} of models.SPECRELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specrelations *models.SPECRELATIONS) (Error error) {

	// fetch matching specrelationsDB
	if specrelationsDB, ok := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[idx]; ok {

		specrelationsDB.CopyBasicFieldsFromSPECRELATIONS(specrelations)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSPECRELATIONS.db.Save(&specrelationsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECRELATIONS intance %s", specrelations.Name))
		return err
	}

	return
}

// BackRepoSPECRELATIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CheckoutPhaseOne() (Error error) {

	specrelationsDBArray := make([]SPECRELATIONSDB, 0)
	query := backRepoSPECRELATIONS.db.Find(&specrelationsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specrelationsInstancesToBeRemovedFromTheStage := make(map[*models.SPECRELATIONS]any)
	for key, value := range backRepoSPECRELATIONS.stage.SPECRELATIONSs {
		specrelationsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specrelationsDB := range specrelationsDBArray {
		backRepoSPECRELATIONS.CheckoutPhaseOneInstance(&specrelationsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specrelations, ok := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[specrelationsDB.ID]
		if ok {
			delete(specrelationsInstancesToBeRemovedFromTheStage, specrelations)
		}
	}

	// remove from stage and back repo's 3 maps all specrelationss that are not in the checkout
	for specrelations := range specrelationsInstancesToBeRemovedFromTheStage {
		specrelations.Unstage(backRepoSPECRELATIONS.GetStage())

		// remove instance from the back repo 3 maps
		specrelationsID := backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]
		delete(backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID, specrelations)
		delete(backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB, specrelationsID)
		delete(backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr, specrelationsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specrelationsDB that has been found in the DB, updates the backRepo and stages the
// models version of the specrelationsDB
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CheckoutPhaseOneInstance(specrelationsDB *SPECRELATIONSDB) (Error error) {

	specrelations, ok := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[specrelationsDB.ID]
	if !ok {
		specrelations = new(models.SPECRELATIONS)

		backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[specrelationsDB.ID] = specrelations
		backRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations] = specrelationsDB.ID

		// append model store with the new element
		specrelations.Name = specrelationsDB.Name_Data.String
		specrelations.Stage(backRepoSPECRELATIONS.GetStage())
	}
	specrelationsDB.CopyBasicFieldsToSPECRELATIONS(specrelations)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specrelations.Stage(backRepoSPECRELATIONS.GetStage())

	// preserve pointer to specrelationsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECRELATIONSDBID_SPECRELATIONSDB)[specrelationsDB hold variable pointers
	specrelationsDB_Data := *specrelationsDB
	preservedPtrToSPECRELATIONS := &specrelationsDB_Data
	backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[specrelationsDB.ID] = preservedPtrToSPECRELATIONS

	return
}

// BackRepoSPECRELATIONS.CheckoutPhaseTwo Checkouts all staged instances of SPECRELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specrelationsDB := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB {
		backRepoSPECRELATIONS.CheckoutPhaseTwoInstance(backRepo, specrelationsDB)
	}
	return
}

// BackRepoSPECRELATIONS.CheckoutPhaseTwoInstance Checkouts staged instances of SPECRELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specrelationsDB *SPECRELATIONSDB) (Error error) {

	specrelations := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[specrelationsDB.ID]

	specrelationsDB.DecodePointers(backRepo, specrelations)

	return
}

func (specrelationsDB *SPECRELATIONSDB) DecodePointers(backRepo *BackRepoStruct, specrelations *models.SPECRELATIONS) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSPECRELATIONS allows commit of a single specrelations (if already staged)
func (backRepo *BackRepoStruct) CommitSPECRELATIONS(specrelations *models.SPECRELATIONS) {
	backRepo.BackRepoSPECRELATIONS.CommitPhaseOneInstance(specrelations)
	if id, ok := backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]; ok {
		backRepo.BackRepoSPECRELATIONS.CommitPhaseTwoInstance(backRepo, id, specrelations)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECRELATIONS allows checkout of a single specrelations (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECRELATIONS(specrelations *models.SPECRELATIONS) {
	// check if the specrelations is staged
	if _, ok := backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]; ok {

		if id, ok := backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[specrelations]; ok {
			var specrelationsDB SPECRELATIONSDB
			specrelationsDB.ID = id

			if err := backRepo.BackRepoSPECRELATIONS.db.First(&specrelationsDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECRELATIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECRELATIONS.CheckoutPhaseOneInstance(&specrelationsDB)
			backRepo.BackRepoSPECRELATIONS.CheckoutPhaseTwoInstance(backRepo, &specrelationsDB)
		}
	}
}

// CopyBasicFieldsFromSPECRELATIONS
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsFromSPECRELATIONS(specrelations *models.SPECRELATIONS) {
	// insertion point for fields commit

	specrelationsDB.Name_Data.String = specrelations.Name
	specrelationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATIONS_WOP
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsFromSPECRELATIONS_WOP(specrelations *models.SPECRELATIONS_WOP) {
	// insertion point for fields commit

	specrelationsDB.Name_Data.String = specrelations.Name
	specrelationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATIONSWOP
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsFromSPECRELATIONSWOP(specrelations *SPECRELATIONSWOP) {
	// insertion point for fields commit

	specrelationsDB.Name_Data.String = specrelations.Name
	specrelationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECRELATIONS
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsToSPECRELATIONS(specrelations *models.SPECRELATIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelations.Name = specrelationsDB.Name_Data.String
}

// CopyBasicFieldsToSPECRELATIONS_WOP
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsToSPECRELATIONS_WOP(specrelations *models.SPECRELATIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelations.Name = specrelationsDB.Name_Data.String
}

// CopyBasicFieldsToSPECRELATIONSWOP
func (specrelationsDB *SPECRELATIONSDB) CopyBasicFieldsToSPECRELATIONSWOP(specrelations *SPECRELATIONSWOP) {
	specrelations.ID = int(specrelationsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specrelations.Name = specrelationsDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECRELATIONSDB instances in the backrepo
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECRELATIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONSDB, 0)
	for _, specrelationsDB := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB {
		forBackup = append(forBackup, specrelationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECRELATIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECRELATIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECRELATIONSDB instances in the backrepo
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONSDB, 0)
	for _, specrelationsDB := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB {
		forBackup = append(forBackup, specrelationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECRELATIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECRELATIONS_Fields, -1)
	for _, specrelationsDB := range forBackup {

		var specrelationsWOP SPECRELATIONSWOP
		specrelationsDB.CopyBasicFieldsToSPECRELATIONSWOP(&specrelationsWOP)

		row := sh.AddRow()
		row.WriteStruct(&specrelationsWOP, -1)
	}
}

// RestoreXL from the "SPECRELATIONS" sheet all SPECRELATIONSDB instances
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECRELATIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECRELATIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECRELATIONS.rowVisitorSPECRELATIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) rowVisitorSPECRELATIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specrelationsWOP SPECRELATIONSWOP
		row.ReadStruct(&specrelationsWOP)

		// add the unmarshalled struct to the stage
		specrelationsDB := new(SPECRELATIONSDB)
		specrelationsDB.CopyBasicFieldsFromSPECRELATIONSWOP(&specrelationsWOP)

		specrelationsDB_ID_atBackupTime := specrelationsDB.ID
		specrelationsDB.ID = 0
		query := backRepoSPECRELATIONS.db.Create(specrelationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[specrelationsDB.ID] = specrelationsDB
		BackRepoSPECRELATIONSid_atBckpTime_newID[specrelationsDB_ID_atBackupTime] = specrelationsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECRELATIONSDB.json" in dirPath that stores an array
// of SPECRELATIONSDB and stores it in the database
// the map BackRepoSPECRELATIONSid_atBckpTime_newID is updated accordingly
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECRELATIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECRELATIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECRELATIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECRELATIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECRELATIONSDBID_SPECRELATIONSDB
	for _, specrelationsDB := range forRestore {

		specrelationsDB_ID_atBackupTime := specrelationsDB.ID
		specrelationsDB.ID = 0
		query := backRepoSPECRELATIONS.db.Create(specrelationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[specrelationsDB.ID] = specrelationsDB
		BackRepoSPECRELATIONSid_atBckpTime_newID[specrelationsDB_ID_atBackupTime] = specrelationsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECRELATIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECRELATIONS>id_atBckpTime_newID
// to compute new index
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) RestorePhaseTwo() {

	for _, specrelationsDB := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = specrelationsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECRELATIONS.db.Model(specrelationsDB).Updates(*specrelationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECRELATIONS.ResetReversePointers commits all staged instances of SPECRELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelations := range backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr {
		backRepoSPECRELATIONS.ResetReversePointersInstance(backRepo, idx, specrelations)
	}

	return
}

func (backRepoSPECRELATIONS *BackRepoSPECRELATIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specrelations *models.SPECRELATIONS) (Error error) {

	// fetch matching specrelationsDB
	if specrelationsDB, ok := backRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSDB[idx]; ok {
		_ = specrelationsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECRELATIONSid_atBckpTime_newID map[uint]uint
