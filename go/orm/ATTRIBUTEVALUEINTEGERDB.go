// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEVALUEINTEGER_sql sql.NullBool
var dummy_ATTRIBUTEVALUEINTEGER_time time.Duration
var dummy_ATTRIBUTEVALUEINTEGER_sort sort.Float64Slice

// ATTRIBUTEVALUEINTEGERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributevalueintegerAPI
type ATTRIBUTEVALUEINTEGERAPI struct {
	gorm.Model

	models.ATTRIBUTEVALUEINTEGER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEVALUEINTEGERPointersEncoding ATTRIBUTEVALUEINTEGERPointersEncoding
}

// ATTRIBUTEVALUEINTEGERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEVALUEINTEGERPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFINITION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFINITIONID sql.NullInt64
}

// ATTRIBUTEVALUEINTEGERDB describes a attributevalueinteger in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributevalueintegerDB
type ATTRIBUTEVALUEINTEGERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributevalueintegerDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributevalueintegerDB.THEVALUEAttr
	THEVALUEAttr_Data sql.NullInt64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEVALUEINTEGERPointersEncoding
}

// ATTRIBUTEVALUEINTEGERDBs arrays attributevalueintegerDBs
// swagger:response attributevalueintegerDBsResponse
type ATTRIBUTEVALUEINTEGERDBs []ATTRIBUTEVALUEINTEGERDB

// ATTRIBUTEVALUEINTEGERDBResponse provides response
// swagger:response attributevalueintegerDBResponse
type ATTRIBUTEVALUEINTEGERDBResponse struct {
	ATTRIBUTEVALUEINTEGERDB
}

// ATTRIBUTEVALUEINTEGERWOP is a ATTRIBUTEVALUEINTEGER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEVALUEINTEGERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	THEVALUEAttr int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEVALUEINTEGER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"THEVALUEAttr",
}

type BackRepoATTRIBUTEVALUEINTEGERStruct struct {
	// stores ATTRIBUTEVALUEINTEGERDB according to their gorm ID
	Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB map[uint]*ATTRIBUTEVALUEINTEGERDB

	// stores ATTRIBUTEVALUEINTEGERDB ID according to ATTRIBUTEVALUEINTEGER address
	Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID map[*models.ATTRIBUTEVALUEINTEGER]uint

	// stores ATTRIBUTEVALUEINTEGER according to their gorm ID
	Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr map[uint]*models.ATTRIBUTEVALUEINTEGER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEVALUEINTEGER.stage
	return
}

func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEVALUEINTEGER.db
}

// GetATTRIBUTEVALUEINTEGERDBFromATTRIBUTEVALUEINTEGERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) GetATTRIBUTEVALUEINTEGERDBFromATTRIBUTEVALUEINTEGERPtr(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) {
	id := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]
	attributevalueintegerDB = backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[id]
	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseOne commits all staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributevalueinteger := range stage.ATTRIBUTEVALUEINTEGERs {
		backRepoATTRIBUTEVALUEINTEGER.CommitPhaseOneInstance(attributevalueinteger)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributevalueinteger := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr {
		if _, ok := stage.ATTRIBUTEVALUEINTEGERs[attributevalueinteger]; !ok {
			backRepoATTRIBUTEVALUEINTEGER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CommitDeleteInstance commits deletion of ATTRIBUTEVALUEINTEGER to the BackRepo
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CommitDeleteInstance(id uint) (Error error) {

	attributevalueinteger := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[id]

	// attributevalueinteger is not staged anymore, remove attributevalueintegerDB
	attributevalueintegerDB := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[id]
	query := backRepoATTRIBUTEVALUEINTEGER.db.Unscoped().Delete(&attributevalueintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID, attributevalueinteger)
	delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr, id)
	delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB, id)

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseOneInstance commits attributevalueinteger staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CommitPhaseOneInstance(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) (Error error) {

	// check if the attributevalueinteger is not commited yet
	if _, ok := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]; ok {
		return
	}

	// initiate attributevalueinteger
	var attributevalueintegerDB ATTRIBUTEVALUEINTEGERDB
	attributevalueintegerDB.CopyBasicFieldsFromATTRIBUTEVALUEINTEGER(attributevalueinteger)

	query := backRepoATTRIBUTEVALUEINTEGER.db.Create(&attributevalueintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger] = attributevalueintegerDB.ID
	backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[attributevalueintegerDB.ID] = attributevalueinteger
	backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[attributevalueintegerDB.ID] = &attributevalueintegerDB

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseTwo commits all staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueinteger := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr {
		backRepoATTRIBUTEVALUEINTEGER.CommitPhaseTwoInstance(backRepo, idx, attributevalueinteger)
	}

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) (Error error) {

	// fetch matching attributevalueintegerDB
	if attributevalueintegerDB, ok := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[idx]; ok {

		attributevalueintegerDB.CopyBasicFieldsFromATTRIBUTEVALUEINTEGER(attributevalueinteger)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributevalueinteger.DEFINITION translates to updating the attributevalueinteger.DEFINITIONID
		attributevalueintegerDB.DEFINITIONID.Valid = true // allow for a 0 value (nil association)
		if attributevalueinteger.DEFINITION != nil {
			if DEFINITIONId, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[attributevalueinteger.DEFINITION]; ok {
				attributevalueintegerDB.DEFINITIONID.Int64 = int64(DEFINITIONId)
				attributevalueintegerDB.DEFINITIONID.Valid = true
			}
		} else {
			attributevalueintegerDB.DEFINITIONID.Int64 = 0
			attributevalueintegerDB.DEFINITIONID.Valid = true
		}

		query := backRepoATTRIBUTEVALUEINTEGER.db.Save(&attributevalueintegerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEVALUEINTEGER intance %s", attributevalueinteger.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CheckoutPhaseOne() (Error error) {

	attributevalueintegerDBArray := make([]ATTRIBUTEVALUEINTEGERDB, 0)
	query := backRepoATTRIBUTEVALUEINTEGER.db.Find(&attributevalueintegerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributevalueintegerInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEVALUEINTEGER]any)
	for key, value := range backRepoATTRIBUTEVALUEINTEGER.stage.ATTRIBUTEVALUEINTEGERs {
		attributevalueintegerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributevalueintegerDB := range attributevalueintegerDBArray {
		backRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseOneInstance(&attributevalueintegerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributevalueinteger, ok := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[attributevalueintegerDB.ID]
		if ok {
			delete(attributevalueintegerInstancesToBeRemovedFromTheStage, attributevalueinteger)
		}
	}

	// remove from stage and back repo's 3 maps all attributevalueintegers that are not in the checkout
	for attributevalueinteger := range attributevalueintegerInstancesToBeRemovedFromTheStage {
		attributevalueinteger.Unstage(backRepoATTRIBUTEVALUEINTEGER.GetStage())

		// remove instance from the back repo 3 maps
		attributevalueintegerID := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]
		delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID, attributevalueinteger)
		delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB, attributevalueintegerID)
		delete(backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr, attributevalueintegerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributevalueintegerDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributevalueintegerDB
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CheckoutPhaseOneInstance(attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) (Error error) {

	attributevalueinteger, ok := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[attributevalueintegerDB.ID]
	if !ok {
		attributevalueinteger = new(models.ATTRIBUTEVALUEINTEGER)

		backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[attributevalueintegerDB.ID] = attributevalueinteger
		backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger] = attributevalueintegerDB.ID

		// append model store with the new element
		attributevalueinteger.Name = attributevalueintegerDB.Name_Data.String
		attributevalueinteger.Stage(backRepoATTRIBUTEVALUEINTEGER.GetStage())
	}
	attributevalueintegerDB.CopyBasicFieldsToATTRIBUTEVALUEINTEGER(attributevalueinteger)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributevalueinteger.Stage(backRepoATTRIBUTEVALUEINTEGER.GetStage())

	// preserve pointer to attributevalueintegerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB)[attributevalueintegerDB hold variable pointers
	attributevalueintegerDB_Data := *attributevalueintegerDB
	preservedPtrToATTRIBUTEVALUEINTEGER := &attributevalueintegerDB_Data
	backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[attributevalueintegerDB.ID] = preservedPtrToATTRIBUTEVALUEINTEGER

	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributevalueintegerDB := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB {
		backRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseTwoInstance(backRepo, attributevalueintegerDB)
	}
	return
}

// BackRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) (Error error) {

	attributevalueinteger := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr[attributevalueintegerDB.ID]

	attributevalueintegerDB.DecodePointers(backRepo, attributevalueinteger)

	return
}

func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) DecodePointers(backRepo *BackRepoStruct, attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) {

	// insertion point for checkout of pointer encoding
	// DEFINITION field
	attributevalueinteger.DEFINITION = nil
	if attributevalueintegerDB.DEFINITIONID.Int64 != 0 {
		attributevalueinteger.DEFINITION = backRepo.BackRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[uint(attributevalueintegerDB.DEFINITIONID.Int64)]
	}
	return
}

// CommitATTRIBUTEVALUEINTEGER allows commit of a single attributevalueinteger (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEVALUEINTEGER(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) {
	backRepo.BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseOneInstance(attributevalueinteger)
	if id, ok := backRepo.BackRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]; ok {
		backRepo.BackRepoATTRIBUTEVALUEINTEGER.CommitPhaseTwoInstance(backRepo, id, attributevalueinteger)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEVALUEINTEGER allows checkout of a single attributevalueinteger (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEVALUEINTEGER(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) {
	// check if the attributevalueinteger is staged
	if _, ok := backRepo.BackRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERPtr_ATTRIBUTEVALUEINTEGERDBID[attributevalueinteger]; ok {
			var attributevalueintegerDB ATTRIBUTEVALUEINTEGERDB
			attributevalueintegerDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEVALUEINTEGER.db.First(&attributevalueintegerDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEVALUEINTEGER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseOneInstance(&attributevalueintegerDB)
			backRepo.BackRepoATTRIBUTEVALUEINTEGER.CheckoutPhaseTwoInstance(backRepo, &attributevalueintegerDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEVALUEINTEGER
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsFromATTRIBUTEVALUEINTEGER(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) {
	// insertion point for fields commit

	attributevalueintegerDB.Name_Data.String = attributevalueinteger.Name
	attributevalueintegerDB.Name_Data.Valid = true

	attributevalueintegerDB.THEVALUEAttr_Data.Int64 = int64(attributevalueinteger.THEVALUEAttr)
	attributevalueintegerDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEINTEGER_WOP
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsFromATTRIBUTEVALUEINTEGER_WOP(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER_WOP) {
	// insertion point for fields commit

	attributevalueintegerDB.Name_Data.String = attributevalueinteger.Name
	attributevalueintegerDB.Name_Data.Valid = true

	attributevalueintegerDB.THEVALUEAttr_Data.Int64 = int64(attributevalueinteger.THEVALUEAttr)
	attributevalueintegerDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEINTEGERWOP
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsFromATTRIBUTEVALUEINTEGERWOP(attributevalueinteger *ATTRIBUTEVALUEINTEGERWOP) {
	// insertion point for fields commit

	attributevalueintegerDB.Name_Data.String = attributevalueinteger.Name
	attributevalueintegerDB.Name_Data.Valid = true

	attributevalueintegerDB.THEVALUEAttr_Data.Int64 = int64(attributevalueinteger.THEVALUEAttr)
	attributevalueintegerDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEVALUEINTEGER
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsToATTRIBUTEVALUEINTEGER(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueinteger.Name = attributevalueintegerDB.Name_Data.String
	attributevalueinteger.THEVALUEAttr = int(attributevalueintegerDB.THEVALUEAttr_Data.Int64)
}

// CopyBasicFieldsToATTRIBUTEVALUEINTEGER_WOP
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsToATTRIBUTEVALUEINTEGER_WOP(attributevalueinteger *models.ATTRIBUTEVALUEINTEGER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueinteger.Name = attributevalueintegerDB.Name_Data.String
	attributevalueinteger.THEVALUEAttr = int(attributevalueintegerDB.THEVALUEAttr_Data.Int64)
}

// CopyBasicFieldsToATTRIBUTEVALUEINTEGERWOP
func (attributevalueintegerDB *ATTRIBUTEVALUEINTEGERDB) CopyBasicFieldsToATTRIBUTEVALUEINTEGERWOP(attributevalueinteger *ATTRIBUTEVALUEINTEGERWOP) {
	attributevalueinteger.ID = int(attributevalueintegerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributevalueinteger.Name = attributevalueintegerDB.Name_Data.String
	attributevalueinteger.THEVALUEAttr = int(attributevalueintegerDB.THEVALUEAttr_Data.Int64)
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEINTEGERDB instances in the backrepo
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEINTEGERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEINTEGERDB, 0)
	for _, attributevalueintegerDB := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB {
		forBackup = append(forBackup, attributevalueintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEVALUEINTEGER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEVALUEINTEGER file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEINTEGERDB instances in the backrepo
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEINTEGERDB, 0)
	for _, attributevalueintegerDB := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB {
		forBackup = append(forBackup, attributevalueintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEVALUEINTEGER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEVALUEINTEGER_Fields, -1)
	for _, attributevalueintegerDB := range forBackup {

		var attributevalueintegerWOP ATTRIBUTEVALUEINTEGERWOP
		attributevalueintegerDB.CopyBasicFieldsToATTRIBUTEVALUEINTEGERWOP(&attributevalueintegerWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributevalueintegerWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEVALUEINTEGER" sheet all ATTRIBUTEVALUEINTEGERDB instances
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEVALUEINTEGER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEVALUEINTEGER.rowVisitorATTRIBUTEVALUEINTEGER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) rowVisitorATTRIBUTEVALUEINTEGER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributevalueintegerWOP ATTRIBUTEVALUEINTEGERWOP
		row.ReadStruct(&attributevalueintegerWOP)

		// add the unmarshalled struct to the stage
		attributevalueintegerDB := new(ATTRIBUTEVALUEINTEGERDB)
		attributevalueintegerDB.CopyBasicFieldsFromATTRIBUTEVALUEINTEGERWOP(&attributevalueintegerWOP)

		attributevalueintegerDB_ID_atBackupTime := attributevalueintegerDB.ID
		attributevalueintegerDB.ID = 0
		query := backRepoATTRIBUTEVALUEINTEGER.db.Create(attributevalueintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[attributevalueintegerDB.ID] = attributevalueintegerDB
		BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID[attributevalueintegerDB_ID_atBackupTime] = attributevalueintegerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEVALUEINTEGERDB.json" in dirPath that stores an array
// of ATTRIBUTEVALUEINTEGERDB and stores it in the database
// the map BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEINTEGERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEVALUEINTEGER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEVALUEINTEGERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB
	for _, attributevalueintegerDB := range forRestore {

		attributevalueintegerDB_ID_atBackupTime := attributevalueintegerDB.ID
		attributevalueintegerDB.ID = 0
		query := backRepoATTRIBUTEVALUEINTEGER.db.Create(attributevalueintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[attributevalueintegerDB.ID] = attributevalueintegerDB
		BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID[attributevalueintegerDB_ID_atBackupTime] = attributevalueintegerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEVALUEINTEGER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEVALUEINTEGER>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) RestorePhaseTwo() {

	for _, attributevalueintegerDB := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB {

		// next line of code is to avert unused variable compilation error
		_ = attributevalueintegerDB

		// insertion point for reindexing pointers encoding
		// reindexing DEFINITION field
		if attributevalueintegerDB.DEFINITIONID.Int64 != 0 {
			attributevalueintegerDB.DEFINITIONID.Int64 = int64(BackRepoDEFINITIONid_atBckpTime_newID[uint(attributevalueintegerDB.DEFINITIONID.Int64)])
			attributevalueintegerDB.DEFINITIONID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEVALUEINTEGER.db.Model(attributevalueintegerDB).Updates(*attributevalueintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEVALUEINTEGER.ResetReversePointers commits all staged instances of ATTRIBUTEVALUEINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevalueinteger := range backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERPtr {
		backRepoATTRIBUTEVALUEINTEGER.ResetReversePointersInstance(backRepo, idx, attributevalueinteger)
	}

	return
}

func (backRepoATTRIBUTEVALUEINTEGER *BackRepoATTRIBUTEVALUEINTEGERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributevalueinteger *models.ATTRIBUTEVALUEINTEGER) (Error error) {

	// fetch matching attributevalueintegerDB
	if attributevalueintegerDB, ok := backRepoATTRIBUTEVALUEINTEGER.Map_ATTRIBUTEVALUEINTEGERDBID_ATTRIBUTEVALUEINTEGERDB[idx]; ok {
		_ = attributevalueintegerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEVALUEINTEGERid_atBckpTime_newID map[uint]uint
