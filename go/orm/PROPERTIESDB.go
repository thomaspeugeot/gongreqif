// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_PROPERTIES_sql sql.NullBool
var dummy_PROPERTIES_time time.Duration
var dummy_PROPERTIES_sort sort.Float64Slice

// PROPERTIESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model propertiesAPI
type PROPERTIESAPI struct {
	gorm.Model

	models.PROPERTIES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PROPERTIESPointersEncoding PROPERTIESPointersEncoding
}

// PROPERTIESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PROPERTIESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field EMBEDDEDVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EMBEDDEDVALUEID sql.NullInt64
}

// PROPERTIESDB describes a properties in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model propertiesDB
type PROPERTIESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field propertiesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PROPERTIESPointersEncoding
}

// PROPERTIESDBs arrays propertiesDBs
// swagger:response propertiesDBsResponse
type PROPERTIESDBs []PROPERTIESDB

// PROPERTIESDBResponse provides response
// swagger:response propertiesDBResponse
type PROPERTIESDBResponse struct {
	PROPERTIESDB
}

// PROPERTIESWOP is a PROPERTIES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PROPERTIESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var PROPERTIES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPROPERTIESStruct struct {
	// stores PROPERTIESDB according to their gorm ID
	Map_PROPERTIESDBID_PROPERTIESDB map[uint]*PROPERTIESDB

	// stores PROPERTIESDB ID according to PROPERTIES address
	Map_PROPERTIESPtr_PROPERTIESDBID map[*models.PROPERTIES]uint

	// stores PROPERTIES according to their gorm ID
	Map_PROPERTIESDBID_PROPERTIESPtr map[uint]*models.PROPERTIES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPROPERTIES.stage
	return
}

func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) GetDB() *gorm.DB {
	return backRepoPROPERTIES.db
}

// GetPROPERTIESDBFromPROPERTIESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) GetPROPERTIESDBFromPROPERTIESPtr(properties *models.PROPERTIES) (propertiesDB *PROPERTIESDB) {
	id := backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]
	propertiesDB = backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[id]
	return
}

// BackRepoPROPERTIES.CommitPhaseOne commits all staged instances of PROPERTIES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for properties := range stage.PROPERTIESs {
		backRepoPROPERTIES.CommitPhaseOneInstance(properties)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, properties := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr {
		if _, ok := stage.PROPERTIESs[properties]; !ok {
			backRepoPROPERTIES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPROPERTIES.CommitDeleteInstance commits deletion of PROPERTIES to the BackRepo
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CommitDeleteInstance(id uint) (Error error) {

	properties := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[id]

	// properties is not staged anymore, remove propertiesDB
	propertiesDB := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[id]
	query := backRepoPROPERTIES.db.Unscoped().Delete(&propertiesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID, properties)
	delete(backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr, id)
	delete(backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB, id)

	return
}

// BackRepoPROPERTIES.CommitPhaseOneInstance commits properties staged instances of PROPERTIES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CommitPhaseOneInstance(properties *models.PROPERTIES) (Error error) {

	// check if the properties is not commited yet
	if _, ok := backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]; ok {
		return
	}

	// initiate properties
	var propertiesDB PROPERTIESDB
	propertiesDB.CopyBasicFieldsFromPROPERTIES(properties)

	query := backRepoPROPERTIES.db.Create(&propertiesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties] = propertiesDB.ID
	backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[propertiesDB.ID] = properties
	backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[propertiesDB.ID] = &propertiesDB

	return
}

// BackRepoPROPERTIES.CommitPhaseTwo commits all staged instances of PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, properties := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr {
		backRepoPROPERTIES.CommitPhaseTwoInstance(backRepo, idx, properties)
	}

	return
}

// BackRepoPROPERTIES.CommitPhaseTwoInstance commits {{structname }} of models.PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, properties *models.PROPERTIES) (Error error) {

	// fetch matching propertiesDB
	if propertiesDB, ok := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[idx]; ok {

		propertiesDB.CopyBasicFieldsFromPROPERTIES(properties)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value properties.EMBEDDEDVALUE translates to updating the properties.EMBEDDEDVALUEID
		propertiesDB.EMBEDDEDVALUEID.Valid = true // allow for a 0 value (nil association)
		if properties.EMBEDDEDVALUE != nil {
			if EMBEDDEDVALUEId, ok := backRepo.BackRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[properties.EMBEDDEDVALUE]; ok {
				propertiesDB.EMBEDDEDVALUEID.Int64 = int64(EMBEDDEDVALUEId)
				propertiesDB.EMBEDDEDVALUEID.Valid = true
			}
		} else {
			propertiesDB.EMBEDDEDVALUEID.Int64 = 0
			propertiesDB.EMBEDDEDVALUEID.Valid = true
		}

		query := backRepoPROPERTIES.db.Save(&propertiesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown PROPERTIES intance %s", properties.Name))
		return err
	}

	return
}

// BackRepoPROPERTIES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CheckoutPhaseOne() (Error error) {

	propertiesDBArray := make([]PROPERTIESDB, 0)
	query := backRepoPROPERTIES.db.Find(&propertiesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	propertiesInstancesToBeRemovedFromTheStage := make(map[*models.PROPERTIES]any)
	for key, value := range backRepoPROPERTIES.stage.PROPERTIESs {
		propertiesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, propertiesDB := range propertiesDBArray {
		backRepoPROPERTIES.CheckoutPhaseOneInstance(&propertiesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		properties, ok := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[propertiesDB.ID]
		if ok {
			delete(propertiesInstancesToBeRemovedFromTheStage, properties)
		}
	}

	// remove from stage and back repo's 3 maps all propertiess that are not in the checkout
	for properties := range propertiesInstancesToBeRemovedFromTheStage {
		properties.Unstage(backRepoPROPERTIES.GetStage())

		// remove instance from the back repo 3 maps
		propertiesID := backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]
		delete(backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID, properties)
		delete(backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB, propertiesID)
		delete(backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr, propertiesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a propertiesDB that has been found in the DB, updates the backRepo and stages the
// models version of the propertiesDB
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CheckoutPhaseOneInstance(propertiesDB *PROPERTIESDB) (Error error) {

	properties, ok := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[propertiesDB.ID]
	if !ok {
		properties = new(models.PROPERTIES)

		backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[propertiesDB.ID] = properties
		backRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties] = propertiesDB.ID

		// append model store with the new element
		properties.Name = propertiesDB.Name_Data.String
		properties.Stage(backRepoPROPERTIES.GetStage())
	}
	propertiesDB.CopyBasicFieldsToPROPERTIES(properties)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	properties.Stage(backRepoPROPERTIES.GetStage())

	// preserve pointer to propertiesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PROPERTIESDBID_PROPERTIESDB)[propertiesDB hold variable pointers
	propertiesDB_Data := *propertiesDB
	preservedPtrToPROPERTIES := &propertiesDB_Data
	backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[propertiesDB.ID] = preservedPtrToPROPERTIES

	return
}

// BackRepoPROPERTIES.CheckoutPhaseTwo Checkouts all staged instances of PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, propertiesDB := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB {
		backRepoPROPERTIES.CheckoutPhaseTwoInstance(backRepo, propertiesDB)
	}
	return
}

// BackRepoPROPERTIES.CheckoutPhaseTwoInstance Checkouts staged instances of PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, propertiesDB *PROPERTIESDB) (Error error) {

	properties := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[propertiesDB.ID]

	propertiesDB.DecodePointers(backRepo, properties)

	return
}

func (propertiesDB *PROPERTIESDB) DecodePointers(backRepo *BackRepoStruct, properties *models.PROPERTIES) {

	// insertion point for checkout of pointer encoding
	// EMBEDDEDVALUE field
	properties.EMBEDDEDVALUE = nil
	if propertiesDB.EMBEDDEDVALUEID.Int64 != 0 {
		properties.EMBEDDEDVALUE = backRepo.BackRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[uint(propertiesDB.EMBEDDEDVALUEID.Int64)]
	}
	return
}

// CommitPROPERTIES allows commit of a single properties (if already staged)
func (backRepo *BackRepoStruct) CommitPROPERTIES(properties *models.PROPERTIES) {
	backRepo.BackRepoPROPERTIES.CommitPhaseOneInstance(properties)
	if id, ok := backRepo.BackRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]; ok {
		backRepo.BackRepoPROPERTIES.CommitPhaseTwoInstance(backRepo, id, properties)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPROPERTIES allows checkout of a single properties (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPROPERTIES(properties *models.PROPERTIES) {
	// check if the properties is staged
	if _, ok := backRepo.BackRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]; ok {

		if id, ok := backRepo.BackRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[properties]; ok {
			var propertiesDB PROPERTIESDB
			propertiesDB.ID = id

			if err := backRepo.BackRepoPROPERTIES.db.First(&propertiesDB, id).Error; err != nil {
				log.Fatalln("CheckoutPROPERTIES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPROPERTIES.CheckoutPhaseOneInstance(&propertiesDB)
			backRepo.BackRepoPROPERTIES.CheckoutPhaseTwoInstance(backRepo, &propertiesDB)
		}
	}
}

// CopyBasicFieldsFromPROPERTIES
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsFromPROPERTIES(properties *models.PROPERTIES) {
	// insertion point for fields commit

	propertiesDB.Name_Data.String = properties.Name
	propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPROPERTIES_WOP
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsFromPROPERTIES_WOP(properties *models.PROPERTIES_WOP) {
	// insertion point for fields commit

	propertiesDB.Name_Data.String = properties.Name
	propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPROPERTIESWOP
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsFromPROPERTIESWOP(properties *PROPERTIESWOP) {
	// insertion point for fields commit

	propertiesDB.Name_Data.String = properties.Name
	propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPROPERTIES
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsToPROPERTIES(properties *models.PROPERTIES) {
	// insertion point for checkout of basic fields (back repo to stage)
	properties.Name = propertiesDB.Name_Data.String
}

// CopyBasicFieldsToPROPERTIES_WOP
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsToPROPERTIES_WOP(properties *models.PROPERTIES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	properties.Name = propertiesDB.Name_Data.String
}

// CopyBasicFieldsToPROPERTIESWOP
func (propertiesDB *PROPERTIESDB) CopyBasicFieldsToPROPERTIESWOP(properties *PROPERTIESWOP) {
	properties.ID = int(propertiesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	properties.Name = propertiesDB.Name_Data.String
}

// Backup generates a json file from a slice of all PROPERTIESDB instances in the backrepo
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PROPERTIESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PROPERTIESDB, 0)
	for _, propertiesDB := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB {
		forBackup = append(forBackup, propertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json PROPERTIES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json PROPERTIES file", err.Error())
	}
}

// Backup generates a json file from a slice of all PROPERTIESDB instances in the backrepo
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PROPERTIESDB, 0)
	for _, propertiesDB := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB {
		forBackup = append(forBackup, propertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("PROPERTIES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&PROPERTIES_Fields, -1)
	for _, propertiesDB := range forBackup {

		var propertiesWOP PROPERTIESWOP
		propertiesDB.CopyBasicFieldsToPROPERTIESWOP(&propertiesWOP)

		row := sh.AddRow()
		row.WriteStruct(&propertiesWOP, -1)
	}
}

// RestoreXL from the "PROPERTIES" sheet all PROPERTIESDB instances
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPROPERTIESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["PROPERTIES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPROPERTIES.rowVisitorPROPERTIES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) rowVisitorPROPERTIES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var propertiesWOP PROPERTIESWOP
		row.ReadStruct(&propertiesWOP)

		// add the unmarshalled struct to the stage
		propertiesDB := new(PROPERTIESDB)
		propertiesDB.CopyBasicFieldsFromPROPERTIESWOP(&propertiesWOP)

		propertiesDB_ID_atBackupTime := propertiesDB.ID
		propertiesDB.ID = 0
		query := backRepoPROPERTIES.db.Create(propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[propertiesDB.ID] = propertiesDB
		BackRepoPROPERTIESid_atBckpTime_newID[propertiesDB_ID_atBackupTime] = propertiesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PROPERTIESDB.json" in dirPath that stores an array
// of PROPERTIESDB and stores it in the database
// the map BackRepoPROPERTIESid_atBckpTime_newID is updated accordingly
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPROPERTIESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PROPERTIESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json PROPERTIES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PROPERTIESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PROPERTIESDBID_PROPERTIESDB
	for _, propertiesDB := range forRestore {

		propertiesDB_ID_atBackupTime := propertiesDB.ID
		propertiesDB.ID = 0
		query := backRepoPROPERTIES.db.Create(propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[propertiesDB.ID] = propertiesDB
		BackRepoPROPERTIESid_atBckpTime_newID[propertiesDB_ID_atBackupTime] = propertiesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json PROPERTIES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<PROPERTIES>id_atBckpTime_newID
// to compute new index
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) RestorePhaseTwo() {

	for _, propertiesDB := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB {

		// next line of code is to avert unused variable compilation error
		_ = propertiesDB

		// insertion point for reindexing pointers encoding
		// reindexing EMBEDDEDVALUE field
		if propertiesDB.EMBEDDEDVALUEID.Int64 != 0 {
			propertiesDB.EMBEDDEDVALUEID.Int64 = int64(BackRepoEMBEDDEDVALUEid_atBckpTime_newID[uint(propertiesDB.EMBEDDEDVALUEID.Int64)])
			propertiesDB.EMBEDDEDVALUEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoPROPERTIES.db.Model(propertiesDB).Updates(*propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPROPERTIES.ResetReversePointers commits all staged instances of PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, properties := range backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr {
		backRepoPROPERTIES.ResetReversePointersInstance(backRepo, idx, properties)
	}

	return
}

func (backRepoPROPERTIES *BackRepoPROPERTIESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, properties *models.PROPERTIES) (Error error) {

	// fetch matching propertiesDB
	if propertiesDB, ok := backRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESDB[idx]; ok {
		_ = propertiesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPROPERTIESid_atBckpTime_newID map[uint]uint
