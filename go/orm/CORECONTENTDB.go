// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CORECONTENT_sql sql.NullBool
var dummy_CORECONTENT_time time.Duration
var dummy_CORECONTENT_sort sort.Float64Slice

// CORECONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model corecontentAPI
type CORECONTENTAPI struct {
	gorm.Model

	models.CORECONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CORECONTENTPointersEncoding CORECONTENTPointersEncoding
}

// CORECONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CORECONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQIFCONTENT is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	REQIFCONTENTID sql.NullInt64
}

// CORECONTENTDB describes a corecontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model corecontentDB
type CORECONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field corecontentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CORECONTENTPointersEncoding
}

// CORECONTENTDBs arrays corecontentDBs
// swagger:response corecontentDBsResponse
type CORECONTENTDBs []CORECONTENTDB

// CORECONTENTDBResponse provides response
// swagger:response corecontentDBResponse
type CORECONTENTDBResponse struct {
	CORECONTENTDB
}

// CORECONTENTWOP is a CORECONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CORECONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var CORECONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCORECONTENTStruct struct {
	// stores CORECONTENTDB according to their gorm ID
	Map_CORECONTENTDBID_CORECONTENTDB map[uint]*CORECONTENTDB

	// stores CORECONTENTDB ID according to CORECONTENT address
	Map_CORECONTENTPtr_CORECONTENTDBID map[*models.CORECONTENT]uint

	// stores CORECONTENT according to their gorm ID
	Map_CORECONTENTDBID_CORECONTENTPtr map[uint]*models.CORECONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCORECONTENT.stage
	return
}

func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) GetDB() *gorm.DB {
	return backRepoCORECONTENT.db
}

// GetCORECONTENTDBFromCORECONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) GetCORECONTENTDBFromCORECONTENTPtr(corecontent *models.CORECONTENT) (corecontentDB *CORECONTENTDB) {
	id := backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]
	corecontentDB = backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[id]
	return
}

// BackRepoCORECONTENT.CommitPhaseOne commits all staged instances of CORECONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for corecontent := range stage.CORECONTENTs {
		backRepoCORECONTENT.CommitPhaseOneInstance(corecontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, corecontent := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr {
		if _, ok := stage.CORECONTENTs[corecontent]; !ok {
			backRepoCORECONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCORECONTENT.CommitDeleteInstance commits deletion of CORECONTENT to the BackRepo
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	corecontent := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[id]

	// corecontent is not staged anymore, remove corecontentDB
	corecontentDB := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[id]
	query := backRepoCORECONTENT.db.Unscoped().Delete(&corecontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID, corecontent)
	delete(backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr, id)
	delete(backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB, id)

	return
}

// BackRepoCORECONTENT.CommitPhaseOneInstance commits corecontent staged instances of CORECONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CommitPhaseOneInstance(corecontent *models.CORECONTENT) (Error error) {

	// check if the corecontent is not commited yet
	if _, ok := backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]; ok {
		return
	}

	// initiate corecontent
	var corecontentDB CORECONTENTDB
	corecontentDB.CopyBasicFieldsFromCORECONTENT(corecontent)

	query := backRepoCORECONTENT.db.Create(&corecontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent] = corecontentDB.ID
	backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[corecontentDB.ID] = corecontent
	backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[corecontentDB.ID] = &corecontentDB

	return
}

// BackRepoCORECONTENT.CommitPhaseTwo commits all staged instances of CORECONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, corecontent := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr {
		backRepoCORECONTENT.CommitPhaseTwoInstance(backRepo, idx, corecontent)
	}

	return
}

// BackRepoCORECONTENT.CommitPhaseTwoInstance commits {{structname }} of models.CORECONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, corecontent *models.CORECONTENT) (Error error) {

	// fetch matching corecontentDB
	if corecontentDB, ok := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[idx]; ok {

		corecontentDB.CopyBasicFieldsFromCORECONTENT(corecontent)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value corecontent.REQIFCONTENT translates to updating the corecontent.REQIFCONTENTID
		corecontentDB.REQIFCONTENTID.Valid = true // allow for a 0 value (nil association)
		if corecontent.REQIFCONTENT != nil {
			if REQIFCONTENTId, ok := backRepo.BackRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[corecontent.REQIFCONTENT]; ok {
				corecontentDB.REQIFCONTENTID.Int64 = int64(REQIFCONTENTId)
				corecontentDB.REQIFCONTENTID.Valid = true
			}
		} else {
			corecontentDB.REQIFCONTENTID.Int64 = 0
			corecontentDB.REQIFCONTENTID.Valid = true
		}

		query := backRepoCORECONTENT.db.Save(&corecontentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CORECONTENT intance %s", corecontent.Name))
		return err
	}

	return
}

// BackRepoCORECONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CheckoutPhaseOne() (Error error) {

	corecontentDBArray := make([]CORECONTENTDB, 0)
	query := backRepoCORECONTENT.db.Find(&corecontentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	corecontentInstancesToBeRemovedFromTheStage := make(map[*models.CORECONTENT]any)
	for key, value := range backRepoCORECONTENT.stage.CORECONTENTs {
		corecontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, corecontentDB := range corecontentDBArray {
		backRepoCORECONTENT.CheckoutPhaseOneInstance(&corecontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		corecontent, ok := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[corecontentDB.ID]
		if ok {
			delete(corecontentInstancesToBeRemovedFromTheStage, corecontent)
		}
	}

	// remove from stage and back repo's 3 maps all corecontents that are not in the checkout
	for corecontent := range corecontentInstancesToBeRemovedFromTheStage {
		corecontent.Unstage(backRepoCORECONTENT.GetStage())

		// remove instance from the back repo 3 maps
		corecontentID := backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]
		delete(backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID, corecontent)
		delete(backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB, corecontentID)
		delete(backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr, corecontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a corecontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the corecontentDB
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CheckoutPhaseOneInstance(corecontentDB *CORECONTENTDB) (Error error) {

	corecontent, ok := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[corecontentDB.ID]
	if !ok {
		corecontent = new(models.CORECONTENT)

		backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[corecontentDB.ID] = corecontent
		backRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent] = corecontentDB.ID

		// append model store with the new element
		corecontent.Name = corecontentDB.Name_Data.String
		corecontent.Stage(backRepoCORECONTENT.GetStage())
	}
	corecontentDB.CopyBasicFieldsToCORECONTENT(corecontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	corecontent.Stage(backRepoCORECONTENT.GetStage())

	// preserve pointer to corecontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CORECONTENTDBID_CORECONTENTDB)[corecontentDB hold variable pointers
	corecontentDB_Data := *corecontentDB
	preservedPtrToCORECONTENT := &corecontentDB_Data
	backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[corecontentDB.ID] = preservedPtrToCORECONTENT

	return
}

// BackRepoCORECONTENT.CheckoutPhaseTwo Checkouts all staged instances of CORECONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, corecontentDB := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB {
		backRepoCORECONTENT.CheckoutPhaseTwoInstance(backRepo, corecontentDB)
	}
	return
}

// BackRepoCORECONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of CORECONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, corecontentDB *CORECONTENTDB) (Error error) {

	corecontent := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr[corecontentDB.ID]

	corecontentDB.DecodePointers(backRepo, corecontent)

	return
}

func (corecontentDB *CORECONTENTDB) DecodePointers(backRepo *BackRepoStruct, corecontent *models.CORECONTENT) {

	// insertion point for checkout of pointer encoding
	// REQIFCONTENT field
	corecontent.REQIFCONTENT = nil
	if corecontentDB.REQIFCONTENTID.Int64 != 0 {
		corecontent.REQIFCONTENT = backRepo.BackRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[uint(corecontentDB.REQIFCONTENTID.Int64)]
	}
	return
}

// CommitCORECONTENT allows commit of a single corecontent (if already staged)
func (backRepo *BackRepoStruct) CommitCORECONTENT(corecontent *models.CORECONTENT) {
	backRepo.BackRepoCORECONTENT.CommitPhaseOneInstance(corecontent)
	if id, ok := backRepo.BackRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]; ok {
		backRepo.BackRepoCORECONTENT.CommitPhaseTwoInstance(backRepo, id, corecontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCORECONTENT allows checkout of a single corecontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCORECONTENT(corecontent *models.CORECONTENT) {
	// check if the corecontent is staged
	if _, ok := backRepo.BackRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]; ok {

		if id, ok := backRepo.BackRepoCORECONTENT.Map_CORECONTENTPtr_CORECONTENTDBID[corecontent]; ok {
			var corecontentDB CORECONTENTDB
			corecontentDB.ID = id

			if err := backRepo.BackRepoCORECONTENT.db.First(&corecontentDB, id).Error; err != nil {
				log.Fatalln("CheckoutCORECONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCORECONTENT.CheckoutPhaseOneInstance(&corecontentDB)
			backRepo.BackRepoCORECONTENT.CheckoutPhaseTwoInstance(backRepo, &corecontentDB)
		}
	}
}

// CopyBasicFieldsFromCORECONTENT
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsFromCORECONTENT(corecontent *models.CORECONTENT) {
	// insertion point for fields commit

	corecontentDB.Name_Data.String = corecontent.Name
	corecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCORECONTENT_WOP
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsFromCORECONTENT_WOP(corecontent *models.CORECONTENT_WOP) {
	// insertion point for fields commit

	corecontentDB.Name_Data.String = corecontent.Name
	corecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCORECONTENTWOP
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsFromCORECONTENTWOP(corecontent *CORECONTENTWOP) {
	// insertion point for fields commit

	corecontentDB.Name_Data.String = corecontent.Name
	corecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCORECONTENT
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsToCORECONTENT(corecontent *models.CORECONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	corecontent.Name = corecontentDB.Name_Data.String
}

// CopyBasicFieldsToCORECONTENT_WOP
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsToCORECONTENT_WOP(corecontent *models.CORECONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	corecontent.Name = corecontentDB.Name_Data.String
}

// CopyBasicFieldsToCORECONTENTWOP
func (corecontentDB *CORECONTENTDB) CopyBasicFieldsToCORECONTENTWOP(corecontent *CORECONTENTWOP) {
	corecontent.ID = int(corecontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	corecontent.Name = corecontentDB.Name_Data.String
}

// Backup generates a json file from a slice of all CORECONTENTDB instances in the backrepo
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CORECONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CORECONTENTDB, 0)
	for _, corecontentDB := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB {
		forBackup = append(forBackup, corecontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CORECONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CORECONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all CORECONTENTDB instances in the backrepo
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CORECONTENTDB, 0)
	for _, corecontentDB := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB {
		forBackup = append(forBackup, corecontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CORECONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CORECONTENT_Fields, -1)
	for _, corecontentDB := range forBackup {

		var corecontentWOP CORECONTENTWOP
		corecontentDB.CopyBasicFieldsToCORECONTENTWOP(&corecontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&corecontentWOP, -1)
	}
}

// RestoreXL from the "CORECONTENT" sheet all CORECONTENTDB instances
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCORECONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CORECONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCORECONTENT.rowVisitorCORECONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) rowVisitorCORECONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var corecontentWOP CORECONTENTWOP
		row.ReadStruct(&corecontentWOP)

		// add the unmarshalled struct to the stage
		corecontentDB := new(CORECONTENTDB)
		corecontentDB.CopyBasicFieldsFromCORECONTENTWOP(&corecontentWOP)

		corecontentDB_ID_atBackupTime := corecontentDB.ID
		corecontentDB.ID = 0
		query := backRepoCORECONTENT.db.Create(corecontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[corecontentDB.ID] = corecontentDB
		BackRepoCORECONTENTid_atBckpTime_newID[corecontentDB_ID_atBackupTime] = corecontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CORECONTENTDB.json" in dirPath that stores an array
// of CORECONTENTDB and stores it in the database
// the map BackRepoCORECONTENTid_atBckpTime_newID is updated accordingly
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCORECONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CORECONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CORECONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CORECONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CORECONTENTDBID_CORECONTENTDB
	for _, corecontentDB := range forRestore {

		corecontentDB_ID_atBackupTime := corecontentDB.ID
		corecontentDB.ID = 0
		query := backRepoCORECONTENT.db.Create(corecontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[corecontentDB.ID] = corecontentDB
		BackRepoCORECONTENTid_atBckpTime_newID[corecontentDB_ID_atBackupTime] = corecontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CORECONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CORECONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) RestorePhaseTwo() {

	for _, corecontentDB := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = corecontentDB

		// insertion point for reindexing pointers encoding
		// reindexing REQIFCONTENT field
		if corecontentDB.REQIFCONTENTID.Int64 != 0 {
			corecontentDB.REQIFCONTENTID.Int64 = int64(BackRepoREQIFCONTENTid_atBckpTime_newID[uint(corecontentDB.REQIFCONTENTID.Int64)])
			corecontentDB.REQIFCONTENTID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoCORECONTENT.db.Model(corecontentDB).Updates(*corecontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCORECONTENT.ResetReversePointers commits all staged instances of CORECONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, corecontent := range backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTPtr {
		backRepoCORECONTENT.ResetReversePointersInstance(backRepo, idx, corecontent)
	}

	return
}

func (backRepoCORECONTENT *BackRepoCORECONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, corecontent *models.CORECONTENT) (Error error) {

	// fetch matching corecontentDB
	if corecontentDB, ok := backRepoCORECONTENT.Map_CORECONTENTDBID_CORECONTENTDB[idx]; ok {
		_ = corecontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCORECONTENTid_atBckpTime_newID map[uint]uint
