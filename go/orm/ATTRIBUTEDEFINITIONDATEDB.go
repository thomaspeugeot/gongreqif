// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEDEFINITIONDATE_sql sql.NullBool
var dummy_ATTRIBUTEDEFINITIONDATE_time time.Duration
var dummy_ATTRIBUTEDEFINITIONDATE_sort sort.Float64Slice

// ATTRIBUTEDEFINITIONDATEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributedefinitiondateAPI
type ATTRIBUTEDEFINITIONDATEAPI struct {
	gorm.Model

	models.ATTRIBUTEDEFINITIONDATE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEDEFINITIONDATEPointersEncoding ATTRIBUTEDEFINITIONDATEPointersEncoding
}

// ATTRIBUTEDEFINITIONDATEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEDEFINITIONDATEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field DEFAULTVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFAULTVALUEID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// ATTRIBUTEDEFINITIONDATEDB describes a attributedefinitiondate in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributedefinitiondateDB
type ATTRIBUTEDEFINITIONDATEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributedefinitiondateDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributedefinitiondateDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field attributedefinitiondateDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field attributedefinitiondateDB.ISEDITABLEAttr
	// provide the sql storage for the boolan
	ISEDITABLEAttr_Data sql.NullBool

	// Declation for basic field attributedefinitiondateDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field attributedefinitiondateDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEDEFINITIONDATEPointersEncoding
}

// ATTRIBUTEDEFINITIONDATEDBs arrays attributedefinitiondateDBs
// swagger:response attributedefinitiondateDBsResponse
type ATTRIBUTEDEFINITIONDATEDBs []ATTRIBUTEDEFINITIONDATEDB

// ATTRIBUTEDEFINITIONDATEDBResponse provides response
// swagger:response attributedefinitiondateDBResponse
type ATTRIBUTEDEFINITIONDATEDBResponse struct {
	ATTRIBUTEDEFINITIONDATEDB
}

// ATTRIBUTEDEFINITIONDATEWOP is a ATTRIBUTEDEFINITIONDATE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEDEFINITIONDATEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	ISEDITABLEAttr bool `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEDEFINITIONDATE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"ISEDITABLEAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoATTRIBUTEDEFINITIONDATEStruct struct {
	// stores ATTRIBUTEDEFINITIONDATEDB according to their gorm ID
	Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB map[uint]*ATTRIBUTEDEFINITIONDATEDB

	// stores ATTRIBUTEDEFINITIONDATEDB ID according to ATTRIBUTEDEFINITIONDATE address
	Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID map[*models.ATTRIBUTEDEFINITIONDATE]uint

	// stores ATTRIBUTEDEFINITIONDATE according to their gorm ID
	Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr map[uint]*models.ATTRIBUTEDEFINITIONDATE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEDEFINITIONDATE.stage
	return
}

func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEDEFINITIONDATE.db
}

// GetATTRIBUTEDEFINITIONDATEDBFromATTRIBUTEDEFINITIONDATEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) GetATTRIBUTEDEFINITIONDATEDBFromATTRIBUTEDEFINITIONDATEPtr(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) {
	id := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]
	attributedefinitiondateDB = backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[id]
	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseOne commits all staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributedefinitiondate := range stage.ATTRIBUTEDEFINITIONDATEs {
		backRepoATTRIBUTEDEFINITIONDATE.CommitPhaseOneInstance(attributedefinitiondate)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributedefinitiondate := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr {
		if _, ok := stage.ATTRIBUTEDEFINITIONDATEs[attributedefinitiondate]; !ok {
			backRepoATTRIBUTEDEFINITIONDATE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CommitDeleteInstance commits deletion of ATTRIBUTEDEFINITIONDATE to the BackRepo
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CommitDeleteInstance(id uint) (Error error) {

	attributedefinitiondate := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[id]

	// attributedefinitiondate is not staged anymore, remove attributedefinitiondateDB
	attributedefinitiondateDB := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[id]
	query := backRepoATTRIBUTEDEFINITIONDATE.db.Unscoped().Delete(&attributedefinitiondateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID, attributedefinitiondate)
	delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr, id)
	delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB, id)

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseOneInstance commits attributedefinitiondate staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CommitPhaseOneInstance(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) (Error error) {

	// check if the attributedefinitiondate is not commited yet
	if _, ok := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]; ok {
		return
	}

	// initiate attributedefinitiondate
	var attributedefinitiondateDB ATTRIBUTEDEFINITIONDATEDB
	attributedefinitiondateDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE(attributedefinitiondate)

	query := backRepoATTRIBUTEDEFINITIONDATE.db.Create(&attributedefinitiondateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate] = attributedefinitiondateDB.ID
	backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[attributedefinitiondateDB.ID] = attributedefinitiondate
	backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[attributedefinitiondateDB.ID] = &attributedefinitiondateDB

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseTwo commits all staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitiondate := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr {
		backRepoATTRIBUTEDEFINITIONDATE.CommitPhaseTwoInstance(backRepo, idx, attributedefinitiondate)
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) (Error error) {

	// fetch matching attributedefinitiondateDB
	if attributedefinitiondateDB, ok := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[idx]; ok {

		attributedefinitiondateDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE(attributedefinitiondate)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributedefinitiondate.ALTERNATIVEID translates to updating the attributedefinitiondate.ALTERNATIVEIDID
		attributedefinitiondateDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitiondate.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[attributedefinitiondate.ALTERNATIVEID]; ok {
				attributedefinitiondateDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				attributedefinitiondateDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			attributedefinitiondateDB.ALTERNATIVEIDID.Int64 = 0
			attributedefinitiondateDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value attributedefinitiondate.DEFAULTVALUE translates to updating the attributedefinitiondate.DEFAULTVALUEID
		attributedefinitiondateDB.DEFAULTVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitiondate.DEFAULTVALUE != nil {
			if DEFAULTVALUEId, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[attributedefinitiondate.DEFAULTVALUE]; ok {
				attributedefinitiondateDB.DEFAULTVALUEID.Int64 = int64(DEFAULTVALUEId)
				attributedefinitiondateDB.DEFAULTVALUEID.Valid = true
			}
		} else {
			attributedefinitiondateDB.DEFAULTVALUEID.Int64 = 0
			attributedefinitiondateDB.DEFAULTVALUEID.Valid = true
		}

		// commit pointer value attributedefinitiondate.TYPE translates to updating the attributedefinitiondate.TYPEID
		attributedefinitiondateDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitiondate.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[attributedefinitiondate.TYPE]; ok {
				attributedefinitiondateDB.TYPEID.Int64 = int64(TYPEId)
				attributedefinitiondateDB.TYPEID.Valid = true
			}
		} else {
			attributedefinitiondateDB.TYPEID.Int64 = 0
			attributedefinitiondateDB.TYPEID.Valid = true
		}

		query := backRepoATTRIBUTEDEFINITIONDATE.db.Save(&attributedefinitiondateDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEDEFINITIONDATE intance %s", attributedefinitiondate.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CheckoutPhaseOne() (Error error) {

	attributedefinitiondateDBArray := make([]ATTRIBUTEDEFINITIONDATEDB, 0)
	query := backRepoATTRIBUTEDEFINITIONDATE.db.Find(&attributedefinitiondateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributedefinitiondateInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEDEFINITIONDATE]any)
	for key, value := range backRepoATTRIBUTEDEFINITIONDATE.stage.ATTRIBUTEDEFINITIONDATEs {
		attributedefinitiondateInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributedefinitiondateDB := range attributedefinitiondateDBArray {
		backRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseOneInstance(&attributedefinitiondateDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributedefinitiondate, ok := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[attributedefinitiondateDB.ID]
		if ok {
			delete(attributedefinitiondateInstancesToBeRemovedFromTheStage, attributedefinitiondate)
		}
	}

	// remove from stage and back repo's 3 maps all attributedefinitiondates that are not in the checkout
	for attributedefinitiondate := range attributedefinitiondateInstancesToBeRemovedFromTheStage {
		attributedefinitiondate.Unstage(backRepoATTRIBUTEDEFINITIONDATE.GetStage())

		// remove instance from the back repo 3 maps
		attributedefinitiondateID := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]
		delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID, attributedefinitiondate)
		delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB, attributedefinitiondateID)
		delete(backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr, attributedefinitiondateID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributedefinitiondateDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributedefinitiondateDB
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CheckoutPhaseOneInstance(attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) (Error error) {

	attributedefinitiondate, ok := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[attributedefinitiondateDB.ID]
	if !ok {
		attributedefinitiondate = new(models.ATTRIBUTEDEFINITIONDATE)

		backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[attributedefinitiondateDB.ID] = attributedefinitiondate
		backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate] = attributedefinitiondateDB.ID

		// append model store with the new element
		attributedefinitiondate.Name = attributedefinitiondateDB.Name_Data.String
		attributedefinitiondate.Stage(backRepoATTRIBUTEDEFINITIONDATE.GetStage())
	}
	attributedefinitiondateDB.CopyBasicFieldsToATTRIBUTEDEFINITIONDATE(attributedefinitiondate)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributedefinitiondate.Stage(backRepoATTRIBUTEDEFINITIONDATE.GetStage())

	// preserve pointer to attributedefinitiondateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB)[attributedefinitiondateDB hold variable pointers
	attributedefinitiondateDB_Data := *attributedefinitiondateDB
	preservedPtrToATTRIBUTEDEFINITIONDATE := &attributedefinitiondateDB_Data
	backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[attributedefinitiondateDB.ID] = preservedPtrToATTRIBUTEDEFINITIONDATE

	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributedefinitiondateDB := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB {
		backRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseTwoInstance(backRepo, attributedefinitiondateDB)
	}
	return
}

// BackRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) (Error error) {

	attributedefinitiondate := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr[attributedefinitiondateDB.ID]

	attributedefinitiondateDB.DecodePointers(backRepo, attributedefinitiondate)

	return
}

func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) DecodePointers(backRepo *BackRepoStruct, attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	attributedefinitiondate.ALTERNATIVEID = nil
	if attributedefinitiondateDB.ALTERNATIVEIDID.Int64 != 0 {
		attributedefinitiondate.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(attributedefinitiondateDB.ALTERNATIVEIDID.Int64)]
	}
	// DEFAULTVALUE field
	attributedefinitiondate.DEFAULTVALUE = nil
	if attributedefinitiondateDB.DEFAULTVALUEID.Int64 != 0 {
		attributedefinitiondate.DEFAULTVALUE = backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[uint(attributedefinitiondateDB.DEFAULTVALUEID.Int64)]
	}
	// TYPE field
	attributedefinitiondate.TYPE = nil
	if attributedefinitiondateDB.TYPEID.Int64 != 0 {
		attributedefinitiondate.TYPE = backRepo.BackRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[uint(attributedefinitiondateDB.TYPEID.Int64)]
	}
	return
}

// CommitATTRIBUTEDEFINITIONDATE allows commit of a single attributedefinitiondate (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEDEFINITIONDATE(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) {
	backRepo.BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseOneInstance(attributedefinitiondate)
	if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]; ok {
		backRepo.BackRepoATTRIBUTEDEFINITIONDATE.CommitPhaseTwoInstance(backRepo, id, attributedefinitiondate)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEDEFINITIONDATE allows checkout of a single attributedefinitiondate (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEDEFINITIONDATE(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) {
	// check if the attributedefinitiondate is staged
	if _, ok := backRepo.BackRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEPtr_ATTRIBUTEDEFINITIONDATEDBID[attributedefinitiondate]; ok {
			var attributedefinitiondateDB ATTRIBUTEDEFINITIONDATEDB
			attributedefinitiondateDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEDEFINITIONDATE.db.First(&attributedefinitiondateDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEDEFINITIONDATE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseOneInstance(&attributedefinitiondateDB)
			backRepo.BackRepoATTRIBUTEDEFINITIONDATE.CheckoutPhaseTwoInstance(backRepo, &attributedefinitiondateDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) {
	// insertion point for fields commit

	attributedefinitiondateDB.Name_Data.String = attributedefinitiondate.Name
	attributedefinitiondateDB.Name_Data.Valid = true

	attributedefinitiondateDB.DESCAttr_Data.String = attributedefinitiondate.DESCAttr
	attributedefinitiondateDB.DESCAttr_Data.Valid = true

	attributedefinitiondateDB.IDENTIFIERAttr_Data.String = attributedefinitiondate.IDENTIFIERAttr
	attributedefinitiondateDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool = attributedefinitiondate.ISEDITABLEAttr
	attributedefinitiondateDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitiondateDB.LASTCHANGEAttr_Data.String = attributedefinitiondate.LASTCHANGEAttr
	attributedefinitiondateDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitiondateDB.LONGNAMEAttr_Data.String = attributedefinitiondate.LONGNAMEAttr
	attributedefinitiondateDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE_WOP
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONDATE_WOP(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE_WOP) {
	// insertion point for fields commit

	attributedefinitiondateDB.Name_Data.String = attributedefinitiondate.Name
	attributedefinitiondateDB.Name_Data.Valid = true

	attributedefinitiondateDB.DESCAttr_Data.String = attributedefinitiondate.DESCAttr
	attributedefinitiondateDB.DESCAttr_Data.Valid = true

	attributedefinitiondateDB.IDENTIFIERAttr_Data.String = attributedefinitiondate.IDENTIFIERAttr
	attributedefinitiondateDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool = attributedefinitiondate.ISEDITABLEAttr
	attributedefinitiondateDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitiondateDB.LASTCHANGEAttr_Data.String = attributedefinitiondate.LASTCHANGEAttr
	attributedefinitiondateDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitiondateDB.LONGNAMEAttr_Data.String = attributedefinitiondate.LONGNAMEAttr
	attributedefinitiondateDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONDATEWOP
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONDATEWOP(attributedefinitiondate *ATTRIBUTEDEFINITIONDATEWOP) {
	// insertion point for fields commit

	attributedefinitiondateDB.Name_Data.String = attributedefinitiondate.Name
	attributedefinitiondateDB.Name_Data.Valid = true

	attributedefinitiondateDB.DESCAttr_Data.String = attributedefinitiondate.DESCAttr
	attributedefinitiondateDB.DESCAttr_Data.Valid = true

	attributedefinitiondateDB.IDENTIFIERAttr_Data.String = attributedefinitiondate.IDENTIFIERAttr
	attributedefinitiondateDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool = attributedefinitiondate.ISEDITABLEAttr
	attributedefinitiondateDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitiondateDB.LASTCHANGEAttr_Data.String = attributedefinitiondate.LASTCHANGEAttr
	attributedefinitiondateDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitiondateDB.LONGNAMEAttr_Data.String = attributedefinitiondate.LONGNAMEAttr
	attributedefinitiondateDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONDATE
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsToATTRIBUTEDEFINITIONDATE(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitiondate.Name = attributedefinitiondateDB.Name_Data.String
	attributedefinitiondate.DESCAttr = attributedefinitiondateDB.DESCAttr_Data.String
	attributedefinitiondate.IDENTIFIERAttr = attributedefinitiondateDB.IDENTIFIERAttr_Data.String
	attributedefinitiondate.ISEDITABLEAttr = attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool
	attributedefinitiondate.LASTCHANGEAttr = attributedefinitiondateDB.LASTCHANGEAttr_Data.String
	attributedefinitiondate.LONGNAMEAttr = attributedefinitiondateDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONDATE_WOP
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsToATTRIBUTEDEFINITIONDATE_WOP(attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitiondate.Name = attributedefinitiondateDB.Name_Data.String
	attributedefinitiondate.DESCAttr = attributedefinitiondateDB.DESCAttr_Data.String
	attributedefinitiondate.IDENTIFIERAttr = attributedefinitiondateDB.IDENTIFIERAttr_Data.String
	attributedefinitiondate.ISEDITABLEAttr = attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool
	attributedefinitiondate.LASTCHANGEAttr = attributedefinitiondateDB.LASTCHANGEAttr_Data.String
	attributedefinitiondate.LONGNAMEAttr = attributedefinitiondateDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONDATEWOP
func (attributedefinitiondateDB *ATTRIBUTEDEFINITIONDATEDB) CopyBasicFieldsToATTRIBUTEDEFINITIONDATEWOP(attributedefinitiondate *ATTRIBUTEDEFINITIONDATEWOP) {
	attributedefinitiondate.ID = int(attributedefinitiondateDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitiondate.Name = attributedefinitiondateDB.Name_Data.String
	attributedefinitiondate.DESCAttr = attributedefinitiondateDB.DESCAttr_Data.String
	attributedefinitiondate.IDENTIFIERAttr = attributedefinitiondateDB.IDENTIFIERAttr_Data.String
	attributedefinitiondate.ISEDITABLEAttr = attributedefinitiondateDB.ISEDITABLEAttr_Data.Bool
	attributedefinitiondate.LASTCHANGEAttr = attributedefinitiondateDB.LASTCHANGEAttr_Data.String
	attributedefinitiondate.LONGNAMEAttr = attributedefinitiondateDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONDATEDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONDATEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONDATEDB, 0)
	for _, attributedefinitiondateDB := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB {
		forBackup = append(forBackup, attributedefinitiondateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEDEFINITIONDATE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEDEFINITIONDATE file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONDATEDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONDATEDB, 0)
	for _, attributedefinitiondateDB := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB {
		forBackup = append(forBackup, attributedefinitiondateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEDEFINITIONDATE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEDEFINITIONDATE_Fields, -1)
	for _, attributedefinitiondateDB := range forBackup {

		var attributedefinitiondateWOP ATTRIBUTEDEFINITIONDATEWOP
		attributedefinitiondateDB.CopyBasicFieldsToATTRIBUTEDEFINITIONDATEWOP(&attributedefinitiondateWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributedefinitiondateWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEDEFINITIONDATE" sheet all ATTRIBUTEDEFINITIONDATEDB instances
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEDEFINITIONDATE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEDEFINITIONDATE.rowVisitorATTRIBUTEDEFINITIONDATE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) rowVisitorATTRIBUTEDEFINITIONDATE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributedefinitiondateWOP ATTRIBUTEDEFINITIONDATEWOP
		row.ReadStruct(&attributedefinitiondateWOP)

		// add the unmarshalled struct to the stage
		attributedefinitiondateDB := new(ATTRIBUTEDEFINITIONDATEDB)
		attributedefinitiondateDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONDATEWOP(&attributedefinitiondateWOP)

		attributedefinitiondateDB_ID_atBackupTime := attributedefinitiondateDB.ID
		attributedefinitiondateDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONDATE.db.Create(attributedefinitiondateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[attributedefinitiondateDB.ID] = attributedefinitiondateDB
		BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID[attributedefinitiondateDB_ID_atBackupTime] = attributedefinitiondateDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEDEFINITIONDATEDB.json" in dirPath that stores an array
// of ATTRIBUTEDEFINITIONDATEDB and stores it in the database
// the map BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONDATEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEDEFINITIONDATE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEDEFINITIONDATEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB
	for _, attributedefinitiondateDB := range forRestore {

		attributedefinitiondateDB_ID_atBackupTime := attributedefinitiondateDB.ID
		attributedefinitiondateDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONDATE.db.Create(attributedefinitiondateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[attributedefinitiondateDB.ID] = attributedefinitiondateDB
		BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID[attributedefinitiondateDB_ID_atBackupTime] = attributedefinitiondateDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEDEFINITIONDATE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEDEFINITIONDATE>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) RestorePhaseTwo() {

	for _, attributedefinitiondateDB := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB {

		// next line of code is to avert unused variable compilation error
		_ = attributedefinitiondateDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if attributedefinitiondateDB.ALTERNATIVEIDID.Int64 != 0 {
			attributedefinitiondateDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(attributedefinitiondateDB.ALTERNATIVEIDID.Int64)])
			attributedefinitiondateDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing DEFAULTVALUE field
		if attributedefinitiondateDB.DEFAULTVALUEID.Int64 != 0 {
			attributedefinitiondateDB.DEFAULTVALUEID.Int64 = int64(BackRepoDEFAULTVALUEid_atBckpTime_newID[uint(attributedefinitiondateDB.DEFAULTVALUEID.Int64)])
			attributedefinitiondateDB.DEFAULTVALUEID.Valid = true
		}

		// reindexing TYPE field
		if attributedefinitiondateDB.TYPEID.Int64 != 0 {
			attributedefinitiondateDB.TYPEID.Int64 = int64(BackRepoREQTYPEid_atBckpTime_newID[uint(attributedefinitiondateDB.TYPEID.Int64)])
			attributedefinitiondateDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEDEFINITIONDATE.db.Model(attributedefinitiondateDB).Updates(*attributedefinitiondateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEDEFINITIONDATE.ResetReversePointers commits all staged instances of ATTRIBUTEDEFINITIONDATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitiondate := range backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEPtr {
		backRepoATTRIBUTEDEFINITIONDATE.ResetReversePointersInstance(backRepo, idx, attributedefinitiondate)
	}

	return
}

func (backRepoATTRIBUTEDEFINITIONDATE *BackRepoATTRIBUTEDEFINITIONDATEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributedefinitiondate *models.ATTRIBUTEDEFINITIONDATE) (Error error) {

	// fetch matching attributedefinitiondateDB
	if attributedefinitiondateDB, ok := backRepoATTRIBUTEDEFINITIONDATE.Map_ATTRIBUTEDEFINITIONDATEDBID_ATTRIBUTEDEFINITIONDATEDB[idx]; ok {
		_ = attributedefinitiondateDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEDEFINITIONDATEid_atBckpTime_newID map[uint]uint
