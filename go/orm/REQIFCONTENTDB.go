// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQIFCONTENT_sql sql.NullBool
var dummy_REQIFCONTENT_time time.Duration
var dummy_REQIFCONTENT_sort sort.Float64Slice

// REQIFCONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reqifcontentAPI
type REQIFCONTENTAPI struct {
	gorm.Model

	models.REQIFCONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQIFCONTENTPointersEncoding REQIFCONTENTPointersEncoding
}

// REQIFCONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQIFCONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DATATYPES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DATATYPESID sql.NullInt64

	// field SPECTYPES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECTYPESID sql.NullInt64

	// field SPECOBJECTS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECOBJECTSID sql.NullInt64

	// field SPECRELATIONS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECRELATIONSID sql.NullInt64

	// field SPECIFICATIONS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECIFICATIONSID sql.NullInt64

	// field SPECRELATIONGROUPS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECRELATIONGROUPSID sql.NullInt64
}

// REQIFCONTENTDB describes a reqifcontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reqifcontentDB
type REQIFCONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field reqifcontentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQIFCONTENTPointersEncoding
}

// REQIFCONTENTDBs arrays reqifcontentDBs
// swagger:response reqifcontentDBsResponse
type REQIFCONTENTDBs []REQIFCONTENTDB

// REQIFCONTENTDBResponse provides response
// swagger:response reqifcontentDBResponse
type REQIFCONTENTDBResponse struct {
	REQIFCONTENTDB
}

// REQIFCONTENTWOP is a REQIFCONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQIFCONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var REQIFCONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoREQIFCONTENTStruct struct {
	// stores REQIFCONTENTDB according to their gorm ID
	Map_REQIFCONTENTDBID_REQIFCONTENTDB map[uint]*REQIFCONTENTDB

	// stores REQIFCONTENTDB ID according to REQIFCONTENT address
	Map_REQIFCONTENTPtr_REQIFCONTENTDBID map[*models.REQIFCONTENT]uint

	// stores REQIFCONTENT according to their gorm ID
	Map_REQIFCONTENTDBID_REQIFCONTENTPtr map[uint]*models.REQIFCONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQIFCONTENT.stage
	return
}

func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) GetDB() *gorm.DB {
	return backRepoREQIFCONTENT.db
}

// GetREQIFCONTENTDBFromREQIFCONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) GetREQIFCONTENTDBFromREQIFCONTENTPtr(reqifcontent *models.REQIFCONTENT) (reqifcontentDB *REQIFCONTENTDB) {
	id := backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]
	reqifcontentDB = backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[id]
	return
}

// BackRepoREQIFCONTENT.CommitPhaseOne commits all staged instances of REQIFCONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reqifcontent := range stage.REQIFCONTENTs {
		backRepoREQIFCONTENT.CommitPhaseOneInstance(reqifcontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reqifcontent := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr {
		if _, ok := stage.REQIFCONTENTs[reqifcontent]; !ok {
			backRepoREQIFCONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQIFCONTENT.CommitDeleteInstance commits deletion of REQIFCONTENT to the BackRepo
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	reqifcontent := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[id]

	// reqifcontent is not staged anymore, remove reqifcontentDB
	reqifcontentDB := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[id]
	query := backRepoREQIFCONTENT.db.Unscoped().Delete(&reqifcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID, reqifcontent)
	delete(backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr, id)
	delete(backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB, id)

	return
}

// BackRepoREQIFCONTENT.CommitPhaseOneInstance commits reqifcontent staged instances of REQIFCONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CommitPhaseOneInstance(reqifcontent *models.REQIFCONTENT) (Error error) {

	// check if the reqifcontent is not commited yet
	if _, ok := backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]; ok {
		return
	}

	// initiate reqifcontent
	var reqifcontentDB REQIFCONTENTDB
	reqifcontentDB.CopyBasicFieldsFromREQIFCONTENT(reqifcontent)

	query := backRepoREQIFCONTENT.db.Create(&reqifcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent] = reqifcontentDB.ID
	backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[reqifcontentDB.ID] = reqifcontent
	backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[reqifcontentDB.ID] = &reqifcontentDB

	return
}

// BackRepoREQIFCONTENT.CommitPhaseTwo commits all staged instances of REQIFCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reqifcontent := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr {
		backRepoREQIFCONTENT.CommitPhaseTwoInstance(backRepo, idx, reqifcontent)
	}

	return
}

// BackRepoREQIFCONTENT.CommitPhaseTwoInstance commits {{structname }} of models.REQIFCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reqifcontent *models.REQIFCONTENT) (Error error) {

	// fetch matching reqifcontentDB
	if reqifcontentDB, ok := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[idx]; ok {

		reqifcontentDB.CopyBasicFieldsFromREQIFCONTENT(reqifcontent)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value reqifcontent.DATATYPES translates to updating the reqifcontent.DATATYPESID
		reqifcontentDB.DATATYPESID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.DATATYPES != nil {
			if DATATYPESId, ok := backRepo.BackRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[reqifcontent.DATATYPES]; ok {
				reqifcontentDB.DATATYPESID.Int64 = int64(DATATYPESId)
				reqifcontentDB.DATATYPESID.Valid = true
			}
		} else {
			reqifcontentDB.DATATYPESID.Int64 = 0
			reqifcontentDB.DATATYPESID.Valid = true
		}

		// commit pointer value reqifcontent.SPECTYPES translates to updating the reqifcontent.SPECTYPESID
		reqifcontentDB.SPECTYPESID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.SPECTYPES != nil {
			if SPECTYPESId, ok := backRepo.BackRepoSPECTYPES.Map_SPECTYPESPtr_SPECTYPESDBID[reqifcontent.SPECTYPES]; ok {
				reqifcontentDB.SPECTYPESID.Int64 = int64(SPECTYPESId)
				reqifcontentDB.SPECTYPESID.Valid = true
			}
		} else {
			reqifcontentDB.SPECTYPESID.Int64 = 0
			reqifcontentDB.SPECTYPESID.Valid = true
		}

		// commit pointer value reqifcontent.SPECOBJECTS translates to updating the reqifcontent.SPECOBJECTSID
		reqifcontentDB.SPECOBJECTSID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.SPECOBJECTS != nil {
			if SPECOBJECTSId, ok := backRepo.BackRepoSPECOBJECTS.Map_SPECOBJECTSPtr_SPECOBJECTSDBID[reqifcontent.SPECOBJECTS]; ok {
				reqifcontentDB.SPECOBJECTSID.Int64 = int64(SPECOBJECTSId)
				reqifcontentDB.SPECOBJECTSID.Valid = true
			}
		} else {
			reqifcontentDB.SPECOBJECTSID.Int64 = 0
			reqifcontentDB.SPECOBJECTSID.Valid = true
		}

		// commit pointer value reqifcontent.SPECRELATIONS translates to updating the reqifcontent.SPECRELATIONSID
		reqifcontentDB.SPECRELATIONSID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.SPECRELATIONS != nil {
			if SPECRELATIONSId, ok := backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[reqifcontent.SPECRELATIONS]; ok {
				reqifcontentDB.SPECRELATIONSID.Int64 = int64(SPECRELATIONSId)
				reqifcontentDB.SPECRELATIONSID.Valid = true
			}
		} else {
			reqifcontentDB.SPECRELATIONSID.Int64 = 0
			reqifcontentDB.SPECRELATIONSID.Valid = true
		}

		// commit pointer value reqifcontent.SPECIFICATIONS translates to updating the reqifcontent.SPECIFICATIONSID
		reqifcontentDB.SPECIFICATIONSID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.SPECIFICATIONS != nil {
			if SPECIFICATIONSId, ok := backRepo.BackRepoSPECIFICATIONS.Map_SPECIFICATIONSPtr_SPECIFICATIONSDBID[reqifcontent.SPECIFICATIONS]; ok {
				reqifcontentDB.SPECIFICATIONSID.Int64 = int64(SPECIFICATIONSId)
				reqifcontentDB.SPECIFICATIONSID.Valid = true
			}
		} else {
			reqifcontentDB.SPECIFICATIONSID.Int64 = 0
			reqifcontentDB.SPECIFICATIONSID.Valid = true
		}

		// commit pointer value reqifcontent.SPECRELATIONGROUPS translates to updating the reqifcontent.SPECRELATIONGROUPSID
		reqifcontentDB.SPECRELATIONGROUPSID.Valid = true // allow for a 0 value (nil association)
		if reqifcontent.SPECRELATIONGROUPS != nil {
			if SPECRELATIONGROUPSId, ok := backRepo.BackRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[reqifcontent.SPECRELATIONGROUPS]; ok {
				reqifcontentDB.SPECRELATIONGROUPSID.Int64 = int64(SPECRELATIONGROUPSId)
				reqifcontentDB.SPECRELATIONGROUPSID.Valid = true
			}
		} else {
			reqifcontentDB.SPECRELATIONGROUPSID.Int64 = 0
			reqifcontentDB.SPECRELATIONGROUPSID.Valid = true
		}

		query := backRepoREQIFCONTENT.db.Save(&reqifcontentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQIFCONTENT intance %s", reqifcontent.Name))
		return err
	}

	return
}

// BackRepoREQIFCONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CheckoutPhaseOne() (Error error) {

	reqifcontentDBArray := make([]REQIFCONTENTDB, 0)
	query := backRepoREQIFCONTENT.db.Find(&reqifcontentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reqifcontentInstancesToBeRemovedFromTheStage := make(map[*models.REQIFCONTENT]any)
	for key, value := range backRepoREQIFCONTENT.stage.REQIFCONTENTs {
		reqifcontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reqifcontentDB := range reqifcontentDBArray {
		backRepoREQIFCONTENT.CheckoutPhaseOneInstance(&reqifcontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reqifcontent, ok := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[reqifcontentDB.ID]
		if ok {
			delete(reqifcontentInstancesToBeRemovedFromTheStage, reqifcontent)
		}
	}

	// remove from stage and back repo's 3 maps all reqifcontents that are not in the checkout
	for reqifcontent := range reqifcontentInstancesToBeRemovedFromTheStage {
		reqifcontent.Unstage(backRepoREQIFCONTENT.GetStage())

		// remove instance from the back repo 3 maps
		reqifcontentID := backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]
		delete(backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID, reqifcontent)
		delete(backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB, reqifcontentID)
		delete(backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr, reqifcontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reqifcontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the reqifcontentDB
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CheckoutPhaseOneInstance(reqifcontentDB *REQIFCONTENTDB) (Error error) {

	reqifcontent, ok := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[reqifcontentDB.ID]
	if !ok {
		reqifcontent = new(models.REQIFCONTENT)

		backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[reqifcontentDB.ID] = reqifcontent
		backRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent] = reqifcontentDB.ID

		// append model store with the new element
		reqifcontent.Name = reqifcontentDB.Name_Data.String
		reqifcontent.Stage(backRepoREQIFCONTENT.GetStage())
	}
	reqifcontentDB.CopyBasicFieldsToREQIFCONTENT(reqifcontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	reqifcontent.Stage(backRepoREQIFCONTENT.GetStage())

	// preserve pointer to reqifcontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQIFCONTENTDBID_REQIFCONTENTDB)[reqifcontentDB hold variable pointers
	reqifcontentDB_Data := *reqifcontentDB
	preservedPtrToREQIFCONTENT := &reqifcontentDB_Data
	backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[reqifcontentDB.ID] = preservedPtrToREQIFCONTENT

	return
}

// BackRepoREQIFCONTENT.CheckoutPhaseTwo Checkouts all staged instances of REQIFCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reqifcontentDB := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB {
		backRepoREQIFCONTENT.CheckoutPhaseTwoInstance(backRepo, reqifcontentDB)
	}
	return
}

// BackRepoREQIFCONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of REQIFCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reqifcontentDB *REQIFCONTENTDB) (Error error) {

	reqifcontent := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr[reqifcontentDB.ID]

	reqifcontentDB.DecodePointers(backRepo, reqifcontent)

	return
}

func (reqifcontentDB *REQIFCONTENTDB) DecodePointers(backRepo *BackRepoStruct, reqifcontent *models.REQIFCONTENT) {

	// insertion point for checkout of pointer encoding
	// DATATYPES field
	reqifcontent.DATATYPES = nil
	if reqifcontentDB.DATATYPESID.Int64 != 0 {
		reqifcontent.DATATYPES = backRepo.BackRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[uint(reqifcontentDB.DATATYPESID.Int64)]
	}
	// SPECTYPES field
	reqifcontent.SPECTYPES = nil
	if reqifcontentDB.SPECTYPESID.Int64 != 0 {
		reqifcontent.SPECTYPES = backRepo.BackRepoSPECTYPES.Map_SPECTYPESDBID_SPECTYPESPtr[uint(reqifcontentDB.SPECTYPESID.Int64)]
	}
	// SPECOBJECTS field
	reqifcontent.SPECOBJECTS = nil
	if reqifcontentDB.SPECOBJECTSID.Int64 != 0 {
		reqifcontent.SPECOBJECTS = backRepo.BackRepoSPECOBJECTS.Map_SPECOBJECTSDBID_SPECOBJECTSPtr[uint(reqifcontentDB.SPECOBJECTSID.Int64)]
	}
	// SPECRELATIONS field
	reqifcontent.SPECRELATIONS = nil
	if reqifcontentDB.SPECRELATIONSID.Int64 != 0 {
		reqifcontent.SPECRELATIONS = backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[uint(reqifcontentDB.SPECRELATIONSID.Int64)]
	}
	// SPECIFICATIONS field
	reqifcontent.SPECIFICATIONS = nil
	if reqifcontentDB.SPECIFICATIONSID.Int64 != 0 {
		reqifcontent.SPECIFICATIONS = backRepo.BackRepoSPECIFICATIONS.Map_SPECIFICATIONSDBID_SPECIFICATIONSPtr[uint(reqifcontentDB.SPECIFICATIONSID.Int64)]
	}
	// SPECRELATIONGROUPS field
	reqifcontent.SPECRELATIONGROUPS = nil
	if reqifcontentDB.SPECRELATIONGROUPSID.Int64 != 0 {
		reqifcontent.SPECRELATIONGROUPS = backRepo.BackRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[uint(reqifcontentDB.SPECRELATIONGROUPSID.Int64)]
	}
	return
}

// CommitREQIFCONTENT allows commit of a single reqifcontent (if already staged)
func (backRepo *BackRepoStruct) CommitREQIFCONTENT(reqifcontent *models.REQIFCONTENT) {
	backRepo.BackRepoREQIFCONTENT.CommitPhaseOneInstance(reqifcontent)
	if id, ok := backRepo.BackRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]; ok {
		backRepo.BackRepoREQIFCONTENT.CommitPhaseTwoInstance(backRepo, id, reqifcontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQIFCONTENT allows checkout of a single reqifcontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQIFCONTENT(reqifcontent *models.REQIFCONTENT) {
	// check if the reqifcontent is staged
	if _, ok := backRepo.BackRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]; ok {

		if id, ok := backRepo.BackRepoREQIFCONTENT.Map_REQIFCONTENTPtr_REQIFCONTENTDBID[reqifcontent]; ok {
			var reqifcontentDB REQIFCONTENTDB
			reqifcontentDB.ID = id

			if err := backRepo.BackRepoREQIFCONTENT.db.First(&reqifcontentDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQIFCONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQIFCONTENT.CheckoutPhaseOneInstance(&reqifcontentDB)
			backRepo.BackRepoREQIFCONTENT.CheckoutPhaseTwoInstance(backRepo, &reqifcontentDB)
		}
	}
}

// CopyBasicFieldsFromREQIFCONTENT
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsFromREQIFCONTENT(reqifcontent *models.REQIFCONTENT) {
	// insertion point for fields commit

	reqifcontentDB.Name_Data.String = reqifcontent.Name
	reqifcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromREQIFCONTENT_WOP
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsFromREQIFCONTENT_WOP(reqifcontent *models.REQIFCONTENT_WOP) {
	// insertion point for fields commit

	reqifcontentDB.Name_Data.String = reqifcontent.Name
	reqifcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromREQIFCONTENTWOP
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsFromREQIFCONTENTWOP(reqifcontent *REQIFCONTENTWOP) {
	// insertion point for fields commit

	reqifcontentDB.Name_Data.String = reqifcontent.Name
	reqifcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToREQIFCONTENT
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsToREQIFCONTENT(reqifcontent *models.REQIFCONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqifcontent.Name = reqifcontentDB.Name_Data.String
}

// CopyBasicFieldsToREQIFCONTENT_WOP
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsToREQIFCONTENT_WOP(reqifcontent *models.REQIFCONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqifcontent.Name = reqifcontentDB.Name_Data.String
}

// CopyBasicFieldsToREQIFCONTENTWOP
func (reqifcontentDB *REQIFCONTENTDB) CopyBasicFieldsToREQIFCONTENTWOP(reqifcontent *REQIFCONTENTWOP) {
	reqifcontent.ID = int(reqifcontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reqifcontent.Name = reqifcontentDB.Name_Data.String
}

// Backup generates a json file from a slice of all REQIFCONTENTDB instances in the backrepo
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQIFCONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFCONTENTDB, 0)
	for _, reqifcontentDB := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB {
		forBackup = append(forBackup, reqifcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQIFCONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQIFCONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQIFCONTENTDB instances in the backrepo
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFCONTENTDB, 0)
	for _, reqifcontentDB := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB {
		forBackup = append(forBackup, reqifcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQIFCONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQIFCONTENT_Fields, -1)
	for _, reqifcontentDB := range forBackup {

		var reqifcontentWOP REQIFCONTENTWOP
		reqifcontentDB.CopyBasicFieldsToREQIFCONTENTWOP(&reqifcontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&reqifcontentWOP, -1)
	}
}

// RestoreXL from the "REQIFCONTENT" sheet all REQIFCONTENTDB instances
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQIFCONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQIFCONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQIFCONTENT.rowVisitorREQIFCONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) rowVisitorREQIFCONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var reqifcontentWOP REQIFCONTENTWOP
		row.ReadStruct(&reqifcontentWOP)

		// add the unmarshalled struct to the stage
		reqifcontentDB := new(REQIFCONTENTDB)
		reqifcontentDB.CopyBasicFieldsFromREQIFCONTENTWOP(&reqifcontentWOP)

		reqifcontentDB_ID_atBackupTime := reqifcontentDB.ID
		reqifcontentDB.ID = 0
		query := backRepoREQIFCONTENT.db.Create(reqifcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[reqifcontentDB.ID] = reqifcontentDB
		BackRepoREQIFCONTENTid_atBckpTime_newID[reqifcontentDB_ID_atBackupTime] = reqifcontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQIFCONTENTDB.json" in dirPath that stores an array
// of REQIFCONTENTDB and stores it in the database
// the map BackRepoREQIFCONTENTid_atBckpTime_newID is updated accordingly
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQIFCONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQIFCONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQIFCONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQIFCONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQIFCONTENTDBID_REQIFCONTENTDB
	for _, reqifcontentDB := range forRestore {

		reqifcontentDB_ID_atBackupTime := reqifcontentDB.ID
		reqifcontentDB.ID = 0
		query := backRepoREQIFCONTENT.db.Create(reqifcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[reqifcontentDB.ID] = reqifcontentDB
		BackRepoREQIFCONTENTid_atBckpTime_newID[reqifcontentDB_ID_atBackupTime] = reqifcontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQIFCONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQIFCONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) RestorePhaseTwo() {

	for _, reqifcontentDB := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = reqifcontentDB

		// insertion point for reindexing pointers encoding
		// reindexing DATATYPES field
		if reqifcontentDB.DATATYPESID.Int64 != 0 {
			reqifcontentDB.DATATYPESID.Int64 = int64(BackRepoDATATYPESid_atBckpTime_newID[uint(reqifcontentDB.DATATYPESID.Int64)])
			reqifcontentDB.DATATYPESID.Valid = true
		}

		// reindexing SPECTYPES field
		if reqifcontentDB.SPECTYPESID.Int64 != 0 {
			reqifcontentDB.SPECTYPESID.Int64 = int64(BackRepoSPECTYPESid_atBckpTime_newID[uint(reqifcontentDB.SPECTYPESID.Int64)])
			reqifcontentDB.SPECTYPESID.Valid = true
		}

		// reindexing SPECOBJECTS field
		if reqifcontentDB.SPECOBJECTSID.Int64 != 0 {
			reqifcontentDB.SPECOBJECTSID.Int64 = int64(BackRepoSPECOBJECTSid_atBckpTime_newID[uint(reqifcontentDB.SPECOBJECTSID.Int64)])
			reqifcontentDB.SPECOBJECTSID.Valid = true
		}

		// reindexing SPECRELATIONS field
		if reqifcontentDB.SPECRELATIONSID.Int64 != 0 {
			reqifcontentDB.SPECRELATIONSID.Int64 = int64(BackRepoSPECRELATIONSid_atBckpTime_newID[uint(reqifcontentDB.SPECRELATIONSID.Int64)])
			reqifcontentDB.SPECRELATIONSID.Valid = true
		}

		// reindexing SPECIFICATIONS field
		if reqifcontentDB.SPECIFICATIONSID.Int64 != 0 {
			reqifcontentDB.SPECIFICATIONSID.Int64 = int64(BackRepoSPECIFICATIONSid_atBckpTime_newID[uint(reqifcontentDB.SPECIFICATIONSID.Int64)])
			reqifcontentDB.SPECIFICATIONSID.Valid = true
		}

		// reindexing SPECRELATIONGROUPS field
		if reqifcontentDB.SPECRELATIONGROUPSID.Int64 != 0 {
			reqifcontentDB.SPECRELATIONGROUPSID.Int64 = int64(BackRepoSPECRELATIONGROUPSid_atBckpTime_newID[uint(reqifcontentDB.SPECRELATIONGROUPSID.Int64)])
			reqifcontentDB.SPECRELATIONGROUPSID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoREQIFCONTENT.db.Model(reqifcontentDB).Updates(*reqifcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQIFCONTENT.ResetReversePointers commits all staged instances of REQIFCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, reqifcontent := range backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTPtr {
		backRepoREQIFCONTENT.ResetReversePointersInstance(backRepo, idx, reqifcontent)
	}

	return
}

func (backRepoREQIFCONTENT *BackRepoREQIFCONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, reqifcontent *models.REQIFCONTENT) (Error error) {

	// fetch matching reqifcontentDB
	if reqifcontentDB, ok := backRepoREQIFCONTENT.Map_REQIFCONTENTDBID_REQIFCONTENTDB[idx]; ok {
		_ = reqifcontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQIFCONTENTid_atBckpTime_newID map[uint]uint
