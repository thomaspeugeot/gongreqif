// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPEC_OBJECT_TYPE_sql sql.NullBool
var dummy_SPEC_OBJECT_TYPE_time time.Duration
var dummy_SPEC_OBJECT_TYPE_sort sort.Float64Slice

// SPEC_OBJECT_TYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spec_object_typeAPI
type SPEC_OBJECT_TYPEAPI struct {
	gorm.Model

	models.SPEC_OBJECT_TYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPEC_OBJECT_TYPEPointersEncoding SPEC_OBJECT_TYPEPointersEncoding
}

// SPEC_OBJECT_TYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPEC_OBJECT_TYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SPEC_OBJECT_TYPEDB describes a spec_object_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spec_object_typeDB
type SPEC_OBJECT_TYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spec_object_typeDB.Name
	Name_Data sql.NullString

	// Declation for basic field spec_object_typeDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field spec_object_typeDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field spec_object_typeDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullTime

	// Declation for basic field spec_object_typeDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPEC_OBJECT_TYPEPointersEncoding
}

// SPEC_OBJECT_TYPEDBs arrays spec_object_typeDBs
// swagger:response spec_object_typeDBsResponse
type SPEC_OBJECT_TYPEDBs []SPEC_OBJECT_TYPEDB

// SPEC_OBJECT_TYPEDBResponse provides response
// swagger:response spec_object_typeDBResponse
type SPEC_OBJECT_TYPEDBResponse struct {
	SPEC_OBJECT_TYPEDB
}

// SPEC_OBJECT_TYPEWOP is a SPEC_OBJECT_TYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPEC_OBJECT_TYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE time.Time `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPEC_OBJECT_TYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoSPEC_OBJECT_TYPEStruct struct {
	// stores SPEC_OBJECT_TYPEDB according to their gorm ID
	Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB map[uint]*SPEC_OBJECT_TYPEDB

	// stores SPEC_OBJECT_TYPEDB ID according to SPEC_OBJECT_TYPE address
	Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID map[*models.SPEC_OBJECT_TYPE]uint

	// stores SPEC_OBJECT_TYPE according to their gorm ID
	Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr map[uint]*models.SPEC_OBJECT_TYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPEC_OBJECT_TYPE.stage
	return
}

func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) GetDB() *gorm.DB {
	return backRepoSPEC_OBJECT_TYPE.db
}

// GetSPEC_OBJECT_TYPEDBFromSPEC_OBJECT_TYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) GetSPEC_OBJECT_TYPEDBFromSPEC_OBJECT_TYPEPtr(spec_object_type *models.SPEC_OBJECT_TYPE) (spec_object_typeDB *SPEC_OBJECT_TYPEDB) {
	id := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]
	spec_object_typeDB = backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[id]
	return
}

// BackRepoSPEC_OBJECT_TYPE.CommitPhaseOne commits all staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spec_object_type := range stage.SPEC_OBJECT_TYPEs {
		backRepoSPEC_OBJECT_TYPE.CommitPhaseOneInstance(spec_object_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spec_object_type := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr {
		if _, ok := stage.SPEC_OBJECT_TYPEs[spec_object_type]; !ok {
			backRepoSPEC_OBJECT_TYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPEC_OBJECT_TYPE.CommitDeleteInstance commits deletion of SPEC_OBJECT_TYPE to the BackRepo
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	spec_object_type := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[id]

	// spec_object_type is not staged anymore, remove spec_object_typeDB
	spec_object_typeDB := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[id]
	query := backRepoSPEC_OBJECT_TYPE.db.Unscoped().Delete(&spec_object_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID, spec_object_type)
	delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr, id)
	delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB, id)

	return
}

// BackRepoSPEC_OBJECT_TYPE.CommitPhaseOneInstance commits spec_object_type staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CommitPhaseOneInstance(spec_object_type *models.SPEC_OBJECT_TYPE) (Error error) {

	// check if the spec_object_type is not commited yet
	if _, ok := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]; ok {
		return
	}

	// initiate spec_object_type
	var spec_object_typeDB SPEC_OBJECT_TYPEDB
	spec_object_typeDB.CopyBasicFieldsFromSPEC_OBJECT_TYPE(spec_object_type)

	query := backRepoSPEC_OBJECT_TYPE.db.Create(&spec_object_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type] = spec_object_typeDB.ID
	backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[spec_object_typeDB.ID] = spec_object_type
	backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[spec_object_typeDB.ID] = &spec_object_typeDB

	return
}

// BackRepoSPEC_OBJECT_TYPE.CommitPhaseTwo commits all staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_object_type := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr {
		backRepoSPEC_OBJECT_TYPE.CommitPhaseTwoInstance(backRepo, idx, spec_object_type)
	}

	return
}

// BackRepoSPEC_OBJECT_TYPE.CommitPhaseTwoInstance commits {{structname }} of models.SPEC_OBJECT_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spec_object_type *models.SPEC_OBJECT_TYPE) (Error error) {

	// fetch matching spec_object_typeDB
	if spec_object_typeDB, ok := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[idx]; ok {

		spec_object_typeDB.CopyBasicFieldsFromSPEC_OBJECT_TYPE(spec_object_type)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSPEC_OBJECT_TYPE.db.Save(&spec_object_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPEC_OBJECT_TYPE intance %s", spec_object_type.Name))
		return err
	}

	return
}

// BackRepoSPEC_OBJECT_TYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CheckoutPhaseOne() (Error error) {

	spec_object_typeDBArray := make([]SPEC_OBJECT_TYPEDB, 0)
	query := backRepoSPEC_OBJECT_TYPE.db.Find(&spec_object_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spec_object_typeInstancesToBeRemovedFromTheStage := make(map[*models.SPEC_OBJECT_TYPE]any)
	for key, value := range backRepoSPEC_OBJECT_TYPE.stage.SPEC_OBJECT_TYPEs {
		spec_object_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spec_object_typeDB := range spec_object_typeDBArray {
		backRepoSPEC_OBJECT_TYPE.CheckoutPhaseOneInstance(&spec_object_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spec_object_type, ok := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[spec_object_typeDB.ID]
		if ok {
			delete(spec_object_typeInstancesToBeRemovedFromTheStage, spec_object_type)
		}
	}

	// remove from stage and back repo's 3 maps all spec_object_types that are not in the checkout
	for spec_object_type := range spec_object_typeInstancesToBeRemovedFromTheStage {
		spec_object_type.Unstage(backRepoSPEC_OBJECT_TYPE.GetStage())

		// remove instance from the back repo 3 maps
		spec_object_typeID := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]
		delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID, spec_object_type)
		delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB, spec_object_typeID)
		delete(backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr, spec_object_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spec_object_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the spec_object_typeDB
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CheckoutPhaseOneInstance(spec_object_typeDB *SPEC_OBJECT_TYPEDB) (Error error) {

	spec_object_type, ok := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[spec_object_typeDB.ID]
	if !ok {
		spec_object_type = new(models.SPEC_OBJECT_TYPE)

		backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[spec_object_typeDB.ID] = spec_object_type
		backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type] = spec_object_typeDB.ID

		// append model store with the new element
		spec_object_type.Name = spec_object_typeDB.Name_Data.String
		spec_object_type.Stage(backRepoSPEC_OBJECT_TYPE.GetStage())
	}
	spec_object_typeDB.CopyBasicFieldsToSPEC_OBJECT_TYPE(spec_object_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spec_object_type.Stage(backRepoSPEC_OBJECT_TYPE.GetStage())

	// preserve pointer to spec_object_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB)[spec_object_typeDB hold variable pointers
	spec_object_typeDB_Data := *spec_object_typeDB
	preservedPtrToSPEC_OBJECT_TYPE := &spec_object_typeDB_Data
	backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[spec_object_typeDB.ID] = preservedPtrToSPEC_OBJECT_TYPE

	return
}

// BackRepoSPEC_OBJECT_TYPE.CheckoutPhaseTwo Checkouts all staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spec_object_typeDB := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB {
		backRepoSPEC_OBJECT_TYPE.CheckoutPhaseTwoInstance(backRepo, spec_object_typeDB)
	}
	return
}

// BackRepoSPEC_OBJECT_TYPE.CheckoutPhaseTwoInstance Checkouts staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spec_object_typeDB *SPEC_OBJECT_TYPEDB) (Error error) {

	spec_object_type := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr[spec_object_typeDB.ID]

	spec_object_typeDB.DecodePointers(backRepo, spec_object_type)

	return
}

func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) DecodePointers(backRepo *BackRepoStruct, spec_object_type *models.SPEC_OBJECT_TYPE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSPEC_OBJECT_TYPE allows commit of a single spec_object_type (if already staged)
func (backRepo *BackRepoStruct) CommitSPEC_OBJECT_TYPE(spec_object_type *models.SPEC_OBJECT_TYPE) {
	backRepo.BackRepoSPEC_OBJECT_TYPE.CommitPhaseOneInstance(spec_object_type)
	if id, ok := backRepo.BackRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]; ok {
		backRepo.BackRepoSPEC_OBJECT_TYPE.CommitPhaseTwoInstance(backRepo, id, spec_object_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPEC_OBJECT_TYPE allows checkout of a single spec_object_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPEC_OBJECT_TYPE(spec_object_type *models.SPEC_OBJECT_TYPE) {
	// check if the spec_object_type is staged
	if _, ok := backRepo.BackRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]; ok {

		if id, ok := backRepo.BackRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEPtr_SPEC_OBJECT_TYPEDBID[spec_object_type]; ok {
			var spec_object_typeDB SPEC_OBJECT_TYPEDB
			spec_object_typeDB.ID = id

			if err := backRepo.BackRepoSPEC_OBJECT_TYPE.db.First(&spec_object_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPEC_OBJECT_TYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPEC_OBJECT_TYPE.CheckoutPhaseOneInstance(&spec_object_typeDB)
			backRepo.BackRepoSPEC_OBJECT_TYPE.CheckoutPhaseTwoInstance(backRepo, &spec_object_typeDB)
		}
	}
}

// CopyBasicFieldsFromSPEC_OBJECT_TYPE
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsFromSPEC_OBJECT_TYPE(spec_object_type *models.SPEC_OBJECT_TYPE) {
	// insertion point for fields commit

	spec_object_typeDB.Name_Data.String = spec_object_type.Name
	spec_object_typeDB.Name_Data.Valid = true

	spec_object_typeDB.DESC_Data.String = spec_object_type.DESC
	spec_object_typeDB.DESC_Data.Valid = true

	spec_object_typeDB.IDENTIFIER_Data.String = spec_object_type.IDENTIFIER
	spec_object_typeDB.IDENTIFIER_Data.Valid = true

	spec_object_typeDB.LAST_CHANGE_Data.Time = spec_object_type.LAST_CHANGE
	spec_object_typeDB.LAST_CHANGE_Data.Valid = true

	spec_object_typeDB.LONG_NAME_Data.String = spec_object_type.LONG_NAME
	spec_object_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_OBJECT_TYPE_WOP
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsFromSPEC_OBJECT_TYPE_WOP(spec_object_type *models.SPEC_OBJECT_TYPE_WOP) {
	// insertion point for fields commit

	spec_object_typeDB.Name_Data.String = spec_object_type.Name
	spec_object_typeDB.Name_Data.Valid = true

	spec_object_typeDB.DESC_Data.String = spec_object_type.DESC
	spec_object_typeDB.DESC_Data.Valid = true

	spec_object_typeDB.IDENTIFIER_Data.String = spec_object_type.IDENTIFIER
	spec_object_typeDB.IDENTIFIER_Data.Valid = true

	spec_object_typeDB.LAST_CHANGE_Data.Time = spec_object_type.LAST_CHANGE
	spec_object_typeDB.LAST_CHANGE_Data.Valid = true

	spec_object_typeDB.LONG_NAME_Data.String = spec_object_type.LONG_NAME
	spec_object_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_OBJECT_TYPEWOP
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsFromSPEC_OBJECT_TYPEWOP(spec_object_type *SPEC_OBJECT_TYPEWOP) {
	// insertion point for fields commit

	spec_object_typeDB.Name_Data.String = spec_object_type.Name
	spec_object_typeDB.Name_Data.Valid = true

	spec_object_typeDB.DESC_Data.String = spec_object_type.DESC
	spec_object_typeDB.DESC_Data.Valid = true

	spec_object_typeDB.IDENTIFIER_Data.String = spec_object_type.IDENTIFIER
	spec_object_typeDB.IDENTIFIER_Data.Valid = true

	spec_object_typeDB.LAST_CHANGE_Data.Time = spec_object_type.LAST_CHANGE
	spec_object_typeDB.LAST_CHANGE_Data.Valid = true

	spec_object_typeDB.LONG_NAME_Data.String = spec_object_type.LONG_NAME
	spec_object_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToSPEC_OBJECT_TYPE
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsToSPEC_OBJECT_TYPE(spec_object_type *models.SPEC_OBJECT_TYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object_type.Name = spec_object_typeDB.Name_Data.String
	spec_object_type.DESC = spec_object_typeDB.DESC_Data.String
	spec_object_type.IDENTIFIER = spec_object_typeDB.IDENTIFIER_Data.String
	spec_object_type.LAST_CHANGE = spec_object_typeDB.LAST_CHANGE_Data.Time
	spec_object_type.LONG_NAME = spec_object_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_OBJECT_TYPE_WOP
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsToSPEC_OBJECT_TYPE_WOP(spec_object_type *models.SPEC_OBJECT_TYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object_type.Name = spec_object_typeDB.Name_Data.String
	spec_object_type.DESC = spec_object_typeDB.DESC_Data.String
	spec_object_type.IDENTIFIER = spec_object_typeDB.IDENTIFIER_Data.String
	spec_object_type.LAST_CHANGE = spec_object_typeDB.LAST_CHANGE_Data.Time
	spec_object_type.LONG_NAME = spec_object_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_OBJECT_TYPEWOP
func (spec_object_typeDB *SPEC_OBJECT_TYPEDB) CopyBasicFieldsToSPEC_OBJECT_TYPEWOP(spec_object_type *SPEC_OBJECT_TYPEWOP) {
	spec_object_type.ID = int(spec_object_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object_type.Name = spec_object_typeDB.Name_Data.String
	spec_object_type.DESC = spec_object_typeDB.DESC_Data.String
	spec_object_type.IDENTIFIER = spec_object_typeDB.IDENTIFIER_Data.String
	spec_object_type.LAST_CHANGE = spec_object_typeDB.LAST_CHANGE_Data.Time
	spec_object_type.LONG_NAME = spec_object_typeDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all SPEC_OBJECT_TYPEDB instances in the backrepo
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPEC_OBJECT_TYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_OBJECT_TYPEDB, 0)
	for _, spec_object_typeDB := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB {
		forBackup = append(forBackup, spec_object_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPEC_OBJECT_TYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPEC_OBJECT_TYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPEC_OBJECT_TYPEDB instances in the backrepo
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_OBJECT_TYPEDB, 0)
	for _, spec_object_typeDB := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB {
		forBackup = append(forBackup, spec_object_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPEC_OBJECT_TYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPEC_OBJECT_TYPE_Fields, -1)
	for _, spec_object_typeDB := range forBackup {

		var spec_object_typeWOP SPEC_OBJECT_TYPEWOP
		spec_object_typeDB.CopyBasicFieldsToSPEC_OBJECT_TYPEWOP(&spec_object_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&spec_object_typeWOP, -1)
	}
}

// RestoreXL from the "SPEC_OBJECT_TYPE" sheet all SPEC_OBJECT_TYPEDB instances
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPEC_OBJECT_TYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPEC_OBJECT_TYPE.rowVisitorSPEC_OBJECT_TYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) rowVisitorSPEC_OBJECT_TYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spec_object_typeWOP SPEC_OBJECT_TYPEWOP
		row.ReadStruct(&spec_object_typeWOP)

		// add the unmarshalled struct to the stage
		spec_object_typeDB := new(SPEC_OBJECT_TYPEDB)
		spec_object_typeDB.CopyBasicFieldsFromSPEC_OBJECT_TYPEWOP(&spec_object_typeWOP)

		spec_object_typeDB_ID_atBackupTime := spec_object_typeDB.ID
		spec_object_typeDB.ID = 0
		query := backRepoSPEC_OBJECT_TYPE.db.Create(spec_object_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[spec_object_typeDB.ID] = spec_object_typeDB
		BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID[spec_object_typeDB_ID_atBackupTime] = spec_object_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPEC_OBJECT_TYPEDB.json" in dirPath that stores an array
// of SPEC_OBJECT_TYPEDB and stores it in the database
// the map BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID is updated accordingly
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPEC_OBJECT_TYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPEC_OBJECT_TYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPEC_OBJECT_TYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB
	for _, spec_object_typeDB := range forRestore {

		spec_object_typeDB_ID_atBackupTime := spec_object_typeDB.ID
		spec_object_typeDB.ID = 0
		query := backRepoSPEC_OBJECT_TYPE.db.Create(spec_object_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[spec_object_typeDB.ID] = spec_object_typeDB
		BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID[spec_object_typeDB_ID_atBackupTime] = spec_object_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPEC_OBJECT_TYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPEC_OBJECT_TYPE>id_atBckpTime_newID
// to compute new index
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) RestorePhaseTwo() {

	for _, spec_object_typeDB := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = spec_object_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPEC_OBJECT_TYPE.db.Model(spec_object_typeDB).Updates(*spec_object_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPEC_OBJECT_TYPE.ResetReversePointers commits all staged instances of SPEC_OBJECT_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_object_type := range backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEPtr {
		backRepoSPEC_OBJECT_TYPE.ResetReversePointersInstance(backRepo, idx, spec_object_type)
	}

	return
}

func (backRepoSPEC_OBJECT_TYPE *BackRepoSPEC_OBJECT_TYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spec_object_type *models.SPEC_OBJECT_TYPE) (Error error) {

	// fetch matching spec_object_typeDB
	if spec_object_typeDB, ok := backRepoSPEC_OBJECT_TYPE.Map_SPEC_OBJECT_TYPEDBID_SPEC_OBJECT_TYPEDB[idx]; ok {
		_ = spec_object_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPEC_OBJECT_TYPEid_atBckpTime_newID map[uint]uint
