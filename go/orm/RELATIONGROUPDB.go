// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RELATIONGROUP_sql sql.NullBool
var dummy_RELATIONGROUP_time time.Duration
var dummy_RELATIONGROUP_sort sort.Float64Slice

// RELATIONGROUPAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model relationgroupAPI
type RELATIONGROUPAPI struct {
	gorm.Model

	models.RELATIONGROUP_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RELATIONGROUPPointersEncoding RELATIONGROUPPointersEncoding
}

// RELATIONGROUPPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RELATIONGROUPPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field SOURCESPECIFICATION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SOURCESPECIFICATIONID sql.NullInt64

	// field SPECRELATIONS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECRELATIONSID sql.NullInt64

	// field TARGETSPECIFICATION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TARGETSPECIFICATIONID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// RELATIONGROUPDB describes a relationgroup in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model relationgroupDB
type RELATIONGROUPDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field relationgroupDB.Name
	Name_Data sql.NullString

	// Declation for basic field relationgroupDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field relationgroupDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field relationgroupDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field relationgroupDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RELATIONGROUPPointersEncoding
}

// RELATIONGROUPDBs arrays relationgroupDBs
// swagger:response relationgroupDBsResponse
type RELATIONGROUPDBs []RELATIONGROUPDB

// RELATIONGROUPDBResponse provides response
// swagger:response relationgroupDBResponse
type RELATIONGROUPDBResponse struct {
	RELATIONGROUPDB
}

// RELATIONGROUPWOP is a RELATIONGROUP without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RELATIONGROUPWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var RELATIONGROUP_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoRELATIONGROUPStruct struct {
	// stores RELATIONGROUPDB according to their gorm ID
	Map_RELATIONGROUPDBID_RELATIONGROUPDB map[uint]*RELATIONGROUPDB

	// stores RELATIONGROUPDB ID according to RELATIONGROUP address
	Map_RELATIONGROUPPtr_RELATIONGROUPDBID map[*models.RELATIONGROUP]uint

	// stores RELATIONGROUP according to their gorm ID
	Map_RELATIONGROUPDBID_RELATIONGROUPPtr map[uint]*models.RELATIONGROUP

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRELATIONGROUP.stage
	return
}

func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) GetDB() *gorm.DB {
	return backRepoRELATIONGROUP.db
}

// GetRELATIONGROUPDBFromRELATIONGROUPPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) GetRELATIONGROUPDBFromRELATIONGROUPPtr(relationgroup *models.RELATIONGROUP) (relationgroupDB *RELATIONGROUPDB) {
	id := backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]
	relationgroupDB = backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[id]
	return
}

// BackRepoRELATIONGROUP.CommitPhaseOne commits all staged instances of RELATIONGROUP to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for relationgroup := range stage.RELATIONGROUPs {
		backRepoRELATIONGROUP.CommitPhaseOneInstance(relationgroup)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, relationgroup := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr {
		if _, ok := stage.RELATIONGROUPs[relationgroup]; !ok {
			backRepoRELATIONGROUP.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRELATIONGROUP.CommitDeleteInstance commits deletion of RELATIONGROUP to the BackRepo
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CommitDeleteInstance(id uint) (Error error) {

	relationgroup := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[id]

	// relationgroup is not staged anymore, remove relationgroupDB
	relationgroupDB := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[id]
	query := backRepoRELATIONGROUP.db.Unscoped().Delete(&relationgroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID, relationgroup)
	delete(backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr, id)
	delete(backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB, id)

	return
}

// BackRepoRELATIONGROUP.CommitPhaseOneInstance commits relationgroup staged instances of RELATIONGROUP to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CommitPhaseOneInstance(relationgroup *models.RELATIONGROUP) (Error error) {

	// check if the relationgroup is not commited yet
	if _, ok := backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]; ok {
		return
	}

	// initiate relationgroup
	var relationgroupDB RELATIONGROUPDB
	relationgroupDB.CopyBasicFieldsFromRELATIONGROUP(relationgroup)

	query := backRepoRELATIONGROUP.db.Create(&relationgroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup] = relationgroupDB.ID
	backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[relationgroupDB.ID] = relationgroup
	backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[relationgroupDB.ID] = &relationgroupDB

	return
}

// BackRepoRELATIONGROUP.CommitPhaseTwo commits all staged instances of RELATIONGROUP to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, relationgroup := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr {
		backRepoRELATIONGROUP.CommitPhaseTwoInstance(backRepo, idx, relationgroup)
	}

	return
}

// BackRepoRELATIONGROUP.CommitPhaseTwoInstance commits {{structname }} of models.RELATIONGROUP to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, relationgroup *models.RELATIONGROUP) (Error error) {

	// fetch matching relationgroupDB
	if relationgroupDB, ok := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[idx]; ok {

		relationgroupDB.CopyBasicFieldsFromRELATIONGROUP(relationgroup)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value relationgroup.ALTERNATIVEID translates to updating the relationgroup.ALTERNATIVEIDID
		relationgroupDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if relationgroup.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[relationgroup.ALTERNATIVEID]; ok {
				relationgroupDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				relationgroupDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			relationgroupDB.ALTERNATIVEIDID.Int64 = 0
			relationgroupDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value relationgroup.SOURCESPECIFICATION translates to updating the relationgroup.SOURCESPECIFICATIONID
		relationgroupDB.SOURCESPECIFICATIONID.Valid = true // allow for a 0 value (nil association)
		if relationgroup.SOURCESPECIFICATION != nil {
			if SOURCESPECIFICATIONId, ok := backRepo.BackRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[relationgroup.SOURCESPECIFICATION]; ok {
				relationgroupDB.SOURCESPECIFICATIONID.Int64 = int64(SOURCESPECIFICATIONId)
				relationgroupDB.SOURCESPECIFICATIONID.Valid = true
			}
		} else {
			relationgroupDB.SOURCESPECIFICATIONID.Int64 = 0
			relationgroupDB.SOURCESPECIFICATIONID.Valid = true
		}

		// commit pointer value relationgroup.SPECRELATIONS translates to updating the relationgroup.SPECRELATIONSID
		relationgroupDB.SPECRELATIONSID.Valid = true // allow for a 0 value (nil association)
		if relationgroup.SPECRELATIONS != nil {
			if SPECRELATIONSId, ok := backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSPtr_SPECRELATIONSDBID[relationgroup.SPECRELATIONS]; ok {
				relationgroupDB.SPECRELATIONSID.Int64 = int64(SPECRELATIONSId)
				relationgroupDB.SPECRELATIONSID.Valid = true
			}
		} else {
			relationgroupDB.SPECRELATIONSID.Int64 = 0
			relationgroupDB.SPECRELATIONSID.Valid = true
		}

		// commit pointer value relationgroup.TARGETSPECIFICATION translates to updating the relationgroup.TARGETSPECIFICATIONID
		relationgroupDB.TARGETSPECIFICATIONID.Valid = true // allow for a 0 value (nil association)
		if relationgroup.TARGETSPECIFICATION != nil {
			if TARGETSPECIFICATIONId, ok := backRepo.BackRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[relationgroup.TARGETSPECIFICATION]; ok {
				relationgroupDB.TARGETSPECIFICATIONID.Int64 = int64(TARGETSPECIFICATIONId)
				relationgroupDB.TARGETSPECIFICATIONID.Valid = true
			}
		} else {
			relationgroupDB.TARGETSPECIFICATIONID.Int64 = 0
			relationgroupDB.TARGETSPECIFICATIONID.Valid = true
		}

		// commit pointer value relationgroup.TYPE translates to updating the relationgroup.TYPEID
		relationgroupDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if relationgroup.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[relationgroup.TYPE]; ok {
				relationgroupDB.TYPEID.Int64 = int64(TYPEId)
				relationgroupDB.TYPEID.Valid = true
			}
		} else {
			relationgroupDB.TYPEID.Int64 = 0
			relationgroupDB.TYPEID.Valid = true
		}

		query := backRepoRELATIONGROUP.db.Save(&relationgroupDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RELATIONGROUP intance %s", relationgroup.Name))
		return err
	}

	return
}

// BackRepoRELATIONGROUP.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CheckoutPhaseOne() (Error error) {

	relationgroupDBArray := make([]RELATIONGROUPDB, 0)
	query := backRepoRELATIONGROUP.db.Find(&relationgroupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	relationgroupInstancesToBeRemovedFromTheStage := make(map[*models.RELATIONGROUP]any)
	for key, value := range backRepoRELATIONGROUP.stage.RELATIONGROUPs {
		relationgroupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, relationgroupDB := range relationgroupDBArray {
		backRepoRELATIONGROUP.CheckoutPhaseOneInstance(&relationgroupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		relationgroup, ok := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[relationgroupDB.ID]
		if ok {
			delete(relationgroupInstancesToBeRemovedFromTheStage, relationgroup)
		}
	}

	// remove from stage and back repo's 3 maps all relationgroups that are not in the checkout
	for relationgroup := range relationgroupInstancesToBeRemovedFromTheStage {
		relationgroup.Unstage(backRepoRELATIONGROUP.GetStage())

		// remove instance from the back repo 3 maps
		relationgroupID := backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]
		delete(backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID, relationgroup)
		delete(backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB, relationgroupID)
		delete(backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr, relationgroupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a relationgroupDB that has been found in the DB, updates the backRepo and stages the
// models version of the relationgroupDB
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CheckoutPhaseOneInstance(relationgroupDB *RELATIONGROUPDB) (Error error) {

	relationgroup, ok := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[relationgroupDB.ID]
	if !ok {
		relationgroup = new(models.RELATIONGROUP)

		backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[relationgroupDB.ID] = relationgroup
		backRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup] = relationgroupDB.ID

		// append model store with the new element
		relationgroup.Name = relationgroupDB.Name_Data.String
		relationgroup.Stage(backRepoRELATIONGROUP.GetStage())
	}
	relationgroupDB.CopyBasicFieldsToRELATIONGROUP(relationgroup)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	relationgroup.Stage(backRepoRELATIONGROUP.GetStage())

	// preserve pointer to relationgroupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RELATIONGROUPDBID_RELATIONGROUPDB)[relationgroupDB hold variable pointers
	relationgroupDB_Data := *relationgroupDB
	preservedPtrToRELATIONGROUP := &relationgroupDB_Data
	backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[relationgroupDB.ID] = preservedPtrToRELATIONGROUP

	return
}

// BackRepoRELATIONGROUP.CheckoutPhaseTwo Checkouts all staged instances of RELATIONGROUP to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, relationgroupDB := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB {
		backRepoRELATIONGROUP.CheckoutPhaseTwoInstance(backRepo, relationgroupDB)
	}
	return
}

// BackRepoRELATIONGROUP.CheckoutPhaseTwoInstance Checkouts staged instances of RELATIONGROUP to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, relationgroupDB *RELATIONGROUPDB) (Error error) {

	relationgroup := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[relationgroupDB.ID]

	relationgroupDB.DecodePointers(backRepo, relationgroup)

	return
}

func (relationgroupDB *RELATIONGROUPDB) DecodePointers(backRepo *BackRepoStruct, relationgroup *models.RELATIONGROUP) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	relationgroup.ALTERNATIVEID = nil
	if relationgroupDB.ALTERNATIVEIDID.Int64 != 0 {
		relationgroup.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(relationgroupDB.ALTERNATIVEIDID.Int64)]
	}
	// SOURCESPECIFICATION field
	relationgroup.SOURCESPECIFICATION = nil
	if relationgroupDB.SOURCESPECIFICATIONID.Int64 != 0 {
		relationgroup.SOURCESPECIFICATION = backRepo.BackRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[uint(relationgroupDB.SOURCESPECIFICATIONID.Int64)]
	}
	// SPECRELATIONS field
	relationgroup.SPECRELATIONS = nil
	if relationgroupDB.SPECRELATIONSID.Int64 != 0 {
		relationgroup.SPECRELATIONS = backRepo.BackRepoSPECRELATIONS.Map_SPECRELATIONSDBID_SPECRELATIONSPtr[uint(relationgroupDB.SPECRELATIONSID.Int64)]
	}
	// TARGETSPECIFICATION field
	relationgroup.TARGETSPECIFICATION = nil
	if relationgroupDB.TARGETSPECIFICATIONID.Int64 != 0 {
		relationgroup.TARGETSPECIFICATION = backRepo.BackRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[uint(relationgroupDB.TARGETSPECIFICATIONID.Int64)]
	}
	// TYPE field
	relationgroup.TYPE = nil
	if relationgroupDB.TYPEID.Int64 != 0 {
		relationgroup.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(relationgroupDB.TYPEID.Int64)]
	}
	return
}

// CommitRELATIONGROUP allows commit of a single relationgroup (if already staged)
func (backRepo *BackRepoStruct) CommitRELATIONGROUP(relationgroup *models.RELATIONGROUP) {
	backRepo.BackRepoRELATIONGROUP.CommitPhaseOneInstance(relationgroup)
	if id, ok := backRepo.BackRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]; ok {
		backRepo.BackRepoRELATIONGROUP.CommitPhaseTwoInstance(backRepo, id, relationgroup)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRELATIONGROUP allows checkout of a single relationgroup (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRELATIONGROUP(relationgroup *models.RELATIONGROUP) {
	// check if the relationgroup is staged
	if _, ok := backRepo.BackRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]; ok {

		if id, ok := backRepo.BackRepoRELATIONGROUP.Map_RELATIONGROUPPtr_RELATIONGROUPDBID[relationgroup]; ok {
			var relationgroupDB RELATIONGROUPDB
			relationgroupDB.ID = id

			if err := backRepo.BackRepoRELATIONGROUP.db.First(&relationgroupDB, id).Error; err != nil {
				log.Fatalln("CheckoutRELATIONGROUP : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRELATIONGROUP.CheckoutPhaseOneInstance(&relationgroupDB)
			backRepo.BackRepoRELATIONGROUP.CheckoutPhaseTwoInstance(backRepo, &relationgroupDB)
		}
	}
}

// CopyBasicFieldsFromRELATIONGROUP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsFromRELATIONGROUP(relationgroup *models.RELATIONGROUP) {
	// insertion point for fields commit

	relationgroupDB.Name_Data.String = relationgroup.Name
	relationgroupDB.Name_Data.Valid = true

	relationgroupDB.DESCAttr_Data.String = relationgroup.DESCAttr
	relationgroupDB.DESCAttr_Data.Valid = true

	relationgroupDB.IDENTIFIERAttr_Data.String = relationgroup.IDENTIFIERAttr
	relationgroupDB.IDENTIFIERAttr_Data.Valid = true

	relationgroupDB.LASTCHANGEAttr_Data.String = relationgroup.LASTCHANGEAttr
	relationgroupDB.LASTCHANGEAttr_Data.Valid = true

	relationgroupDB.LONGNAMEAttr_Data.String = relationgroup.LONGNAMEAttr
	relationgroupDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromRELATIONGROUP_WOP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsFromRELATIONGROUP_WOP(relationgroup *models.RELATIONGROUP_WOP) {
	// insertion point for fields commit

	relationgroupDB.Name_Data.String = relationgroup.Name
	relationgroupDB.Name_Data.Valid = true

	relationgroupDB.DESCAttr_Data.String = relationgroup.DESCAttr
	relationgroupDB.DESCAttr_Data.Valid = true

	relationgroupDB.IDENTIFIERAttr_Data.String = relationgroup.IDENTIFIERAttr
	relationgroupDB.IDENTIFIERAttr_Data.Valid = true

	relationgroupDB.LASTCHANGEAttr_Data.String = relationgroup.LASTCHANGEAttr
	relationgroupDB.LASTCHANGEAttr_Data.Valid = true

	relationgroupDB.LONGNAMEAttr_Data.String = relationgroup.LONGNAMEAttr
	relationgroupDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromRELATIONGROUPWOP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsFromRELATIONGROUPWOP(relationgroup *RELATIONGROUPWOP) {
	// insertion point for fields commit

	relationgroupDB.Name_Data.String = relationgroup.Name
	relationgroupDB.Name_Data.Valid = true

	relationgroupDB.DESCAttr_Data.String = relationgroup.DESCAttr
	relationgroupDB.DESCAttr_Data.Valid = true

	relationgroupDB.IDENTIFIERAttr_Data.String = relationgroup.IDENTIFIERAttr
	relationgroupDB.IDENTIFIERAttr_Data.Valid = true

	relationgroupDB.LASTCHANGEAttr_Data.String = relationgroup.LASTCHANGEAttr
	relationgroupDB.LASTCHANGEAttr_Data.Valid = true

	relationgroupDB.LONGNAMEAttr_Data.String = relationgroup.LONGNAMEAttr
	relationgroupDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToRELATIONGROUP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsToRELATIONGROUP(relationgroup *models.RELATIONGROUP) {
	// insertion point for checkout of basic fields (back repo to stage)
	relationgroup.Name = relationgroupDB.Name_Data.String
	relationgroup.DESCAttr = relationgroupDB.DESCAttr_Data.String
	relationgroup.IDENTIFIERAttr = relationgroupDB.IDENTIFIERAttr_Data.String
	relationgroup.LASTCHANGEAttr = relationgroupDB.LASTCHANGEAttr_Data.String
	relationgroup.LONGNAMEAttr = relationgroupDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToRELATIONGROUP_WOP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsToRELATIONGROUP_WOP(relationgroup *models.RELATIONGROUP_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	relationgroup.Name = relationgroupDB.Name_Data.String
	relationgroup.DESCAttr = relationgroupDB.DESCAttr_Data.String
	relationgroup.IDENTIFIERAttr = relationgroupDB.IDENTIFIERAttr_Data.String
	relationgroup.LASTCHANGEAttr = relationgroupDB.LASTCHANGEAttr_Data.String
	relationgroup.LONGNAMEAttr = relationgroupDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToRELATIONGROUPWOP
func (relationgroupDB *RELATIONGROUPDB) CopyBasicFieldsToRELATIONGROUPWOP(relationgroup *RELATIONGROUPWOP) {
	relationgroup.ID = int(relationgroupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	relationgroup.Name = relationgroupDB.Name_Data.String
	relationgroup.DESCAttr = relationgroupDB.DESCAttr_Data.String
	relationgroup.IDENTIFIERAttr = relationgroupDB.IDENTIFIERAttr_Data.String
	relationgroup.LASTCHANGEAttr = relationgroupDB.LASTCHANGEAttr_Data.String
	relationgroup.LONGNAMEAttr = relationgroupDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all RELATIONGROUPDB instances in the backrepo
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RELATIONGROUPDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATIONGROUPDB, 0)
	for _, relationgroupDB := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB {
		forBackup = append(forBackup, relationgroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RELATIONGROUP ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RELATIONGROUP file", err.Error())
	}
}

// Backup generates a json file from a slice of all RELATIONGROUPDB instances in the backrepo
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATIONGROUPDB, 0)
	for _, relationgroupDB := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB {
		forBackup = append(forBackup, relationgroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RELATIONGROUP")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RELATIONGROUP_Fields, -1)
	for _, relationgroupDB := range forBackup {

		var relationgroupWOP RELATIONGROUPWOP
		relationgroupDB.CopyBasicFieldsToRELATIONGROUPWOP(&relationgroupWOP)

		row := sh.AddRow()
		row.WriteStruct(&relationgroupWOP, -1)
	}
}

// RestoreXL from the "RELATIONGROUP" sheet all RELATIONGROUPDB instances
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRELATIONGROUPid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RELATIONGROUP"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRELATIONGROUP.rowVisitorRELATIONGROUP)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) rowVisitorRELATIONGROUP(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var relationgroupWOP RELATIONGROUPWOP
		row.ReadStruct(&relationgroupWOP)

		// add the unmarshalled struct to the stage
		relationgroupDB := new(RELATIONGROUPDB)
		relationgroupDB.CopyBasicFieldsFromRELATIONGROUPWOP(&relationgroupWOP)

		relationgroupDB_ID_atBackupTime := relationgroupDB.ID
		relationgroupDB.ID = 0
		query := backRepoRELATIONGROUP.db.Create(relationgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[relationgroupDB.ID] = relationgroupDB
		BackRepoRELATIONGROUPid_atBckpTime_newID[relationgroupDB_ID_atBackupTime] = relationgroupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RELATIONGROUPDB.json" in dirPath that stores an array
// of RELATIONGROUPDB and stores it in the database
// the map BackRepoRELATIONGROUPid_atBckpTime_newID is updated accordingly
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRELATIONGROUPid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RELATIONGROUPDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RELATIONGROUP file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RELATIONGROUPDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RELATIONGROUPDBID_RELATIONGROUPDB
	for _, relationgroupDB := range forRestore {

		relationgroupDB_ID_atBackupTime := relationgroupDB.ID
		relationgroupDB.ID = 0
		query := backRepoRELATIONGROUP.db.Create(relationgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[relationgroupDB.ID] = relationgroupDB
		BackRepoRELATIONGROUPid_atBckpTime_newID[relationgroupDB_ID_atBackupTime] = relationgroupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RELATIONGROUP file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RELATIONGROUP>id_atBckpTime_newID
// to compute new index
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) RestorePhaseTwo() {

	for _, relationgroupDB := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB {

		// next line of code is to avert unused variable compilation error
		_ = relationgroupDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if relationgroupDB.ALTERNATIVEIDID.Int64 != 0 {
			relationgroupDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(relationgroupDB.ALTERNATIVEIDID.Int64)])
			relationgroupDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing SOURCESPECIFICATION field
		if relationgroupDB.SOURCESPECIFICATIONID.Int64 != 0 {
			relationgroupDB.SOURCESPECIFICATIONID.Int64 = int64(BackRepoSOURCESPECIFICATIONid_atBckpTime_newID[uint(relationgroupDB.SOURCESPECIFICATIONID.Int64)])
			relationgroupDB.SOURCESPECIFICATIONID.Valid = true
		}

		// reindexing SPECRELATIONS field
		if relationgroupDB.SPECRELATIONSID.Int64 != 0 {
			relationgroupDB.SPECRELATIONSID.Int64 = int64(BackRepoSPECRELATIONSid_atBckpTime_newID[uint(relationgroupDB.SPECRELATIONSID.Int64)])
			relationgroupDB.SPECRELATIONSID.Valid = true
		}

		// reindexing TARGETSPECIFICATION field
		if relationgroupDB.TARGETSPECIFICATIONID.Int64 != 0 {
			relationgroupDB.TARGETSPECIFICATIONID.Int64 = int64(BackRepoTARGETSPECIFICATIONid_atBckpTime_newID[uint(relationgroupDB.TARGETSPECIFICATIONID.Int64)])
			relationgroupDB.TARGETSPECIFICATIONID.Valid = true
		}

		// reindexing TYPE field
		if relationgroupDB.TYPEID.Int64 != 0 {
			relationgroupDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(relationgroupDB.TYPEID.Int64)])
			relationgroupDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoRELATIONGROUP.db.Model(relationgroupDB).Updates(*relationgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRELATIONGROUP.ResetReversePointers commits all staged instances of RELATIONGROUP to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, relationgroup := range backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr {
		backRepoRELATIONGROUP.ResetReversePointersInstance(backRepo, idx, relationgroup)
	}

	return
}

func (backRepoRELATIONGROUP *BackRepoRELATIONGROUPStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, relationgroup *models.RELATIONGROUP) (Error error) {

	// fetch matching relationgroupDB
	if relationgroupDB, ok := backRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPDB[idx]; ok {
		_ = relationgroupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRELATIONGROUPid_atBckpTime_newID map[uint]uint
