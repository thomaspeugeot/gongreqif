// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECRELATIONGROUPS_sql sql.NullBool
var dummy_SPECRELATIONGROUPS_time time.Duration
var dummy_SPECRELATIONGROUPS_sort sort.Float64Slice

// SPECRELATIONGROUPSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specrelationgroupsAPI
type SPECRELATIONGROUPSAPI struct {
	gorm.Model

	models.SPECRELATIONGROUPS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECRELATIONGROUPSPointersEncoding SPECRELATIONGROUPSPointersEncoding
}

// SPECRELATIONGROUPSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECRELATIONGROUPSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field RELATIONGROUP is a slice of pointers to another Struct (optional or 0..1)
	RELATIONGROUP IntSlice `gorm:"type:TEXT"`
}

// SPECRELATIONGROUPSDB describes a specrelationgroups in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specrelationgroupsDB
type SPECRELATIONGROUPSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specrelationgroupsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECRELATIONGROUPSPointersEncoding
}

// SPECRELATIONGROUPSDBs arrays specrelationgroupsDBs
// swagger:response specrelationgroupsDBsResponse
type SPECRELATIONGROUPSDBs []SPECRELATIONGROUPSDB

// SPECRELATIONGROUPSDBResponse provides response
// swagger:response specrelationgroupsDBResponse
type SPECRELATIONGROUPSDBResponse struct {
	SPECRELATIONGROUPSDB
}

// SPECRELATIONGROUPSWOP is a SPECRELATIONGROUPS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECRELATIONGROUPSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECRELATIONGROUPS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECRELATIONGROUPSStruct struct {
	// stores SPECRELATIONGROUPSDB according to their gorm ID
	Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB map[uint]*SPECRELATIONGROUPSDB

	// stores SPECRELATIONGROUPSDB ID according to SPECRELATIONGROUPS address
	Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID map[*models.SPECRELATIONGROUPS]uint

	// stores SPECRELATIONGROUPS according to their gorm ID
	Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr map[uint]*models.SPECRELATIONGROUPS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECRELATIONGROUPS.stage
	return
}

func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) GetDB() *gorm.DB {
	return backRepoSPECRELATIONGROUPS.db
}

// GetSPECRELATIONGROUPSDBFromSPECRELATIONGROUPSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) GetSPECRELATIONGROUPSDBFromSPECRELATIONGROUPSPtr(specrelationgroups *models.SPECRELATIONGROUPS) (specrelationgroupsDB *SPECRELATIONGROUPSDB) {
	id := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]
	specrelationgroupsDB = backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[id]
	return
}

// BackRepoSPECRELATIONGROUPS.CommitPhaseOne commits all staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specrelationgroups := range stage.SPECRELATIONGROUPSs {
		backRepoSPECRELATIONGROUPS.CommitPhaseOneInstance(specrelationgroups)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specrelationgroups := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr {
		if _, ok := stage.SPECRELATIONGROUPSs[specrelationgroups]; !ok {
			backRepoSPECRELATIONGROUPS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECRELATIONGROUPS.CommitDeleteInstance commits deletion of SPECRELATIONGROUPS to the BackRepo
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CommitDeleteInstance(id uint) (Error error) {

	specrelationgroups := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[id]

	// specrelationgroups is not staged anymore, remove specrelationgroupsDB
	specrelationgroupsDB := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[id]
	query := backRepoSPECRELATIONGROUPS.db.Unscoped().Delete(&specrelationgroupsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID, specrelationgroups)
	delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr, id)
	delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB, id)

	return
}

// BackRepoSPECRELATIONGROUPS.CommitPhaseOneInstance commits specrelationgroups staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CommitPhaseOneInstance(specrelationgroups *models.SPECRELATIONGROUPS) (Error error) {

	// check if the specrelationgroups is not commited yet
	if _, ok := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]; ok {
		return
	}

	// initiate specrelationgroups
	var specrelationgroupsDB SPECRELATIONGROUPSDB
	specrelationgroupsDB.CopyBasicFieldsFromSPECRELATIONGROUPS(specrelationgroups)

	query := backRepoSPECRELATIONGROUPS.db.Create(&specrelationgroupsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups] = specrelationgroupsDB.ID
	backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[specrelationgroupsDB.ID] = specrelationgroups
	backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[specrelationgroupsDB.ID] = &specrelationgroupsDB

	return
}

// BackRepoSPECRELATIONGROUPS.CommitPhaseTwo commits all staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelationgroups := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr {
		backRepoSPECRELATIONGROUPS.CommitPhaseTwoInstance(backRepo, idx, specrelationgroups)
	}

	return
}

// BackRepoSPECRELATIONGROUPS.CommitPhaseTwoInstance commits {{structname }} of models.SPECRELATIONGROUPS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specrelationgroups *models.SPECRELATIONGROUPS) (Error error) {

	// fetch matching specrelationgroupsDB
	if specrelationgroupsDB, ok := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[idx]; ok {

		specrelationgroupsDB.CopyBasicFieldsFromSPECRELATIONGROUPS(specrelationgroups)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		specrelationgroupsDB.SPECRELATIONGROUPSPointersEncoding.RELATIONGROUP = make([]int, 0)
		// 2. encode
		for _, relationgroupAssocEnd := range specrelationgroups.RELATIONGROUP {
			relationgroupAssocEnd_DB :=
				backRepo.BackRepoRELATIONGROUP.GetRELATIONGROUPDBFromRELATIONGROUPPtr(relationgroupAssocEnd)
			
			// the stage might be inconsistant, meaning that the relationgroupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if relationgroupAssocEnd_DB == nil {
				continue
			}
			
			specrelationgroupsDB.SPECRELATIONGROUPSPointersEncoding.RELATIONGROUP =
				append(specrelationgroupsDB.SPECRELATIONGROUPSPointersEncoding.RELATIONGROUP, int(relationgroupAssocEnd_DB.ID))
		}

		query := backRepoSPECRELATIONGROUPS.db.Save(&specrelationgroupsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECRELATIONGROUPS intance %s", specrelationgroups.Name))
		return err
	}

	return
}

// BackRepoSPECRELATIONGROUPS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CheckoutPhaseOne() (Error error) {

	specrelationgroupsDBArray := make([]SPECRELATIONGROUPSDB, 0)
	query := backRepoSPECRELATIONGROUPS.db.Find(&specrelationgroupsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specrelationgroupsInstancesToBeRemovedFromTheStage := make(map[*models.SPECRELATIONGROUPS]any)
	for key, value := range backRepoSPECRELATIONGROUPS.stage.SPECRELATIONGROUPSs {
		specrelationgroupsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specrelationgroupsDB := range specrelationgroupsDBArray {
		backRepoSPECRELATIONGROUPS.CheckoutPhaseOneInstance(&specrelationgroupsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specrelationgroups, ok := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[specrelationgroupsDB.ID]
		if ok {
			delete(specrelationgroupsInstancesToBeRemovedFromTheStage, specrelationgroups)
		}
	}

	// remove from stage and back repo's 3 maps all specrelationgroupss that are not in the checkout
	for specrelationgroups := range specrelationgroupsInstancesToBeRemovedFromTheStage {
		specrelationgroups.Unstage(backRepoSPECRELATIONGROUPS.GetStage())

		// remove instance from the back repo 3 maps
		specrelationgroupsID := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]
		delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID, specrelationgroups)
		delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB, specrelationgroupsID)
		delete(backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr, specrelationgroupsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specrelationgroupsDB that has been found in the DB, updates the backRepo and stages the
// models version of the specrelationgroupsDB
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CheckoutPhaseOneInstance(specrelationgroupsDB *SPECRELATIONGROUPSDB) (Error error) {

	specrelationgroups, ok := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[specrelationgroupsDB.ID]
	if !ok {
		specrelationgroups = new(models.SPECRELATIONGROUPS)

		backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[specrelationgroupsDB.ID] = specrelationgroups
		backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups] = specrelationgroupsDB.ID

		// append model store with the new element
		specrelationgroups.Name = specrelationgroupsDB.Name_Data.String
		specrelationgroups.Stage(backRepoSPECRELATIONGROUPS.GetStage())
	}
	specrelationgroupsDB.CopyBasicFieldsToSPECRELATIONGROUPS(specrelationgroups)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specrelationgroups.Stage(backRepoSPECRELATIONGROUPS.GetStage())

	// preserve pointer to specrelationgroupsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB)[specrelationgroupsDB hold variable pointers
	specrelationgroupsDB_Data := *specrelationgroupsDB
	preservedPtrToSPECRELATIONGROUPS := &specrelationgroupsDB_Data
	backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[specrelationgroupsDB.ID] = preservedPtrToSPECRELATIONGROUPS

	return
}

// BackRepoSPECRELATIONGROUPS.CheckoutPhaseTwo Checkouts all staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specrelationgroupsDB := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB {
		backRepoSPECRELATIONGROUPS.CheckoutPhaseTwoInstance(backRepo, specrelationgroupsDB)
	}
	return
}

// BackRepoSPECRELATIONGROUPS.CheckoutPhaseTwoInstance Checkouts staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specrelationgroupsDB *SPECRELATIONGROUPSDB) (Error error) {

	specrelationgroups := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr[specrelationgroupsDB.ID]

	specrelationgroupsDB.DecodePointers(backRepo, specrelationgroups)

	return
}

func (specrelationgroupsDB *SPECRELATIONGROUPSDB) DecodePointers(backRepo *BackRepoStruct, specrelationgroups *models.SPECRELATIONGROUPS) {

	// insertion point for checkout of pointer encoding
	// This loop redeem specrelationgroups.RELATIONGROUP in the stage from the encode in the back repo
	// It parses all RELATIONGROUPDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specrelationgroups.RELATIONGROUP = specrelationgroups.RELATIONGROUP[:0]
	for _, _RELATIONGROUPid := range specrelationgroupsDB.SPECRELATIONGROUPSPointersEncoding.RELATIONGROUP {
		specrelationgroups.RELATIONGROUP = append(specrelationgroups.RELATIONGROUP, backRepo.BackRepoRELATIONGROUP.Map_RELATIONGROUPDBID_RELATIONGROUPPtr[uint(_RELATIONGROUPid)])
	}

	return
}

// CommitSPECRELATIONGROUPS allows commit of a single specrelationgroups (if already staged)
func (backRepo *BackRepoStruct) CommitSPECRELATIONGROUPS(specrelationgroups *models.SPECRELATIONGROUPS) {
	backRepo.BackRepoSPECRELATIONGROUPS.CommitPhaseOneInstance(specrelationgroups)
	if id, ok := backRepo.BackRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]; ok {
		backRepo.BackRepoSPECRELATIONGROUPS.CommitPhaseTwoInstance(backRepo, id, specrelationgroups)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECRELATIONGROUPS allows checkout of a single specrelationgroups (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECRELATIONGROUPS(specrelationgroups *models.SPECRELATIONGROUPS) {
	// check if the specrelationgroups is staged
	if _, ok := backRepo.BackRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]; ok {

		if id, ok := backRepo.BackRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSPtr_SPECRELATIONGROUPSDBID[specrelationgroups]; ok {
			var specrelationgroupsDB SPECRELATIONGROUPSDB
			specrelationgroupsDB.ID = id

			if err := backRepo.BackRepoSPECRELATIONGROUPS.db.First(&specrelationgroupsDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECRELATIONGROUPS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECRELATIONGROUPS.CheckoutPhaseOneInstance(&specrelationgroupsDB)
			backRepo.BackRepoSPECRELATIONGROUPS.CheckoutPhaseTwoInstance(backRepo, &specrelationgroupsDB)
		}
	}
}

// CopyBasicFieldsFromSPECRELATIONGROUPS
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsFromSPECRELATIONGROUPS(specrelationgroups *models.SPECRELATIONGROUPS) {
	// insertion point for fields commit

	specrelationgroupsDB.Name_Data.String = specrelationgroups.Name
	specrelationgroupsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATIONGROUPS_WOP
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsFromSPECRELATIONGROUPS_WOP(specrelationgroups *models.SPECRELATIONGROUPS_WOP) {
	// insertion point for fields commit

	specrelationgroupsDB.Name_Data.String = specrelationgroups.Name
	specrelationgroupsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATIONGROUPSWOP
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsFromSPECRELATIONGROUPSWOP(specrelationgroups *SPECRELATIONGROUPSWOP) {
	// insertion point for fields commit

	specrelationgroupsDB.Name_Data.String = specrelationgroups.Name
	specrelationgroupsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECRELATIONGROUPS
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsToSPECRELATIONGROUPS(specrelationgroups *models.SPECRELATIONGROUPS) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelationgroups.Name = specrelationgroupsDB.Name_Data.String
}

// CopyBasicFieldsToSPECRELATIONGROUPS_WOP
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsToSPECRELATIONGROUPS_WOP(specrelationgroups *models.SPECRELATIONGROUPS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelationgroups.Name = specrelationgroupsDB.Name_Data.String
}

// CopyBasicFieldsToSPECRELATIONGROUPSWOP
func (specrelationgroupsDB *SPECRELATIONGROUPSDB) CopyBasicFieldsToSPECRELATIONGROUPSWOP(specrelationgroups *SPECRELATIONGROUPSWOP) {
	specrelationgroups.ID = int(specrelationgroupsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specrelationgroups.Name = specrelationgroupsDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECRELATIONGROUPSDB instances in the backrepo
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECRELATIONGROUPSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONGROUPSDB, 0)
	for _, specrelationgroupsDB := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB {
		forBackup = append(forBackup, specrelationgroupsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECRELATIONGROUPS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECRELATIONGROUPS file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECRELATIONGROUPSDB instances in the backrepo
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONGROUPSDB, 0)
	for _, specrelationgroupsDB := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB {
		forBackup = append(forBackup, specrelationgroupsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECRELATIONGROUPS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECRELATIONGROUPS_Fields, -1)
	for _, specrelationgroupsDB := range forBackup {

		var specrelationgroupsWOP SPECRELATIONGROUPSWOP
		specrelationgroupsDB.CopyBasicFieldsToSPECRELATIONGROUPSWOP(&specrelationgroupsWOP)

		row := sh.AddRow()
		row.WriteStruct(&specrelationgroupsWOP, -1)
	}
}

// RestoreXL from the "SPECRELATIONGROUPS" sheet all SPECRELATIONGROUPSDB instances
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECRELATIONGROUPSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECRELATIONGROUPS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECRELATIONGROUPS.rowVisitorSPECRELATIONGROUPS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) rowVisitorSPECRELATIONGROUPS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specrelationgroupsWOP SPECRELATIONGROUPSWOP
		row.ReadStruct(&specrelationgroupsWOP)

		// add the unmarshalled struct to the stage
		specrelationgroupsDB := new(SPECRELATIONGROUPSDB)
		specrelationgroupsDB.CopyBasicFieldsFromSPECRELATIONGROUPSWOP(&specrelationgroupsWOP)

		specrelationgroupsDB_ID_atBackupTime := specrelationgroupsDB.ID
		specrelationgroupsDB.ID = 0
		query := backRepoSPECRELATIONGROUPS.db.Create(specrelationgroupsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[specrelationgroupsDB.ID] = specrelationgroupsDB
		BackRepoSPECRELATIONGROUPSid_atBckpTime_newID[specrelationgroupsDB_ID_atBackupTime] = specrelationgroupsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECRELATIONGROUPSDB.json" in dirPath that stores an array
// of SPECRELATIONGROUPSDB and stores it in the database
// the map BackRepoSPECRELATIONGROUPSid_atBckpTime_newID is updated accordingly
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECRELATIONGROUPSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECRELATIONGROUPSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECRELATIONGROUPS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECRELATIONGROUPSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB
	for _, specrelationgroupsDB := range forRestore {

		specrelationgroupsDB_ID_atBackupTime := specrelationgroupsDB.ID
		specrelationgroupsDB.ID = 0
		query := backRepoSPECRELATIONGROUPS.db.Create(specrelationgroupsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[specrelationgroupsDB.ID] = specrelationgroupsDB
		BackRepoSPECRELATIONGROUPSid_atBckpTime_newID[specrelationgroupsDB_ID_atBackupTime] = specrelationgroupsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECRELATIONGROUPS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECRELATIONGROUPS>id_atBckpTime_newID
// to compute new index
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) RestorePhaseTwo() {

	for _, specrelationgroupsDB := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB {

		// next line of code is to avert unused variable compilation error
		_ = specrelationgroupsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECRELATIONGROUPS.db.Model(specrelationgroupsDB).Updates(*specrelationgroupsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECRELATIONGROUPS.ResetReversePointers commits all staged instances of SPECRELATIONGROUPS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelationgroups := range backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSPtr {
		backRepoSPECRELATIONGROUPS.ResetReversePointersInstance(backRepo, idx, specrelationgroups)
	}

	return
}

func (backRepoSPECRELATIONGROUPS *BackRepoSPECRELATIONGROUPSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specrelationgroups *models.SPECRELATIONGROUPS) (Error error) {

	// fetch matching specrelationgroupsDB
	if specrelationgroupsDB, ok := backRepoSPECRELATIONGROUPS.Map_SPECRELATIONGROUPSDBID_SPECRELATIONGROUPSDB[idx]; ok {
		_ = specrelationgroupsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECRELATIONGROUPSid_atBckpTime_newID map[uint]uint
