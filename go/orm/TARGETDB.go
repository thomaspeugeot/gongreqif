// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TARGET_sql sql.NullBool
var dummy_TARGET_time time.Duration
var dummy_TARGET_sort sort.Float64Slice

// TARGETAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model targetAPI
type TARGETAPI struct {
	gorm.Model

	models.TARGET_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TARGETPointersEncoding TARGETPointersEncoding
}

// TARGETPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TARGETPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TARGETDB describes a target in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model targetDB
type TARGETDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field targetDB.Name
	Name_Data sql.NullString

	// Declation for basic field targetDB.SPECOBJECTREF
	SPECOBJECTREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TARGETPointersEncoding
}

// TARGETDBs arrays targetDBs
// swagger:response targetDBsResponse
type TARGETDBs []TARGETDB

// TARGETDBResponse provides response
// swagger:response targetDBResponse
type TARGETDBResponse struct {
	TARGETDB
}

// TARGETWOP is a TARGET without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TARGETWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPECOBJECTREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TARGET_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPECOBJECTREF",
}

type BackRepoTARGETStruct struct {
	// stores TARGETDB according to their gorm ID
	Map_TARGETDBID_TARGETDB map[uint]*TARGETDB

	// stores TARGETDB ID according to TARGET address
	Map_TARGETPtr_TARGETDBID map[*models.TARGET]uint

	// stores TARGET according to their gorm ID
	Map_TARGETDBID_TARGETPtr map[uint]*models.TARGET

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTARGET *BackRepoTARGETStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTARGET.stage
	return
}

func (backRepoTARGET *BackRepoTARGETStruct) GetDB() *gorm.DB {
	return backRepoTARGET.db
}

// GetTARGETDBFromTARGETPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTARGET *BackRepoTARGETStruct) GetTARGETDBFromTARGETPtr(target *models.TARGET) (targetDB *TARGETDB) {
	id := backRepoTARGET.Map_TARGETPtr_TARGETDBID[target]
	targetDB = backRepoTARGET.Map_TARGETDBID_TARGETDB[id]
	return
}

// BackRepoTARGET.CommitPhaseOne commits all staged instances of TARGET to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTARGET *BackRepoTARGETStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for target := range stage.TARGETs {
		backRepoTARGET.CommitPhaseOneInstance(target)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, target := range backRepoTARGET.Map_TARGETDBID_TARGETPtr {
		if _, ok := stage.TARGETs[target]; !ok {
			backRepoTARGET.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTARGET.CommitDeleteInstance commits deletion of TARGET to the BackRepo
func (backRepoTARGET *BackRepoTARGETStruct) CommitDeleteInstance(id uint) (Error error) {

	target := backRepoTARGET.Map_TARGETDBID_TARGETPtr[id]

	// target is not staged anymore, remove targetDB
	targetDB := backRepoTARGET.Map_TARGETDBID_TARGETDB[id]
	query := backRepoTARGET.db.Unscoped().Delete(&targetDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTARGET.Map_TARGETPtr_TARGETDBID, target)
	delete(backRepoTARGET.Map_TARGETDBID_TARGETPtr, id)
	delete(backRepoTARGET.Map_TARGETDBID_TARGETDB, id)

	return
}

// BackRepoTARGET.CommitPhaseOneInstance commits target staged instances of TARGET to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTARGET *BackRepoTARGETStruct) CommitPhaseOneInstance(target *models.TARGET) (Error error) {

	// check if the target is not commited yet
	if _, ok := backRepoTARGET.Map_TARGETPtr_TARGETDBID[target]; ok {
		return
	}

	// initiate target
	var targetDB TARGETDB
	targetDB.CopyBasicFieldsFromTARGET(target)

	query := backRepoTARGET.db.Create(&targetDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTARGET.Map_TARGETPtr_TARGETDBID[target] = targetDB.ID
	backRepoTARGET.Map_TARGETDBID_TARGETPtr[targetDB.ID] = target
	backRepoTARGET.Map_TARGETDBID_TARGETDB[targetDB.ID] = &targetDB

	return
}

// BackRepoTARGET.CommitPhaseTwo commits all staged instances of TARGET to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGET *BackRepoTARGETStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, target := range backRepoTARGET.Map_TARGETDBID_TARGETPtr {
		backRepoTARGET.CommitPhaseTwoInstance(backRepo, idx, target)
	}

	return
}

// BackRepoTARGET.CommitPhaseTwoInstance commits {{structname }} of models.TARGET to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGET *BackRepoTARGETStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, target *models.TARGET) (Error error) {

	// fetch matching targetDB
	if targetDB, ok := backRepoTARGET.Map_TARGETDBID_TARGETDB[idx]; ok {

		targetDB.CopyBasicFieldsFromTARGET(target)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTARGET.db.Save(&targetDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TARGET intance %s", target.Name))
		return err
	}

	return
}

// BackRepoTARGET.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTARGET *BackRepoTARGETStruct) CheckoutPhaseOne() (Error error) {

	targetDBArray := make([]TARGETDB, 0)
	query := backRepoTARGET.db.Find(&targetDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	targetInstancesToBeRemovedFromTheStage := make(map[*models.TARGET]any)
	for key, value := range backRepoTARGET.stage.TARGETs {
		targetInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, targetDB := range targetDBArray {
		backRepoTARGET.CheckoutPhaseOneInstance(&targetDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		target, ok := backRepoTARGET.Map_TARGETDBID_TARGETPtr[targetDB.ID]
		if ok {
			delete(targetInstancesToBeRemovedFromTheStage, target)
		}
	}

	// remove from stage and back repo's 3 maps all targets that are not in the checkout
	for target := range targetInstancesToBeRemovedFromTheStage {
		target.Unstage(backRepoTARGET.GetStage())

		// remove instance from the back repo 3 maps
		targetID := backRepoTARGET.Map_TARGETPtr_TARGETDBID[target]
		delete(backRepoTARGET.Map_TARGETPtr_TARGETDBID, target)
		delete(backRepoTARGET.Map_TARGETDBID_TARGETDB, targetID)
		delete(backRepoTARGET.Map_TARGETDBID_TARGETPtr, targetID)
	}

	return
}

// CheckoutPhaseOneInstance takes a targetDB that has been found in the DB, updates the backRepo and stages the
// models version of the targetDB
func (backRepoTARGET *BackRepoTARGETStruct) CheckoutPhaseOneInstance(targetDB *TARGETDB) (Error error) {

	target, ok := backRepoTARGET.Map_TARGETDBID_TARGETPtr[targetDB.ID]
	if !ok {
		target = new(models.TARGET)

		backRepoTARGET.Map_TARGETDBID_TARGETPtr[targetDB.ID] = target
		backRepoTARGET.Map_TARGETPtr_TARGETDBID[target] = targetDB.ID

		// append model store with the new element
		target.Name = targetDB.Name_Data.String
		target.Stage(backRepoTARGET.GetStage())
	}
	targetDB.CopyBasicFieldsToTARGET(target)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	target.Stage(backRepoTARGET.GetStage())

	// preserve pointer to targetDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TARGETDBID_TARGETDB)[targetDB hold variable pointers
	targetDB_Data := *targetDB
	preservedPtrToTARGET := &targetDB_Data
	backRepoTARGET.Map_TARGETDBID_TARGETDB[targetDB.ID] = preservedPtrToTARGET

	return
}

// BackRepoTARGET.CheckoutPhaseTwo Checkouts all staged instances of TARGET to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGET *BackRepoTARGETStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, targetDB := range backRepoTARGET.Map_TARGETDBID_TARGETDB {
		backRepoTARGET.CheckoutPhaseTwoInstance(backRepo, targetDB)
	}
	return
}

// BackRepoTARGET.CheckoutPhaseTwoInstance Checkouts staged instances of TARGET to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGET *BackRepoTARGETStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, targetDB *TARGETDB) (Error error) {

	target := backRepoTARGET.Map_TARGETDBID_TARGETPtr[targetDB.ID]

	targetDB.DecodePointers(backRepo, target)

	return
}

func (targetDB *TARGETDB) DecodePointers(backRepo *BackRepoStruct, target *models.TARGET) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTARGET allows commit of a single target (if already staged)
func (backRepo *BackRepoStruct) CommitTARGET(target *models.TARGET) {
	backRepo.BackRepoTARGET.CommitPhaseOneInstance(target)
	if id, ok := backRepo.BackRepoTARGET.Map_TARGETPtr_TARGETDBID[target]; ok {
		backRepo.BackRepoTARGET.CommitPhaseTwoInstance(backRepo, id, target)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTARGET allows checkout of a single target (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTARGET(target *models.TARGET) {
	// check if the target is staged
	if _, ok := backRepo.BackRepoTARGET.Map_TARGETPtr_TARGETDBID[target]; ok {

		if id, ok := backRepo.BackRepoTARGET.Map_TARGETPtr_TARGETDBID[target]; ok {
			var targetDB TARGETDB
			targetDB.ID = id

			if err := backRepo.BackRepoTARGET.db.First(&targetDB, id).Error; err != nil {
				log.Fatalln("CheckoutTARGET : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTARGET.CheckoutPhaseOneInstance(&targetDB)
			backRepo.BackRepoTARGET.CheckoutPhaseTwoInstance(backRepo, &targetDB)
		}
	}
}

// CopyBasicFieldsFromTARGET
func (targetDB *TARGETDB) CopyBasicFieldsFromTARGET(target *models.TARGET) {
	// insertion point for fields commit

	targetDB.Name_Data.String = target.Name
	targetDB.Name_Data.Valid = true

	targetDB.SPECOBJECTREF_Data.String = target.SPECOBJECTREF
	targetDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsFromTARGET_WOP
func (targetDB *TARGETDB) CopyBasicFieldsFromTARGET_WOP(target *models.TARGET_WOP) {
	// insertion point for fields commit

	targetDB.Name_Data.String = target.Name
	targetDB.Name_Data.Valid = true

	targetDB.SPECOBJECTREF_Data.String = target.SPECOBJECTREF
	targetDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsFromTARGETWOP
func (targetDB *TARGETDB) CopyBasicFieldsFromTARGETWOP(target *TARGETWOP) {
	// insertion point for fields commit

	targetDB.Name_Data.String = target.Name
	targetDB.Name_Data.Valid = true

	targetDB.SPECOBJECTREF_Data.String = target.SPECOBJECTREF
	targetDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsToTARGET
func (targetDB *TARGETDB) CopyBasicFieldsToTARGET(target *models.TARGET) {
	// insertion point for checkout of basic fields (back repo to stage)
	target.Name = targetDB.Name_Data.String
	target.SPECOBJECTREF = targetDB.SPECOBJECTREF_Data.String
}

// CopyBasicFieldsToTARGET_WOP
func (targetDB *TARGETDB) CopyBasicFieldsToTARGET_WOP(target *models.TARGET_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	target.Name = targetDB.Name_Data.String
	target.SPECOBJECTREF = targetDB.SPECOBJECTREF_Data.String
}

// CopyBasicFieldsToTARGETWOP
func (targetDB *TARGETDB) CopyBasicFieldsToTARGETWOP(target *TARGETWOP) {
	target.ID = int(targetDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	target.Name = targetDB.Name_Data.String
	target.SPECOBJECTREF = targetDB.SPECOBJECTREF_Data.String
}

// Backup generates a json file from a slice of all TARGETDB instances in the backrepo
func (backRepoTARGET *BackRepoTARGETStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TARGETDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TARGETDB, 0)
	for _, targetDB := range backRepoTARGET.Map_TARGETDBID_TARGETDB {
		forBackup = append(forBackup, targetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TARGET ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TARGET file", err.Error())
	}
}

// Backup generates a json file from a slice of all TARGETDB instances in the backrepo
func (backRepoTARGET *BackRepoTARGETStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TARGETDB, 0)
	for _, targetDB := range backRepoTARGET.Map_TARGETDBID_TARGETDB {
		forBackup = append(forBackup, targetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TARGET")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TARGET_Fields, -1)
	for _, targetDB := range forBackup {

		var targetWOP TARGETWOP
		targetDB.CopyBasicFieldsToTARGETWOP(&targetWOP)

		row := sh.AddRow()
		row.WriteStruct(&targetWOP, -1)
	}
}

// RestoreXL from the "TARGET" sheet all TARGETDB instances
func (backRepoTARGET *BackRepoTARGETStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTARGETid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TARGET"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTARGET.rowVisitorTARGET)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTARGET *BackRepoTARGETStruct) rowVisitorTARGET(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var targetWOP TARGETWOP
		row.ReadStruct(&targetWOP)

		// add the unmarshalled struct to the stage
		targetDB := new(TARGETDB)
		targetDB.CopyBasicFieldsFromTARGETWOP(&targetWOP)

		targetDB_ID_atBackupTime := targetDB.ID
		targetDB.ID = 0
		query := backRepoTARGET.db.Create(targetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTARGET.Map_TARGETDBID_TARGETDB[targetDB.ID] = targetDB
		BackRepoTARGETid_atBckpTime_newID[targetDB_ID_atBackupTime] = targetDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TARGETDB.json" in dirPath that stores an array
// of TARGETDB and stores it in the database
// the map BackRepoTARGETid_atBckpTime_newID is updated accordingly
func (backRepoTARGET *BackRepoTARGETStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTARGETid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TARGETDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TARGET file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TARGETDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TARGETDBID_TARGETDB
	for _, targetDB := range forRestore {

		targetDB_ID_atBackupTime := targetDB.ID
		targetDB.ID = 0
		query := backRepoTARGET.db.Create(targetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTARGET.Map_TARGETDBID_TARGETDB[targetDB.ID] = targetDB
		BackRepoTARGETid_atBckpTime_newID[targetDB_ID_atBackupTime] = targetDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TARGET file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TARGET>id_atBckpTime_newID
// to compute new index
func (backRepoTARGET *BackRepoTARGETStruct) RestorePhaseTwo() {

	for _, targetDB := range backRepoTARGET.Map_TARGETDBID_TARGETDB {

		// next line of code is to avert unused variable compilation error
		_ = targetDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTARGET.db.Model(targetDB).Updates(*targetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTARGET.ResetReversePointers commits all staged instances of TARGET to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGET *BackRepoTARGETStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, target := range backRepoTARGET.Map_TARGETDBID_TARGETPtr {
		backRepoTARGET.ResetReversePointersInstance(backRepo, idx, target)
	}

	return
}

func (backRepoTARGET *BackRepoTARGETStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, target *models.TARGET) (Error error) {

	// fetch matching targetDB
	if targetDB, ok := backRepoTARGET.Map_TARGETDBID_TARGETDB[idx]; ok {
		_ = targetDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTARGETid_atBckpTime_newID map[uint]uint
