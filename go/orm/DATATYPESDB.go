// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPES_sql sql.NullBool
var dummy_DATATYPES_time time.Duration
var dummy_DATATYPES_sort sort.Float64Slice

// DATATYPESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypesAPI
type DATATYPESAPI struct {
	gorm.Model

	models.DATATYPES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPESPointersEncoding DATATYPESPointersEncoding
}

// DATATYPESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DATATYPEDEFINITIONBOOLEAN is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONBOOLEAN IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONDATE is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONDATE IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONENUMERATION IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONINTEGER is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONINTEGER IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONREAL is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONREAL IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONSTRING is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONSTRING IntSlice `gorm:"type:TEXT"`

	// field DATATYPEDEFINITIONXHTML is a slice of pointers to another Struct (optional or 0..1)
	DATATYPEDEFINITIONXHTML IntSlice `gorm:"type:TEXT"`
}

// DATATYPESDB describes a datatypes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypesDB
type DATATYPESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPESPointersEncoding
}

// DATATYPESDBs arrays datatypesDBs
// swagger:response datatypesDBsResponse
type DATATYPESDBs []DATATYPESDB

// DATATYPESDBResponse provides response
// swagger:response datatypesDBResponse
type DATATYPESDBResponse struct {
	DATATYPESDB
}

// DATATYPESWOP is a DATATYPES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var DATATYPES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDATATYPESStruct struct {
	// stores DATATYPESDB according to their gorm ID
	Map_DATATYPESDBID_DATATYPESDB map[uint]*DATATYPESDB

	// stores DATATYPESDB ID according to DATATYPES address
	Map_DATATYPESPtr_DATATYPESDBID map[*models.DATATYPES]uint

	// stores DATATYPES according to their gorm ID
	Map_DATATYPESDBID_DATATYPESPtr map[uint]*models.DATATYPES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPES *BackRepoDATATYPESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPES.stage
	return
}

func (backRepoDATATYPES *BackRepoDATATYPESStruct) GetDB() *gorm.DB {
	return backRepoDATATYPES.db
}

// GetDATATYPESDBFromDATATYPESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPES *BackRepoDATATYPESStruct) GetDATATYPESDBFromDATATYPESPtr(datatypes *models.DATATYPES) (datatypesDB *DATATYPESDB) {
	id := backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]
	datatypesDB = backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[id]
	return
}

// BackRepoDATATYPES.CommitPhaseOne commits all staged instances of DATATYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypes := range stage.DATATYPESs {
		backRepoDATATYPES.CommitPhaseOneInstance(datatypes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypes := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr {
		if _, ok := stage.DATATYPESs[datatypes]; !ok {
			backRepoDATATYPES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPES.CommitDeleteInstance commits deletion of DATATYPES to the BackRepo
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypes := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[id]

	// datatypes is not staged anymore, remove datatypesDB
	datatypesDB := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[id]
	query := backRepoDATATYPES.db.Unscoped().Delete(&datatypesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID, datatypes)
	delete(backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr, id)
	delete(backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB, id)

	return
}

// BackRepoDATATYPES.CommitPhaseOneInstance commits datatypes staged instances of DATATYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CommitPhaseOneInstance(datatypes *models.DATATYPES) (Error error) {

	// check if the datatypes is not commited yet
	if _, ok := backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]; ok {
		return
	}

	// initiate datatypes
	var datatypesDB DATATYPESDB
	datatypesDB.CopyBasicFieldsFromDATATYPES(datatypes)

	query := backRepoDATATYPES.db.Create(&datatypesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes] = datatypesDB.ID
	backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[datatypesDB.ID] = datatypes
	backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[datatypesDB.ID] = &datatypesDB

	return
}

// BackRepoDATATYPES.CommitPhaseTwo commits all staged instances of DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypes := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr {
		backRepoDATATYPES.CommitPhaseTwoInstance(backRepo, idx, datatypes)
	}

	return
}

// BackRepoDATATYPES.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypes *models.DATATYPES) (Error error) {

	// fetch matching datatypesDB
	if datatypesDB, ok := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[idx]; ok {

		datatypesDB.CopyBasicFieldsFromDATATYPES(datatypes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONBOOLEAN = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionbooleanAssocEnd := range datatypes.DATATYPEDEFINITIONBOOLEAN {
			datatypedefinitionbooleanAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.GetDATATYPEDEFINITIONBOOLEANDBFromDATATYPEDEFINITIONBOOLEANPtr(datatypedefinitionbooleanAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionbooleanAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionbooleanAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONBOOLEAN =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONBOOLEAN, int(datatypedefinitionbooleanAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONDATE = make([]int, 0)
		// 2. encode
		for _, datatypedefinitiondateAssocEnd := range datatypes.DATATYPEDEFINITIONDATE {
			datatypedefinitiondateAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONDATE.GetDATATYPEDEFINITIONDATEDBFromDATATYPEDEFINITIONDATEPtr(datatypedefinitiondateAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitiondateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitiondateAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONDATE =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONDATE, int(datatypedefinitiondateAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONENUMERATION = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionenumerationAssocEnd := range datatypes.DATATYPEDEFINITIONENUMERATION {
			datatypedefinitionenumerationAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.GetDATATYPEDEFINITIONENUMERATIONDBFromDATATYPEDEFINITIONENUMERATIONPtr(datatypedefinitionenumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionenumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionenumerationAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONENUMERATION =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONENUMERATION, int(datatypedefinitionenumerationAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONINTEGER = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionintegerAssocEnd := range datatypes.DATATYPEDEFINITIONINTEGER {
			datatypedefinitionintegerAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONINTEGER.GetDATATYPEDEFINITIONINTEGERDBFromDATATYPEDEFINITIONINTEGERPtr(datatypedefinitionintegerAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionintegerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionintegerAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONINTEGER =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONINTEGER, int(datatypedefinitionintegerAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONREAL = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionrealAssocEnd := range datatypes.DATATYPEDEFINITIONREAL {
			datatypedefinitionrealAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONREAL.GetDATATYPEDEFINITIONREALDBFromDATATYPEDEFINITIONREALPtr(datatypedefinitionrealAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionrealAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionrealAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONREAL =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONREAL, int(datatypedefinitionrealAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONSTRING = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionstringAssocEnd := range datatypes.DATATYPEDEFINITIONSTRING {
			datatypedefinitionstringAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONSTRING.GetDATATYPEDEFINITIONSTRINGDBFromDATATYPEDEFINITIONSTRINGPtr(datatypedefinitionstringAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionstringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionstringAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONSTRING =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONSTRING, int(datatypedefinitionstringAssocEnd_DB.ID))
		}

		// 1. reset
		datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONXHTML = make([]int, 0)
		// 2. encode
		for _, datatypedefinitionxhtmlAssocEnd := range datatypes.DATATYPEDEFINITIONXHTML {
			datatypedefinitionxhtmlAssocEnd_DB :=
				backRepo.BackRepoDATATYPEDEFINITIONXHTML.GetDATATYPEDEFINITIONXHTMLDBFromDATATYPEDEFINITIONXHTMLPtr(datatypedefinitionxhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatypedefinitionxhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatypedefinitionxhtmlAssocEnd_DB == nil {
				continue
			}
			
			datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONXHTML =
				append(datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONXHTML, int(datatypedefinitionxhtmlAssocEnd_DB.ID))
		}

		query := backRepoDATATYPES.db.Save(&datatypesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPES intance %s", datatypes.Name))
		return err
	}

	return
}

// BackRepoDATATYPES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CheckoutPhaseOne() (Error error) {

	datatypesDBArray := make([]DATATYPESDB, 0)
	query := backRepoDATATYPES.db.Find(&datatypesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypesInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPES]any)
	for key, value := range backRepoDATATYPES.stage.DATATYPESs {
		datatypesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypesDB := range datatypesDBArray {
		backRepoDATATYPES.CheckoutPhaseOneInstance(&datatypesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypes, ok := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[datatypesDB.ID]
		if ok {
			delete(datatypesInstancesToBeRemovedFromTheStage, datatypes)
		}
	}

	// remove from stage and back repo's 3 maps all datatypess that are not in the checkout
	for datatypes := range datatypesInstancesToBeRemovedFromTheStage {
		datatypes.Unstage(backRepoDATATYPES.GetStage())

		// remove instance from the back repo 3 maps
		datatypesID := backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]
		delete(backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID, datatypes)
		delete(backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB, datatypesID)
		delete(backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr, datatypesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypesDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypesDB
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CheckoutPhaseOneInstance(datatypesDB *DATATYPESDB) (Error error) {

	datatypes, ok := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[datatypesDB.ID]
	if !ok {
		datatypes = new(models.DATATYPES)

		backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[datatypesDB.ID] = datatypes
		backRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes] = datatypesDB.ID

		// append model store with the new element
		datatypes.Name = datatypesDB.Name_Data.String
		datatypes.Stage(backRepoDATATYPES.GetStage())
	}
	datatypesDB.CopyBasicFieldsToDATATYPES(datatypes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypes.Stage(backRepoDATATYPES.GetStage())

	// preserve pointer to datatypesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPESDBID_DATATYPESDB)[datatypesDB hold variable pointers
	datatypesDB_Data := *datatypesDB
	preservedPtrToDATATYPES := &datatypesDB_Data
	backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[datatypesDB.ID] = preservedPtrToDATATYPES

	return
}

// BackRepoDATATYPES.CheckoutPhaseTwo Checkouts all staged instances of DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypesDB := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB {
		backRepoDATATYPES.CheckoutPhaseTwoInstance(backRepo, datatypesDB)
	}
	return
}

// BackRepoDATATYPES.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPES *BackRepoDATATYPESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypesDB *DATATYPESDB) (Error error) {

	datatypes := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr[datatypesDB.ID]

	datatypesDB.DecodePointers(backRepo, datatypes)

	return
}

func (datatypesDB *DATATYPESDB) DecodePointers(backRepo *BackRepoStruct, datatypes *models.DATATYPES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem datatypes.DATATYPEDEFINITIONBOOLEAN in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONBOOLEANDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONBOOLEAN = datatypes.DATATYPEDEFINITIONBOOLEAN[:0]
	for _, _DATATYPEDEFINITIONBOOLEANid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONBOOLEAN {
		datatypes.DATATYPEDEFINITIONBOOLEAN = append(datatypes.DATATYPEDEFINITIONBOOLEAN, backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[uint(_DATATYPEDEFINITIONBOOLEANid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONDATE in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONDATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONDATE = datatypes.DATATYPEDEFINITIONDATE[:0]
	for _, _DATATYPEDEFINITIONDATEid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONDATE {
		datatypes.DATATYPEDEFINITIONDATE = append(datatypes.DATATYPEDEFINITIONDATE, backRepo.BackRepoDATATYPEDEFINITIONDATE.Map_DATATYPEDEFINITIONDATEDBID_DATATYPEDEFINITIONDATEPtr[uint(_DATATYPEDEFINITIONDATEid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONENUMERATION in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONENUMERATION = datatypes.DATATYPEDEFINITIONENUMERATION[:0]
	for _, _DATATYPEDEFINITIONENUMERATIONid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONENUMERATION {
		datatypes.DATATYPEDEFINITIONENUMERATION = append(datatypes.DATATYPEDEFINITIONENUMERATION, backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[uint(_DATATYPEDEFINITIONENUMERATIONid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONINTEGER in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONINTEGERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONINTEGER = datatypes.DATATYPEDEFINITIONINTEGER[:0]
	for _, _DATATYPEDEFINITIONINTEGERid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONINTEGER {
		datatypes.DATATYPEDEFINITIONINTEGER = append(datatypes.DATATYPEDEFINITIONINTEGER, backRepo.BackRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[uint(_DATATYPEDEFINITIONINTEGERid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONREAL in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONREALDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONREAL = datatypes.DATATYPEDEFINITIONREAL[:0]
	for _, _DATATYPEDEFINITIONREALid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONREAL {
		datatypes.DATATYPEDEFINITIONREAL = append(datatypes.DATATYPEDEFINITIONREAL, backRepo.BackRepoDATATYPEDEFINITIONREAL.Map_DATATYPEDEFINITIONREALDBID_DATATYPEDEFINITIONREALPtr[uint(_DATATYPEDEFINITIONREALid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONSTRING in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONSTRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONSTRING = datatypes.DATATYPEDEFINITIONSTRING[:0]
	for _, _DATATYPEDEFINITIONSTRINGid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONSTRING {
		datatypes.DATATYPEDEFINITIONSTRING = append(datatypes.DATATYPEDEFINITIONSTRING, backRepo.BackRepoDATATYPEDEFINITIONSTRING.Map_DATATYPEDEFINITIONSTRINGDBID_DATATYPEDEFINITIONSTRINGPtr[uint(_DATATYPEDEFINITIONSTRINGid)])
	}

	// This loop redeem datatypes.DATATYPEDEFINITIONXHTML in the stage from the encode in the back repo
	// It parses all DATATYPEDEFINITIONXHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatypes.DATATYPEDEFINITIONXHTML = datatypes.DATATYPEDEFINITIONXHTML[:0]
	for _, _DATATYPEDEFINITIONXHTMLid := range datatypesDB.DATATYPESPointersEncoding.DATATYPEDEFINITIONXHTML {
		datatypes.DATATYPEDEFINITIONXHTML = append(datatypes.DATATYPEDEFINITIONXHTML, backRepo.BackRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[uint(_DATATYPEDEFINITIONXHTMLid)])
	}

	return
}

// CommitDATATYPES allows commit of a single datatypes (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPES(datatypes *models.DATATYPES) {
	backRepo.BackRepoDATATYPES.CommitPhaseOneInstance(datatypes)
	if id, ok := backRepo.BackRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]; ok {
		backRepo.BackRepoDATATYPES.CommitPhaseTwoInstance(backRepo, id, datatypes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPES allows checkout of a single datatypes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPES(datatypes *models.DATATYPES) {
	// check if the datatypes is staged
	if _, ok := backRepo.BackRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]; ok {

		if id, ok := backRepo.BackRepoDATATYPES.Map_DATATYPESPtr_DATATYPESDBID[datatypes]; ok {
			var datatypesDB DATATYPESDB
			datatypesDB.ID = id

			if err := backRepo.BackRepoDATATYPES.db.First(&datatypesDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPES.CheckoutPhaseOneInstance(&datatypesDB)
			backRepo.BackRepoDATATYPES.CheckoutPhaseTwoInstance(backRepo, &datatypesDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPES
func (datatypesDB *DATATYPESDB) CopyBasicFieldsFromDATATYPES(datatypes *models.DATATYPES) {
	// insertion point for fields commit

	datatypesDB.Name_Data.String = datatypes.Name
	datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPES_WOP
func (datatypesDB *DATATYPESDB) CopyBasicFieldsFromDATATYPES_WOP(datatypes *models.DATATYPES_WOP) {
	// insertion point for fields commit

	datatypesDB.Name_Data.String = datatypes.Name
	datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPESWOP
func (datatypesDB *DATATYPESDB) CopyBasicFieldsFromDATATYPESWOP(datatypes *DATATYPESWOP) {
	// insertion point for fields commit

	datatypesDB.Name_Data.String = datatypes.Name
	datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDATATYPES
func (datatypesDB *DATATYPESDB) CopyBasicFieldsToDATATYPES(datatypes *models.DATATYPES) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypes.Name = datatypesDB.Name_Data.String
}

// CopyBasicFieldsToDATATYPES_WOP
func (datatypesDB *DATATYPESDB) CopyBasicFieldsToDATATYPES_WOP(datatypes *models.DATATYPES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypes.Name = datatypesDB.Name_Data.String
}

// CopyBasicFieldsToDATATYPESWOP
func (datatypesDB *DATATYPESDB) CopyBasicFieldsToDATATYPESWOP(datatypes *DATATYPESWOP) {
	datatypes.ID = int(datatypesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypes.Name = datatypesDB.Name_Data.String
}

// Backup generates a json file from a slice of all DATATYPESDB instances in the backrepo
func (backRepoDATATYPES *BackRepoDATATYPESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPESDB, 0)
	for _, datatypesDB := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB {
		forBackup = append(forBackup, datatypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPES file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPESDB instances in the backrepo
func (backRepoDATATYPES *BackRepoDATATYPESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPESDB, 0)
	for _, datatypesDB := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB {
		forBackup = append(forBackup, datatypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPES_Fields, -1)
	for _, datatypesDB := range forBackup {

		var datatypesWOP DATATYPESWOP
		datatypesDB.CopyBasicFieldsToDATATYPESWOP(&datatypesWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypesWOP, -1)
	}
}

// RestoreXL from the "DATATYPES" sheet all DATATYPESDB instances
func (backRepoDATATYPES *BackRepoDATATYPESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPES.rowVisitorDATATYPES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPES *BackRepoDATATYPESStruct) rowVisitorDATATYPES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypesWOP DATATYPESWOP
		row.ReadStruct(&datatypesWOP)

		// add the unmarshalled struct to the stage
		datatypesDB := new(DATATYPESDB)
		datatypesDB.CopyBasicFieldsFromDATATYPESWOP(&datatypesWOP)

		datatypesDB_ID_atBackupTime := datatypesDB.ID
		datatypesDB.ID = 0
		query := backRepoDATATYPES.db.Create(datatypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[datatypesDB.ID] = datatypesDB
		BackRepoDATATYPESid_atBckpTime_newID[datatypesDB_ID_atBackupTime] = datatypesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPESDB.json" in dirPath that stores an array
// of DATATYPESDB and stores it in the database
// the map BackRepoDATATYPESid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPES *BackRepoDATATYPESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPESDBID_DATATYPESDB
	for _, datatypesDB := range forRestore {

		datatypesDB_ID_atBackupTime := datatypesDB.ID
		datatypesDB.ID = 0
		query := backRepoDATATYPES.db.Create(datatypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[datatypesDB.ID] = datatypesDB
		BackRepoDATATYPESid_atBckpTime_newID[datatypesDB_ID_atBackupTime] = datatypesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPES>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPES *BackRepoDATATYPESStruct) RestorePhaseTwo() {

	for _, datatypesDB := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDATATYPES.db.Model(datatypesDB).Updates(*datatypesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPES.ResetReversePointers commits all staged instances of DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPES *BackRepoDATATYPESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypes := range backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESPtr {
		backRepoDATATYPES.ResetReversePointersInstance(backRepo, idx, datatypes)
	}

	return
}

func (backRepoDATATYPES *BackRepoDATATYPESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypes *models.DATATYPES) (Error error) {

	// fetch matching datatypesDB
	if datatypesDB, ok := backRepoDATATYPES.Map_DATATYPESDBID_DATATYPESDB[idx]; ok {
		_ = datatypesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPESid_atBckpTime_newID map[uint]uint
