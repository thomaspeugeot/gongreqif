// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECOBJECTTYPE_sql sql.NullBool
var dummy_SPECOBJECTTYPE_time time.Duration
var dummy_SPECOBJECTTYPE_sort sort.Float64Slice

// SPECOBJECTTYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specobjecttypeAPI
type SPECOBJECTTYPEAPI struct {
	gorm.Model

	models.SPECOBJECTTYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECOBJECTTYPEPointersEncoding SPECOBJECTTYPEPointersEncoding
}

// SPECOBJECTTYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECOBJECTTYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field SPECATTRIBUTES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECATTRIBUTESID sql.NullInt64
}

// SPECOBJECTTYPEDB describes a specobjecttype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specobjecttypeDB
type SPECOBJECTTYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specobjecttypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field specobjecttypeDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field specobjecttypeDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field specobjecttypeDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field specobjecttypeDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECOBJECTTYPEPointersEncoding
}

// SPECOBJECTTYPEDBs arrays specobjecttypeDBs
// swagger:response specobjecttypeDBsResponse
type SPECOBJECTTYPEDBs []SPECOBJECTTYPEDB

// SPECOBJECTTYPEDBResponse provides response
// swagger:response specobjecttypeDBResponse
type SPECOBJECTTYPEDBResponse struct {
	SPECOBJECTTYPEDB
}

// SPECOBJECTTYPEWOP is a SPECOBJECTTYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECOBJECTTYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPECOBJECTTYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoSPECOBJECTTYPEStruct struct {
	// stores SPECOBJECTTYPEDB according to their gorm ID
	Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB map[uint]*SPECOBJECTTYPEDB

	// stores SPECOBJECTTYPEDB ID according to SPECOBJECTTYPE address
	Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID map[*models.SPECOBJECTTYPE]uint

	// stores SPECOBJECTTYPE according to their gorm ID
	Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr map[uint]*models.SPECOBJECTTYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECOBJECTTYPE.stage
	return
}

func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) GetDB() *gorm.DB {
	return backRepoSPECOBJECTTYPE.db
}

// GetSPECOBJECTTYPEDBFromSPECOBJECTTYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) GetSPECOBJECTTYPEDBFromSPECOBJECTTYPEPtr(specobjecttype *models.SPECOBJECTTYPE) (specobjecttypeDB *SPECOBJECTTYPEDB) {
	id := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]
	specobjecttypeDB = backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[id]
	return
}

// BackRepoSPECOBJECTTYPE.CommitPhaseOne commits all staged instances of SPECOBJECTTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specobjecttype := range stage.SPECOBJECTTYPEs {
		backRepoSPECOBJECTTYPE.CommitPhaseOneInstance(specobjecttype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specobjecttype := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr {
		if _, ok := stage.SPECOBJECTTYPEs[specobjecttype]; !ok {
			backRepoSPECOBJECTTYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECOBJECTTYPE.CommitDeleteInstance commits deletion of SPECOBJECTTYPE to the BackRepo
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	specobjecttype := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[id]

	// specobjecttype is not staged anymore, remove specobjecttypeDB
	specobjecttypeDB := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[id]
	query := backRepoSPECOBJECTTYPE.db.Unscoped().Delete(&specobjecttypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID, specobjecttype)
	delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr, id)
	delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB, id)

	return
}

// BackRepoSPECOBJECTTYPE.CommitPhaseOneInstance commits specobjecttype staged instances of SPECOBJECTTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CommitPhaseOneInstance(specobjecttype *models.SPECOBJECTTYPE) (Error error) {

	// check if the specobjecttype is not commited yet
	if _, ok := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]; ok {
		return
	}

	// initiate specobjecttype
	var specobjecttypeDB SPECOBJECTTYPEDB
	specobjecttypeDB.CopyBasicFieldsFromSPECOBJECTTYPE(specobjecttype)

	query := backRepoSPECOBJECTTYPE.db.Create(&specobjecttypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype] = specobjecttypeDB.ID
	backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[specobjecttypeDB.ID] = specobjecttype
	backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[specobjecttypeDB.ID] = &specobjecttypeDB

	return
}

// BackRepoSPECOBJECTTYPE.CommitPhaseTwo commits all staged instances of SPECOBJECTTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specobjecttype := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr {
		backRepoSPECOBJECTTYPE.CommitPhaseTwoInstance(backRepo, idx, specobjecttype)
	}

	return
}

// BackRepoSPECOBJECTTYPE.CommitPhaseTwoInstance commits {{structname }} of models.SPECOBJECTTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specobjecttype *models.SPECOBJECTTYPE) (Error error) {

	// fetch matching specobjecttypeDB
	if specobjecttypeDB, ok := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[idx]; ok {

		specobjecttypeDB.CopyBasicFieldsFromSPECOBJECTTYPE(specobjecttype)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value specobjecttype.ALTERNATIVEID translates to updating the specobjecttype.ALTERNATIVEIDID
		specobjecttypeDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if specobjecttype.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[specobjecttype.ALTERNATIVEID]; ok {
				specobjecttypeDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				specobjecttypeDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			specobjecttypeDB.ALTERNATIVEIDID.Int64 = 0
			specobjecttypeDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value specobjecttype.SPECATTRIBUTES translates to updating the specobjecttype.SPECATTRIBUTESID
		specobjecttypeDB.SPECATTRIBUTESID.Valid = true // allow for a 0 value (nil association)
		if specobjecttype.SPECATTRIBUTES != nil {
			if SPECATTRIBUTESId, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specobjecttype.SPECATTRIBUTES]; ok {
				specobjecttypeDB.SPECATTRIBUTESID.Int64 = int64(SPECATTRIBUTESId)
				specobjecttypeDB.SPECATTRIBUTESID.Valid = true
			}
		} else {
			specobjecttypeDB.SPECATTRIBUTESID.Int64 = 0
			specobjecttypeDB.SPECATTRIBUTESID.Valid = true
		}

		query := backRepoSPECOBJECTTYPE.db.Save(&specobjecttypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECOBJECTTYPE intance %s", specobjecttype.Name))
		return err
	}

	return
}

// BackRepoSPECOBJECTTYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CheckoutPhaseOne() (Error error) {

	specobjecttypeDBArray := make([]SPECOBJECTTYPEDB, 0)
	query := backRepoSPECOBJECTTYPE.db.Find(&specobjecttypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specobjecttypeInstancesToBeRemovedFromTheStage := make(map[*models.SPECOBJECTTYPE]any)
	for key, value := range backRepoSPECOBJECTTYPE.stage.SPECOBJECTTYPEs {
		specobjecttypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specobjecttypeDB := range specobjecttypeDBArray {
		backRepoSPECOBJECTTYPE.CheckoutPhaseOneInstance(&specobjecttypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specobjecttype, ok := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[specobjecttypeDB.ID]
		if ok {
			delete(specobjecttypeInstancesToBeRemovedFromTheStage, specobjecttype)
		}
	}

	// remove from stage and back repo's 3 maps all specobjecttypes that are not in the checkout
	for specobjecttype := range specobjecttypeInstancesToBeRemovedFromTheStage {
		specobjecttype.Unstage(backRepoSPECOBJECTTYPE.GetStage())

		// remove instance from the back repo 3 maps
		specobjecttypeID := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]
		delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID, specobjecttype)
		delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB, specobjecttypeID)
		delete(backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr, specobjecttypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specobjecttypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the specobjecttypeDB
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CheckoutPhaseOneInstance(specobjecttypeDB *SPECOBJECTTYPEDB) (Error error) {

	specobjecttype, ok := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[specobjecttypeDB.ID]
	if !ok {
		specobjecttype = new(models.SPECOBJECTTYPE)

		backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[specobjecttypeDB.ID] = specobjecttype
		backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype] = specobjecttypeDB.ID

		// append model store with the new element
		specobjecttype.Name = specobjecttypeDB.Name_Data.String
		specobjecttype.Stage(backRepoSPECOBJECTTYPE.GetStage())
	}
	specobjecttypeDB.CopyBasicFieldsToSPECOBJECTTYPE(specobjecttype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specobjecttype.Stage(backRepoSPECOBJECTTYPE.GetStage())

	// preserve pointer to specobjecttypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB)[specobjecttypeDB hold variable pointers
	specobjecttypeDB_Data := *specobjecttypeDB
	preservedPtrToSPECOBJECTTYPE := &specobjecttypeDB_Data
	backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[specobjecttypeDB.ID] = preservedPtrToSPECOBJECTTYPE

	return
}

// BackRepoSPECOBJECTTYPE.CheckoutPhaseTwo Checkouts all staged instances of SPECOBJECTTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specobjecttypeDB := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB {
		backRepoSPECOBJECTTYPE.CheckoutPhaseTwoInstance(backRepo, specobjecttypeDB)
	}
	return
}

// BackRepoSPECOBJECTTYPE.CheckoutPhaseTwoInstance Checkouts staged instances of SPECOBJECTTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specobjecttypeDB *SPECOBJECTTYPEDB) (Error error) {

	specobjecttype := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr[specobjecttypeDB.ID]

	specobjecttypeDB.DecodePointers(backRepo, specobjecttype)

	return
}

func (specobjecttypeDB *SPECOBJECTTYPEDB) DecodePointers(backRepo *BackRepoStruct, specobjecttype *models.SPECOBJECTTYPE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	specobjecttype.ALTERNATIVEID = nil
	if specobjecttypeDB.ALTERNATIVEIDID.Int64 != 0 {
		specobjecttype.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(specobjecttypeDB.ALTERNATIVEIDID.Int64)]
	}
	// SPECATTRIBUTES field
	specobjecttype.SPECATTRIBUTES = nil
	if specobjecttypeDB.SPECATTRIBUTESID.Int64 != 0 {
		specobjecttype.SPECATTRIBUTES = backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[uint(specobjecttypeDB.SPECATTRIBUTESID.Int64)]
	}
	return
}

// CommitSPECOBJECTTYPE allows commit of a single specobjecttype (if already staged)
func (backRepo *BackRepoStruct) CommitSPECOBJECTTYPE(specobjecttype *models.SPECOBJECTTYPE) {
	backRepo.BackRepoSPECOBJECTTYPE.CommitPhaseOneInstance(specobjecttype)
	if id, ok := backRepo.BackRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]; ok {
		backRepo.BackRepoSPECOBJECTTYPE.CommitPhaseTwoInstance(backRepo, id, specobjecttype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECOBJECTTYPE allows checkout of a single specobjecttype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECOBJECTTYPE(specobjecttype *models.SPECOBJECTTYPE) {
	// check if the specobjecttype is staged
	if _, ok := backRepo.BackRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]; ok {

		if id, ok := backRepo.BackRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEPtr_SPECOBJECTTYPEDBID[specobjecttype]; ok {
			var specobjecttypeDB SPECOBJECTTYPEDB
			specobjecttypeDB.ID = id

			if err := backRepo.BackRepoSPECOBJECTTYPE.db.First(&specobjecttypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECOBJECTTYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECOBJECTTYPE.CheckoutPhaseOneInstance(&specobjecttypeDB)
			backRepo.BackRepoSPECOBJECTTYPE.CheckoutPhaseTwoInstance(backRepo, &specobjecttypeDB)
		}
	}
}

// CopyBasicFieldsFromSPECOBJECTTYPE
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsFromSPECOBJECTTYPE(specobjecttype *models.SPECOBJECTTYPE) {
	// insertion point for fields commit

	specobjecttypeDB.Name_Data.String = specobjecttype.Name
	specobjecttypeDB.Name_Data.Valid = true

	specobjecttypeDB.DESCAttr_Data.String = specobjecttype.DESCAttr
	specobjecttypeDB.DESCAttr_Data.Valid = true

	specobjecttypeDB.IDENTIFIERAttr_Data.String = specobjecttype.IDENTIFIERAttr
	specobjecttypeDB.IDENTIFIERAttr_Data.Valid = true

	specobjecttypeDB.LASTCHANGEAttr_Data.String = specobjecttype.LASTCHANGEAttr
	specobjecttypeDB.LASTCHANGEAttr_Data.Valid = true

	specobjecttypeDB.LONGNAMEAttr_Data.String = specobjecttype.LONGNAMEAttr
	specobjecttypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECOBJECTTYPE_WOP
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsFromSPECOBJECTTYPE_WOP(specobjecttype *models.SPECOBJECTTYPE_WOP) {
	// insertion point for fields commit

	specobjecttypeDB.Name_Data.String = specobjecttype.Name
	specobjecttypeDB.Name_Data.Valid = true

	specobjecttypeDB.DESCAttr_Data.String = specobjecttype.DESCAttr
	specobjecttypeDB.DESCAttr_Data.Valid = true

	specobjecttypeDB.IDENTIFIERAttr_Data.String = specobjecttype.IDENTIFIERAttr
	specobjecttypeDB.IDENTIFIERAttr_Data.Valid = true

	specobjecttypeDB.LASTCHANGEAttr_Data.String = specobjecttype.LASTCHANGEAttr
	specobjecttypeDB.LASTCHANGEAttr_Data.Valid = true

	specobjecttypeDB.LONGNAMEAttr_Data.String = specobjecttype.LONGNAMEAttr
	specobjecttypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECOBJECTTYPEWOP
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsFromSPECOBJECTTYPEWOP(specobjecttype *SPECOBJECTTYPEWOP) {
	// insertion point for fields commit

	specobjecttypeDB.Name_Data.String = specobjecttype.Name
	specobjecttypeDB.Name_Data.Valid = true

	specobjecttypeDB.DESCAttr_Data.String = specobjecttype.DESCAttr
	specobjecttypeDB.DESCAttr_Data.Valid = true

	specobjecttypeDB.IDENTIFIERAttr_Data.String = specobjecttype.IDENTIFIERAttr
	specobjecttypeDB.IDENTIFIERAttr_Data.Valid = true

	specobjecttypeDB.LASTCHANGEAttr_Data.String = specobjecttype.LASTCHANGEAttr
	specobjecttypeDB.LASTCHANGEAttr_Data.Valid = true

	specobjecttypeDB.LONGNAMEAttr_Data.String = specobjecttype.LONGNAMEAttr
	specobjecttypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToSPECOBJECTTYPE
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsToSPECOBJECTTYPE(specobjecttype *models.SPECOBJECTTYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	specobjecttype.Name = specobjecttypeDB.Name_Data.String
	specobjecttype.DESCAttr = specobjecttypeDB.DESCAttr_Data.String
	specobjecttype.IDENTIFIERAttr = specobjecttypeDB.IDENTIFIERAttr_Data.String
	specobjecttype.LASTCHANGEAttr = specobjecttypeDB.LASTCHANGEAttr_Data.String
	specobjecttype.LONGNAMEAttr = specobjecttypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECOBJECTTYPE_WOP
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsToSPECOBJECTTYPE_WOP(specobjecttype *models.SPECOBJECTTYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specobjecttype.Name = specobjecttypeDB.Name_Data.String
	specobjecttype.DESCAttr = specobjecttypeDB.DESCAttr_Data.String
	specobjecttype.IDENTIFIERAttr = specobjecttypeDB.IDENTIFIERAttr_Data.String
	specobjecttype.LASTCHANGEAttr = specobjecttypeDB.LASTCHANGEAttr_Data.String
	specobjecttype.LONGNAMEAttr = specobjecttypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECOBJECTTYPEWOP
func (specobjecttypeDB *SPECOBJECTTYPEDB) CopyBasicFieldsToSPECOBJECTTYPEWOP(specobjecttype *SPECOBJECTTYPEWOP) {
	specobjecttype.ID = int(specobjecttypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specobjecttype.Name = specobjecttypeDB.Name_Data.String
	specobjecttype.DESCAttr = specobjecttypeDB.DESCAttr_Data.String
	specobjecttype.IDENTIFIERAttr = specobjecttypeDB.IDENTIFIERAttr_Data.String
	specobjecttype.LASTCHANGEAttr = specobjecttypeDB.LASTCHANGEAttr_Data.String
	specobjecttype.LONGNAMEAttr = specobjecttypeDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all SPECOBJECTTYPEDB instances in the backrepo
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECOBJECTTYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECOBJECTTYPEDB, 0)
	for _, specobjecttypeDB := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB {
		forBackup = append(forBackup, specobjecttypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECOBJECTTYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECOBJECTTYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECOBJECTTYPEDB instances in the backrepo
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECOBJECTTYPEDB, 0)
	for _, specobjecttypeDB := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB {
		forBackup = append(forBackup, specobjecttypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECOBJECTTYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECOBJECTTYPE_Fields, -1)
	for _, specobjecttypeDB := range forBackup {

		var specobjecttypeWOP SPECOBJECTTYPEWOP
		specobjecttypeDB.CopyBasicFieldsToSPECOBJECTTYPEWOP(&specobjecttypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&specobjecttypeWOP, -1)
	}
}

// RestoreXL from the "SPECOBJECTTYPE" sheet all SPECOBJECTTYPEDB instances
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECOBJECTTYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECOBJECTTYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECOBJECTTYPE.rowVisitorSPECOBJECTTYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) rowVisitorSPECOBJECTTYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specobjecttypeWOP SPECOBJECTTYPEWOP
		row.ReadStruct(&specobjecttypeWOP)

		// add the unmarshalled struct to the stage
		specobjecttypeDB := new(SPECOBJECTTYPEDB)
		specobjecttypeDB.CopyBasicFieldsFromSPECOBJECTTYPEWOP(&specobjecttypeWOP)

		specobjecttypeDB_ID_atBackupTime := specobjecttypeDB.ID
		specobjecttypeDB.ID = 0
		query := backRepoSPECOBJECTTYPE.db.Create(specobjecttypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[specobjecttypeDB.ID] = specobjecttypeDB
		BackRepoSPECOBJECTTYPEid_atBckpTime_newID[specobjecttypeDB_ID_atBackupTime] = specobjecttypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECOBJECTTYPEDB.json" in dirPath that stores an array
// of SPECOBJECTTYPEDB and stores it in the database
// the map BackRepoSPECOBJECTTYPEid_atBckpTime_newID is updated accordingly
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECOBJECTTYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECOBJECTTYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECOBJECTTYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECOBJECTTYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB
	for _, specobjecttypeDB := range forRestore {

		specobjecttypeDB_ID_atBackupTime := specobjecttypeDB.ID
		specobjecttypeDB.ID = 0
		query := backRepoSPECOBJECTTYPE.db.Create(specobjecttypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[specobjecttypeDB.ID] = specobjecttypeDB
		BackRepoSPECOBJECTTYPEid_atBckpTime_newID[specobjecttypeDB_ID_atBackupTime] = specobjecttypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECOBJECTTYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECOBJECTTYPE>id_atBckpTime_newID
// to compute new index
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) RestorePhaseTwo() {

	for _, specobjecttypeDB := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = specobjecttypeDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if specobjecttypeDB.ALTERNATIVEIDID.Int64 != 0 {
			specobjecttypeDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(specobjecttypeDB.ALTERNATIVEIDID.Int64)])
			specobjecttypeDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing SPECATTRIBUTES field
		if specobjecttypeDB.SPECATTRIBUTESID.Int64 != 0 {
			specobjecttypeDB.SPECATTRIBUTESID.Int64 = int64(BackRepoSPECATTRIBUTESid_atBckpTime_newID[uint(specobjecttypeDB.SPECATTRIBUTESID.Int64)])
			specobjecttypeDB.SPECATTRIBUTESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSPECOBJECTTYPE.db.Model(specobjecttypeDB).Updates(*specobjecttypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECOBJECTTYPE.ResetReversePointers commits all staged instances of SPECOBJECTTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specobjecttype := range backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEPtr {
		backRepoSPECOBJECTTYPE.ResetReversePointersInstance(backRepo, idx, specobjecttype)
	}

	return
}

func (backRepoSPECOBJECTTYPE *BackRepoSPECOBJECTTYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specobjecttype *models.SPECOBJECTTYPE) (Error error) {

	// fetch matching specobjecttypeDB
	if specobjecttypeDB, ok := backRepoSPECOBJECTTYPE.Map_SPECOBJECTTYPEDBID_SPECOBJECTTYPEDB[idx]; ok {
		_ = specobjecttypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECOBJECTTYPEid_atBckpTime_newID map[uint]uint
