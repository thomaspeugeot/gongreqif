// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEVALUEXHTML_sql sql.NullBool
var dummy_ATTRIBUTEVALUEXHTML_time time.Duration
var dummy_ATTRIBUTEVALUEXHTML_sort sort.Float64Slice

// ATTRIBUTEVALUEXHTMLAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributevaluexhtmlAPI
type ATTRIBUTEVALUEXHTMLAPI struct {
	gorm.Model

	models.ATTRIBUTEVALUEXHTML_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEVALUEXHTMLPointersEncoding ATTRIBUTEVALUEXHTMLPointersEncoding
}

// ATTRIBUTEVALUEXHTMLPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEVALUEXHTMLPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field THEVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	THEVALUEID sql.NullInt64

	// field THEORIGINALVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	THEORIGINALVALUEID sql.NullInt64

	// field DEFINITION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFINITIONID sql.NullInt64
}

// ATTRIBUTEVALUEXHTMLDB describes a attributevaluexhtml in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributevaluexhtmlDB
type ATTRIBUTEVALUEXHTMLDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributevaluexhtmlDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributevaluexhtmlDB.ISSIMPLIFIEDAttr
	// provide the sql storage for the boolan
	ISSIMPLIFIEDAttr_Data sql.NullBool
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEVALUEXHTMLPointersEncoding
}

// ATTRIBUTEVALUEXHTMLDBs arrays attributevaluexhtmlDBs
// swagger:response attributevaluexhtmlDBsResponse
type ATTRIBUTEVALUEXHTMLDBs []ATTRIBUTEVALUEXHTMLDB

// ATTRIBUTEVALUEXHTMLDBResponse provides response
// swagger:response attributevaluexhtmlDBResponse
type ATTRIBUTEVALUEXHTMLDBResponse struct {
	ATTRIBUTEVALUEXHTMLDB
}

// ATTRIBUTEVALUEXHTMLWOP is a ATTRIBUTEVALUEXHTML without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEVALUEXHTMLWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ISSIMPLIFIEDAttr bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEVALUEXHTML_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ISSIMPLIFIEDAttr",
}

type BackRepoATTRIBUTEVALUEXHTMLStruct struct {
	// stores ATTRIBUTEVALUEXHTMLDB according to their gorm ID
	Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB map[uint]*ATTRIBUTEVALUEXHTMLDB

	// stores ATTRIBUTEVALUEXHTMLDB ID according to ATTRIBUTEVALUEXHTML address
	Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID map[*models.ATTRIBUTEVALUEXHTML]uint

	// stores ATTRIBUTEVALUEXHTML according to their gorm ID
	Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr map[uint]*models.ATTRIBUTEVALUEXHTML

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEVALUEXHTML.stage
	return
}

func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEVALUEXHTML.db
}

// GetATTRIBUTEVALUEXHTMLDBFromATTRIBUTEVALUEXHTMLPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) GetATTRIBUTEVALUEXHTMLDBFromATTRIBUTEVALUEXHTMLPtr(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) {
	id := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]
	attributevaluexhtmlDB = backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[id]
	return
}

// BackRepoATTRIBUTEVALUEXHTML.CommitPhaseOne commits all staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributevaluexhtml := range stage.ATTRIBUTEVALUEXHTMLs {
		backRepoATTRIBUTEVALUEXHTML.CommitPhaseOneInstance(attributevaluexhtml)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributevaluexhtml := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr {
		if _, ok := stage.ATTRIBUTEVALUEXHTMLs[attributevaluexhtml]; !ok {
			backRepoATTRIBUTEVALUEXHTML.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CommitDeleteInstance commits deletion of ATTRIBUTEVALUEXHTML to the BackRepo
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CommitDeleteInstance(id uint) (Error error) {

	attributevaluexhtml := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[id]

	// attributevaluexhtml is not staged anymore, remove attributevaluexhtmlDB
	attributevaluexhtmlDB := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[id]
	query := backRepoATTRIBUTEVALUEXHTML.db.Unscoped().Delete(&attributevaluexhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID, attributevaluexhtml)
	delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr, id)
	delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB, id)

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CommitPhaseOneInstance commits attributevaluexhtml staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CommitPhaseOneInstance(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) (Error error) {

	// check if the attributevaluexhtml is not commited yet
	if _, ok := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]; ok {
		return
	}

	// initiate attributevaluexhtml
	var attributevaluexhtmlDB ATTRIBUTEVALUEXHTMLDB
	attributevaluexhtmlDB.CopyBasicFieldsFromATTRIBUTEVALUEXHTML(attributevaluexhtml)

	query := backRepoATTRIBUTEVALUEXHTML.db.Create(&attributevaluexhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml] = attributevaluexhtmlDB.ID
	backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[attributevaluexhtmlDB.ID] = attributevaluexhtml
	backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[attributevaluexhtmlDB.ID] = &attributevaluexhtmlDB

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CommitPhaseTwo commits all staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevaluexhtml := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr {
		backRepoATTRIBUTEVALUEXHTML.CommitPhaseTwoInstance(backRepo, idx, attributevaluexhtml)
	}

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEVALUEXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) (Error error) {

	// fetch matching attributevaluexhtmlDB
	if attributevaluexhtmlDB, ok := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[idx]; ok {

		attributevaluexhtmlDB.CopyBasicFieldsFromATTRIBUTEVALUEXHTML(attributevaluexhtml)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributevaluexhtml.THEVALUE translates to updating the attributevaluexhtml.THEVALUEID
		attributevaluexhtmlDB.THEVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributevaluexhtml.THEVALUE != nil {
			if THEVALUEId, ok := backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[attributevaluexhtml.THEVALUE]; ok {
				attributevaluexhtmlDB.THEVALUEID.Int64 = int64(THEVALUEId)
				attributevaluexhtmlDB.THEVALUEID.Valid = true
			}
		} else {
			attributevaluexhtmlDB.THEVALUEID.Int64 = 0
			attributevaluexhtmlDB.THEVALUEID.Valid = true
		}

		// commit pointer value attributevaluexhtml.THEORIGINALVALUE translates to updating the attributevaluexhtml.THEORIGINALVALUEID
		attributevaluexhtmlDB.THEORIGINALVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributevaluexhtml.THEORIGINALVALUE != nil {
			if THEORIGINALVALUEId, ok := backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[attributevaluexhtml.THEORIGINALVALUE]; ok {
				attributevaluexhtmlDB.THEORIGINALVALUEID.Int64 = int64(THEORIGINALVALUEId)
				attributevaluexhtmlDB.THEORIGINALVALUEID.Valid = true
			}
		} else {
			attributevaluexhtmlDB.THEORIGINALVALUEID.Int64 = 0
			attributevaluexhtmlDB.THEORIGINALVALUEID.Valid = true
		}

		// commit pointer value attributevaluexhtml.DEFINITION translates to updating the attributevaluexhtml.DEFINITIONID
		attributevaluexhtmlDB.DEFINITIONID.Valid = true // allow for a 0 value (nil association)
		if attributevaluexhtml.DEFINITION != nil {
			if DEFINITIONId, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[attributevaluexhtml.DEFINITION]; ok {
				attributevaluexhtmlDB.DEFINITIONID.Int64 = int64(DEFINITIONId)
				attributevaluexhtmlDB.DEFINITIONID.Valid = true
			}
		} else {
			attributevaluexhtmlDB.DEFINITIONID.Int64 = 0
			attributevaluexhtmlDB.DEFINITIONID.Valid = true
		}

		query := backRepoATTRIBUTEVALUEXHTML.db.Save(&attributevaluexhtmlDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEVALUEXHTML intance %s", attributevaluexhtml.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CheckoutPhaseOne() (Error error) {

	attributevaluexhtmlDBArray := make([]ATTRIBUTEVALUEXHTMLDB, 0)
	query := backRepoATTRIBUTEVALUEXHTML.db.Find(&attributevaluexhtmlDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributevaluexhtmlInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEVALUEXHTML]any)
	for key, value := range backRepoATTRIBUTEVALUEXHTML.stage.ATTRIBUTEVALUEXHTMLs {
		attributevaluexhtmlInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributevaluexhtmlDB := range attributevaluexhtmlDBArray {
		backRepoATTRIBUTEVALUEXHTML.CheckoutPhaseOneInstance(&attributevaluexhtmlDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributevaluexhtml, ok := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[attributevaluexhtmlDB.ID]
		if ok {
			delete(attributevaluexhtmlInstancesToBeRemovedFromTheStage, attributevaluexhtml)
		}
	}

	// remove from stage and back repo's 3 maps all attributevaluexhtmls that are not in the checkout
	for attributevaluexhtml := range attributevaluexhtmlInstancesToBeRemovedFromTheStage {
		attributevaluexhtml.Unstage(backRepoATTRIBUTEVALUEXHTML.GetStage())

		// remove instance from the back repo 3 maps
		attributevaluexhtmlID := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]
		delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID, attributevaluexhtml)
		delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB, attributevaluexhtmlID)
		delete(backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr, attributevaluexhtmlID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributevaluexhtmlDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributevaluexhtmlDB
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CheckoutPhaseOneInstance(attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) (Error error) {

	attributevaluexhtml, ok := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[attributevaluexhtmlDB.ID]
	if !ok {
		attributevaluexhtml = new(models.ATTRIBUTEVALUEXHTML)

		backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[attributevaluexhtmlDB.ID] = attributevaluexhtml
		backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml] = attributevaluexhtmlDB.ID

		// append model store with the new element
		attributevaluexhtml.Name = attributevaluexhtmlDB.Name_Data.String
		attributevaluexhtml.Stage(backRepoATTRIBUTEVALUEXHTML.GetStage())
	}
	attributevaluexhtmlDB.CopyBasicFieldsToATTRIBUTEVALUEXHTML(attributevaluexhtml)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributevaluexhtml.Stage(backRepoATTRIBUTEVALUEXHTML.GetStage())

	// preserve pointer to attributevaluexhtmlDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB)[attributevaluexhtmlDB hold variable pointers
	attributevaluexhtmlDB_Data := *attributevaluexhtmlDB
	preservedPtrToATTRIBUTEVALUEXHTML := &attributevaluexhtmlDB_Data
	backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[attributevaluexhtmlDB.ID] = preservedPtrToATTRIBUTEVALUEXHTML

	return
}

// BackRepoATTRIBUTEVALUEXHTML.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributevaluexhtmlDB := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB {
		backRepoATTRIBUTEVALUEXHTML.CheckoutPhaseTwoInstance(backRepo, attributevaluexhtmlDB)
	}
	return
}

// BackRepoATTRIBUTEVALUEXHTML.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) (Error error) {

	attributevaluexhtml := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr[attributevaluexhtmlDB.ID]

	attributevaluexhtmlDB.DecodePointers(backRepo, attributevaluexhtml)

	return
}

func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) DecodePointers(backRepo *BackRepoStruct, attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) {

	// insertion point for checkout of pointer encoding
	// THEVALUE field
	attributevaluexhtml.THEVALUE = nil
	if attributevaluexhtmlDB.THEVALUEID.Int64 != 0 {
		attributevaluexhtml.THEVALUE = backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[uint(attributevaluexhtmlDB.THEVALUEID.Int64)]
	}
	// THEORIGINALVALUE field
	attributevaluexhtml.THEORIGINALVALUE = nil
	if attributevaluexhtmlDB.THEORIGINALVALUEID.Int64 != 0 {
		attributevaluexhtml.THEORIGINALVALUE = backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[uint(attributevaluexhtmlDB.THEORIGINALVALUEID.Int64)]
	}
	// DEFINITION field
	attributevaluexhtml.DEFINITION = nil
	if attributevaluexhtmlDB.DEFINITIONID.Int64 != 0 {
		attributevaluexhtml.DEFINITION = backRepo.BackRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[uint(attributevaluexhtmlDB.DEFINITIONID.Int64)]
	}
	return
}

// CommitATTRIBUTEVALUEXHTML allows commit of a single attributevaluexhtml (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEVALUEXHTML(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) {
	backRepo.BackRepoATTRIBUTEVALUEXHTML.CommitPhaseOneInstance(attributevaluexhtml)
	if id, ok := backRepo.BackRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]; ok {
		backRepo.BackRepoATTRIBUTEVALUEXHTML.CommitPhaseTwoInstance(backRepo, id, attributevaluexhtml)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEVALUEXHTML allows checkout of a single attributevaluexhtml (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEVALUEXHTML(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) {
	// check if the attributevaluexhtml is staged
	if _, ok := backRepo.BackRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLPtr_ATTRIBUTEVALUEXHTMLDBID[attributevaluexhtml]; ok {
			var attributevaluexhtmlDB ATTRIBUTEVALUEXHTMLDB
			attributevaluexhtmlDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEVALUEXHTML.db.First(&attributevaluexhtmlDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEVALUEXHTML : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEVALUEXHTML.CheckoutPhaseOneInstance(&attributevaluexhtmlDB)
			backRepo.BackRepoATTRIBUTEVALUEXHTML.CheckoutPhaseTwoInstance(backRepo, &attributevaluexhtmlDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEVALUEXHTML
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsFromATTRIBUTEVALUEXHTML(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) {
	// insertion point for fields commit

	attributevaluexhtmlDB.Name_Data.String = attributevaluexhtml.Name
	attributevaluexhtmlDB.Name_Data.Valid = true

	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool = attributevaluexhtml.ISSIMPLIFIEDAttr
	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEXHTML_WOP
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsFromATTRIBUTEVALUEXHTML_WOP(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML_WOP) {
	// insertion point for fields commit

	attributevaluexhtmlDB.Name_Data.String = attributevaluexhtml.Name
	attributevaluexhtmlDB.Name_Data.Valid = true

	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool = attributevaluexhtml.ISSIMPLIFIEDAttr
	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEXHTMLWOP
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsFromATTRIBUTEVALUEXHTMLWOP(attributevaluexhtml *ATTRIBUTEVALUEXHTMLWOP) {
	// insertion point for fields commit

	attributevaluexhtmlDB.Name_Data.String = attributevaluexhtml.Name
	attributevaluexhtmlDB.Name_Data.Valid = true

	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool = attributevaluexhtml.ISSIMPLIFIEDAttr
	attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEVALUEXHTML
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsToATTRIBUTEVALUEXHTML(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluexhtml.Name = attributevaluexhtmlDB.Name_Data.String
	attributevaluexhtml.ISSIMPLIFIEDAttr = attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEVALUEXHTML_WOP
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsToATTRIBUTEVALUEXHTML_WOP(attributevaluexhtml *models.ATTRIBUTEVALUEXHTML_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluexhtml.Name = attributevaluexhtmlDB.Name_Data.String
	attributevaluexhtml.ISSIMPLIFIEDAttr = attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEVALUEXHTMLWOP
func (attributevaluexhtmlDB *ATTRIBUTEVALUEXHTMLDB) CopyBasicFieldsToATTRIBUTEVALUEXHTMLWOP(attributevaluexhtml *ATTRIBUTEVALUEXHTMLWOP) {
	attributevaluexhtml.ID = int(attributevaluexhtmlDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluexhtml.Name = attributevaluexhtmlDB.Name_Data.String
	attributevaluexhtml.ISSIMPLIFIEDAttr = attributevaluexhtmlDB.ISSIMPLIFIEDAttr_Data.Bool
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEXHTMLDB instances in the backrepo
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEXHTMLDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEXHTMLDB, 0)
	for _, attributevaluexhtmlDB := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB {
		forBackup = append(forBackup, attributevaluexhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEVALUEXHTML ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEVALUEXHTML file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEXHTMLDB instances in the backrepo
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEXHTMLDB, 0)
	for _, attributevaluexhtmlDB := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB {
		forBackup = append(forBackup, attributevaluexhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEVALUEXHTML")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEVALUEXHTML_Fields, -1)
	for _, attributevaluexhtmlDB := range forBackup {

		var attributevaluexhtmlWOP ATTRIBUTEVALUEXHTMLWOP
		attributevaluexhtmlDB.CopyBasicFieldsToATTRIBUTEVALUEXHTMLWOP(&attributevaluexhtmlWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributevaluexhtmlWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEVALUEXHTML" sheet all ATTRIBUTEVALUEXHTMLDB instances
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEVALUEXHTML"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEVALUEXHTML.rowVisitorATTRIBUTEVALUEXHTML)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) rowVisitorATTRIBUTEVALUEXHTML(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributevaluexhtmlWOP ATTRIBUTEVALUEXHTMLWOP
		row.ReadStruct(&attributevaluexhtmlWOP)

		// add the unmarshalled struct to the stage
		attributevaluexhtmlDB := new(ATTRIBUTEVALUEXHTMLDB)
		attributevaluexhtmlDB.CopyBasicFieldsFromATTRIBUTEVALUEXHTMLWOP(&attributevaluexhtmlWOP)

		attributevaluexhtmlDB_ID_atBackupTime := attributevaluexhtmlDB.ID
		attributevaluexhtmlDB.ID = 0
		query := backRepoATTRIBUTEVALUEXHTML.db.Create(attributevaluexhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[attributevaluexhtmlDB.ID] = attributevaluexhtmlDB
		BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID[attributevaluexhtmlDB_ID_atBackupTime] = attributevaluexhtmlDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEVALUEXHTMLDB.json" in dirPath that stores an array
// of ATTRIBUTEVALUEXHTMLDB and stores it in the database
// the map BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEXHTMLDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEVALUEXHTML file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEVALUEXHTMLDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB
	for _, attributevaluexhtmlDB := range forRestore {

		attributevaluexhtmlDB_ID_atBackupTime := attributevaluexhtmlDB.ID
		attributevaluexhtmlDB.ID = 0
		query := backRepoATTRIBUTEVALUEXHTML.db.Create(attributevaluexhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[attributevaluexhtmlDB.ID] = attributevaluexhtmlDB
		BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID[attributevaluexhtmlDB_ID_atBackupTime] = attributevaluexhtmlDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEVALUEXHTML file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEVALUEXHTML>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) RestorePhaseTwo() {

	for _, attributevaluexhtmlDB := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB {

		// next line of code is to avert unused variable compilation error
		_ = attributevaluexhtmlDB

		// insertion point for reindexing pointers encoding
		// reindexing THEVALUE field
		if attributevaluexhtmlDB.THEVALUEID.Int64 != 0 {
			attributevaluexhtmlDB.THEVALUEID.Int64 = int64(BackRepoXHTMLCONTENTid_atBckpTime_newID[uint(attributevaluexhtmlDB.THEVALUEID.Int64)])
			attributevaluexhtmlDB.THEVALUEID.Valid = true
		}

		// reindexing THEORIGINALVALUE field
		if attributevaluexhtmlDB.THEORIGINALVALUEID.Int64 != 0 {
			attributevaluexhtmlDB.THEORIGINALVALUEID.Int64 = int64(BackRepoXHTMLCONTENTid_atBckpTime_newID[uint(attributevaluexhtmlDB.THEORIGINALVALUEID.Int64)])
			attributevaluexhtmlDB.THEORIGINALVALUEID.Valid = true
		}

		// reindexing DEFINITION field
		if attributevaluexhtmlDB.DEFINITIONID.Int64 != 0 {
			attributevaluexhtmlDB.DEFINITIONID.Int64 = int64(BackRepoDEFINITIONid_atBckpTime_newID[uint(attributevaluexhtmlDB.DEFINITIONID.Int64)])
			attributevaluexhtmlDB.DEFINITIONID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEVALUEXHTML.db.Model(attributevaluexhtmlDB).Updates(*attributevaluexhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEVALUEXHTML.ResetReversePointers commits all staged instances of ATTRIBUTEVALUEXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevaluexhtml := range backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLPtr {
		backRepoATTRIBUTEVALUEXHTML.ResetReversePointersInstance(backRepo, idx, attributevaluexhtml)
	}

	return
}

func (backRepoATTRIBUTEVALUEXHTML *BackRepoATTRIBUTEVALUEXHTMLStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributevaluexhtml *models.ATTRIBUTEVALUEXHTML) (Error error) {

	// fetch matching attributevaluexhtmlDB
	if attributevaluexhtmlDB, ok := backRepoATTRIBUTEVALUEXHTML.Map_ATTRIBUTEVALUEXHTMLDBID_ATTRIBUTEVALUEXHTMLDB[idx]; ok {
		_ = attributevaluexhtmlDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEVALUEXHTMLid_atBckpTime_newID map[uint]uint
