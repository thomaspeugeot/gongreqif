// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ALTERNATIVEID_sql sql.NullBool
var dummy_ALTERNATIVEID_time time.Duration
var dummy_ALTERNATIVEID_sort sort.Float64Slice

// ALTERNATIVEIDAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model alternativeidAPI
type ALTERNATIVEIDAPI struct {
	gorm.Model

	models.ALTERNATIVEID_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ALTERNATIVEIDPointersEncoding ALTERNATIVEIDPointersEncoding
}

// ALTERNATIVEIDPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ALTERNATIVEIDPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ALTERNATIVEIDDB describes a alternativeid in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model alternativeidDB
type ALTERNATIVEIDDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field alternativeidDB.Name
	Name_Data sql.NullString

	// Declation for basic field alternativeidDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ALTERNATIVEIDPointersEncoding
}

// ALTERNATIVEIDDBs arrays alternativeidDBs
// swagger:response alternativeidDBsResponse
type ALTERNATIVEIDDBs []ALTERNATIVEIDDB

// ALTERNATIVEIDDBResponse provides response
// swagger:response alternativeidDBResponse
type ALTERNATIVEIDDBResponse struct {
	ALTERNATIVEIDDB
}

// ALTERNATIVEIDWOP is a ALTERNATIVEID without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ALTERNATIVEIDWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IDENTIFIERAttr string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ALTERNATIVEID_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IDENTIFIERAttr",
}

type BackRepoALTERNATIVEIDStruct struct {
	// stores ALTERNATIVEIDDB according to their gorm ID
	Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB map[uint]*ALTERNATIVEIDDB

	// stores ALTERNATIVEIDDB ID according to ALTERNATIVEID address
	Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID map[*models.ALTERNATIVEID]uint

	// stores ALTERNATIVEID according to their gorm ID
	Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr map[uint]*models.ALTERNATIVEID

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoALTERNATIVEID.stage
	return
}

func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) GetDB() *gorm.DB {
	return backRepoALTERNATIVEID.db
}

// GetALTERNATIVEIDDBFromALTERNATIVEIDPtr is a handy function to access the back repo instance from the stage instance
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) GetALTERNATIVEIDDBFromALTERNATIVEIDPtr(alternativeid *models.ALTERNATIVEID) (alternativeidDB *ALTERNATIVEIDDB) {
	id := backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]
	alternativeidDB = backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[id]
	return
}

// BackRepoALTERNATIVEID.CommitPhaseOne commits all staged instances of ALTERNATIVEID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for alternativeid := range stage.ALTERNATIVEIDs {
		backRepoALTERNATIVEID.CommitPhaseOneInstance(alternativeid)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, alternativeid := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr {
		if _, ok := stage.ALTERNATIVEIDs[alternativeid]; !ok {
			backRepoALTERNATIVEID.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoALTERNATIVEID.CommitDeleteInstance commits deletion of ALTERNATIVEID to the BackRepo
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CommitDeleteInstance(id uint) (Error error) {

	alternativeid := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[id]

	// alternativeid is not staged anymore, remove alternativeidDB
	alternativeidDB := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[id]
	query := backRepoALTERNATIVEID.db.Unscoped().Delete(&alternativeidDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID, alternativeid)
	delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr, id)
	delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB, id)

	return
}

// BackRepoALTERNATIVEID.CommitPhaseOneInstance commits alternativeid staged instances of ALTERNATIVEID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CommitPhaseOneInstance(alternativeid *models.ALTERNATIVEID) (Error error) {

	// check if the alternativeid is not commited yet
	if _, ok := backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]; ok {
		return
	}

	// initiate alternativeid
	var alternativeidDB ALTERNATIVEIDDB
	alternativeidDB.CopyBasicFieldsFromALTERNATIVEID(alternativeid)

	query := backRepoALTERNATIVEID.db.Create(&alternativeidDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid] = alternativeidDB.ID
	backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[alternativeidDB.ID] = alternativeid
	backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[alternativeidDB.ID] = &alternativeidDB

	return
}

// BackRepoALTERNATIVEID.CommitPhaseTwo commits all staged instances of ALTERNATIVEID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, alternativeid := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr {
		backRepoALTERNATIVEID.CommitPhaseTwoInstance(backRepo, idx, alternativeid)
	}

	return
}

// BackRepoALTERNATIVEID.CommitPhaseTwoInstance commits {{structname }} of models.ALTERNATIVEID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, alternativeid *models.ALTERNATIVEID) (Error error) {

	// fetch matching alternativeidDB
	if alternativeidDB, ok := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[idx]; ok {

		alternativeidDB.CopyBasicFieldsFromALTERNATIVEID(alternativeid)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoALTERNATIVEID.db.Save(&alternativeidDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ALTERNATIVEID intance %s", alternativeid.Name))
		return err
	}

	return
}

// BackRepoALTERNATIVEID.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CheckoutPhaseOne() (Error error) {

	alternativeidDBArray := make([]ALTERNATIVEIDDB, 0)
	query := backRepoALTERNATIVEID.db.Find(&alternativeidDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	alternativeidInstancesToBeRemovedFromTheStage := make(map[*models.ALTERNATIVEID]any)
	for key, value := range backRepoALTERNATIVEID.stage.ALTERNATIVEIDs {
		alternativeidInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, alternativeidDB := range alternativeidDBArray {
		backRepoALTERNATIVEID.CheckoutPhaseOneInstance(&alternativeidDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		alternativeid, ok := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[alternativeidDB.ID]
		if ok {
			delete(alternativeidInstancesToBeRemovedFromTheStage, alternativeid)
		}
	}

	// remove from stage and back repo's 3 maps all alternativeids that are not in the checkout
	for alternativeid := range alternativeidInstancesToBeRemovedFromTheStage {
		alternativeid.Unstage(backRepoALTERNATIVEID.GetStage())

		// remove instance from the back repo 3 maps
		alternativeidID := backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]
		delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID, alternativeid)
		delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB, alternativeidID)
		delete(backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr, alternativeidID)
	}

	return
}

// CheckoutPhaseOneInstance takes a alternativeidDB that has been found in the DB, updates the backRepo and stages the
// models version of the alternativeidDB
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CheckoutPhaseOneInstance(alternativeidDB *ALTERNATIVEIDDB) (Error error) {

	alternativeid, ok := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[alternativeidDB.ID]
	if !ok {
		alternativeid = new(models.ALTERNATIVEID)

		backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[alternativeidDB.ID] = alternativeid
		backRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid] = alternativeidDB.ID

		// append model store with the new element
		alternativeid.Name = alternativeidDB.Name_Data.String
		alternativeid.Stage(backRepoALTERNATIVEID.GetStage())
	}
	alternativeidDB.CopyBasicFieldsToALTERNATIVEID(alternativeid)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	alternativeid.Stage(backRepoALTERNATIVEID.GetStage())

	// preserve pointer to alternativeidDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB)[alternativeidDB hold variable pointers
	alternativeidDB_Data := *alternativeidDB
	preservedPtrToALTERNATIVEID := &alternativeidDB_Data
	backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[alternativeidDB.ID] = preservedPtrToALTERNATIVEID

	return
}

// BackRepoALTERNATIVEID.CheckoutPhaseTwo Checkouts all staged instances of ALTERNATIVEID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, alternativeidDB := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB {
		backRepoALTERNATIVEID.CheckoutPhaseTwoInstance(backRepo, alternativeidDB)
	}
	return
}

// BackRepoALTERNATIVEID.CheckoutPhaseTwoInstance Checkouts staged instances of ALTERNATIVEID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, alternativeidDB *ALTERNATIVEIDDB) (Error error) {

	alternativeid := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[alternativeidDB.ID]

	alternativeidDB.DecodePointers(backRepo, alternativeid)

	return
}

func (alternativeidDB *ALTERNATIVEIDDB) DecodePointers(backRepo *BackRepoStruct, alternativeid *models.ALTERNATIVEID) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitALTERNATIVEID allows commit of a single alternativeid (if already staged)
func (backRepo *BackRepoStruct) CommitALTERNATIVEID(alternativeid *models.ALTERNATIVEID) {
	backRepo.BackRepoALTERNATIVEID.CommitPhaseOneInstance(alternativeid)
	if id, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]; ok {
		backRepo.BackRepoALTERNATIVEID.CommitPhaseTwoInstance(backRepo, id, alternativeid)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitALTERNATIVEID allows checkout of a single alternativeid (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutALTERNATIVEID(alternativeid *models.ALTERNATIVEID) {
	// check if the alternativeid is staged
	if _, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]; ok {

		if id, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[alternativeid]; ok {
			var alternativeidDB ALTERNATIVEIDDB
			alternativeidDB.ID = id

			if err := backRepo.BackRepoALTERNATIVEID.db.First(&alternativeidDB, id).Error; err != nil {
				log.Fatalln("CheckoutALTERNATIVEID : Problem with getting object with id:", id)
			}
			backRepo.BackRepoALTERNATIVEID.CheckoutPhaseOneInstance(&alternativeidDB)
			backRepo.BackRepoALTERNATIVEID.CheckoutPhaseTwoInstance(backRepo, &alternativeidDB)
		}
	}
}

// CopyBasicFieldsFromALTERNATIVEID
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsFromALTERNATIVEID(alternativeid *models.ALTERNATIVEID) {
	// insertion point for fields commit

	alternativeidDB.Name_Data.String = alternativeid.Name
	alternativeidDB.Name_Data.Valid = true

	alternativeidDB.IDENTIFIERAttr_Data.String = alternativeid.IDENTIFIERAttr
	alternativeidDB.IDENTIFIERAttr_Data.Valid = true
}

// CopyBasicFieldsFromALTERNATIVEID_WOP
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsFromALTERNATIVEID_WOP(alternativeid *models.ALTERNATIVEID_WOP) {
	// insertion point for fields commit

	alternativeidDB.Name_Data.String = alternativeid.Name
	alternativeidDB.Name_Data.Valid = true

	alternativeidDB.IDENTIFIERAttr_Data.String = alternativeid.IDENTIFIERAttr
	alternativeidDB.IDENTIFIERAttr_Data.Valid = true
}

// CopyBasicFieldsFromALTERNATIVEIDWOP
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsFromALTERNATIVEIDWOP(alternativeid *ALTERNATIVEIDWOP) {
	// insertion point for fields commit

	alternativeidDB.Name_Data.String = alternativeid.Name
	alternativeidDB.Name_Data.Valid = true

	alternativeidDB.IDENTIFIERAttr_Data.String = alternativeid.IDENTIFIERAttr
	alternativeidDB.IDENTIFIERAttr_Data.Valid = true
}

// CopyBasicFieldsToALTERNATIVEID
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsToALTERNATIVEID(alternativeid *models.ALTERNATIVEID) {
	// insertion point for checkout of basic fields (back repo to stage)
	alternativeid.Name = alternativeidDB.Name_Data.String
	alternativeid.IDENTIFIERAttr = alternativeidDB.IDENTIFIERAttr_Data.String
}

// CopyBasicFieldsToALTERNATIVEID_WOP
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsToALTERNATIVEID_WOP(alternativeid *models.ALTERNATIVEID_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	alternativeid.Name = alternativeidDB.Name_Data.String
	alternativeid.IDENTIFIERAttr = alternativeidDB.IDENTIFIERAttr_Data.String
}

// CopyBasicFieldsToALTERNATIVEIDWOP
func (alternativeidDB *ALTERNATIVEIDDB) CopyBasicFieldsToALTERNATIVEIDWOP(alternativeid *ALTERNATIVEIDWOP) {
	alternativeid.ID = int(alternativeidDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	alternativeid.Name = alternativeidDB.Name_Data.String
	alternativeid.IDENTIFIERAttr = alternativeidDB.IDENTIFIERAttr_Data.String
}

// Backup generates a json file from a slice of all ALTERNATIVEIDDB instances in the backrepo
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ALTERNATIVEIDDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ALTERNATIVEIDDB, 0)
	for _, alternativeidDB := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB {
		forBackup = append(forBackup, alternativeidDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ALTERNATIVEID ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ALTERNATIVEID file", err.Error())
	}
}

// Backup generates a json file from a slice of all ALTERNATIVEIDDB instances in the backrepo
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ALTERNATIVEIDDB, 0)
	for _, alternativeidDB := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB {
		forBackup = append(forBackup, alternativeidDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ALTERNATIVEID")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ALTERNATIVEID_Fields, -1)
	for _, alternativeidDB := range forBackup {

		var alternativeidWOP ALTERNATIVEIDWOP
		alternativeidDB.CopyBasicFieldsToALTERNATIVEIDWOP(&alternativeidWOP)

		row := sh.AddRow()
		row.WriteStruct(&alternativeidWOP, -1)
	}
}

// RestoreXL from the "ALTERNATIVEID" sheet all ALTERNATIVEIDDB instances
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoALTERNATIVEIDid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ALTERNATIVEID"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoALTERNATIVEID.rowVisitorALTERNATIVEID)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) rowVisitorALTERNATIVEID(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var alternativeidWOP ALTERNATIVEIDWOP
		row.ReadStruct(&alternativeidWOP)

		// add the unmarshalled struct to the stage
		alternativeidDB := new(ALTERNATIVEIDDB)
		alternativeidDB.CopyBasicFieldsFromALTERNATIVEIDWOP(&alternativeidWOP)

		alternativeidDB_ID_atBackupTime := alternativeidDB.ID
		alternativeidDB.ID = 0
		query := backRepoALTERNATIVEID.db.Create(alternativeidDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[alternativeidDB.ID] = alternativeidDB
		BackRepoALTERNATIVEIDid_atBckpTime_newID[alternativeidDB_ID_atBackupTime] = alternativeidDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ALTERNATIVEIDDB.json" in dirPath that stores an array
// of ALTERNATIVEIDDB and stores it in the database
// the map BackRepoALTERNATIVEIDid_atBckpTime_newID is updated accordingly
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoALTERNATIVEIDid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ALTERNATIVEIDDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ALTERNATIVEID file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ALTERNATIVEIDDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB
	for _, alternativeidDB := range forRestore {

		alternativeidDB_ID_atBackupTime := alternativeidDB.ID
		alternativeidDB.ID = 0
		query := backRepoALTERNATIVEID.db.Create(alternativeidDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[alternativeidDB.ID] = alternativeidDB
		BackRepoALTERNATIVEIDid_atBckpTime_newID[alternativeidDB_ID_atBackupTime] = alternativeidDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ALTERNATIVEID file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ALTERNATIVEID>id_atBckpTime_newID
// to compute new index
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) RestorePhaseTwo() {

	for _, alternativeidDB := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB {

		// next line of code is to avert unused variable compilation error
		_ = alternativeidDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoALTERNATIVEID.db.Model(alternativeidDB).Updates(*alternativeidDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoALTERNATIVEID.ResetReversePointers commits all staged instances of ALTERNATIVEID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, alternativeid := range backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr {
		backRepoALTERNATIVEID.ResetReversePointersInstance(backRepo, idx, alternativeid)
	}

	return
}

func (backRepoALTERNATIVEID *BackRepoALTERNATIVEIDStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, alternativeid *models.ALTERNATIVEID) (Error error) {

	// fetch matching alternativeidDB
	if alternativeidDB, ok := backRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDDB[idx]; ok {
		_ = alternativeidDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoALTERNATIVEIDid_atBckpTime_newID map[uint]uint
