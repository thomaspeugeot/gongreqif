// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EMBEDDEDVALUE_sql sql.NullBool
var dummy_EMBEDDEDVALUE_time time.Duration
var dummy_EMBEDDEDVALUE_sort sort.Float64Slice

// EMBEDDEDVALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model embeddedvalueAPI
type EMBEDDEDVALUEAPI struct {
	gorm.Model

	models.EMBEDDEDVALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EMBEDDEDVALUEPointersEncoding EMBEDDEDVALUEPointersEncoding
}

// EMBEDDEDVALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EMBEDDEDVALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EMBEDDEDVALUEDB describes a embeddedvalue in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model embeddedvalueDB
type EMBEDDEDVALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field embeddedvalueDB.Name
	Name_Data sql.NullString

	// Declation for basic field embeddedvalueDB.KEYAttr
	KEYAttr_Data sql.NullInt64

	// Declation for basic field embeddedvalueDB.OTHERCONTENTAttr
	OTHERCONTENTAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EMBEDDEDVALUEPointersEncoding
}

// EMBEDDEDVALUEDBs arrays embeddedvalueDBs
// swagger:response embeddedvalueDBsResponse
type EMBEDDEDVALUEDBs []EMBEDDEDVALUEDB

// EMBEDDEDVALUEDBResponse provides response
// swagger:response embeddedvalueDBResponse
type EMBEDDEDVALUEDBResponse struct {
	EMBEDDEDVALUEDB
}

// EMBEDDEDVALUEWOP is a EMBEDDEDVALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EMBEDDEDVALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	KEYAttr int `xlsx:"2"`

	OTHERCONTENTAttr string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var EMBEDDEDVALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"KEYAttr",
	"OTHERCONTENTAttr",
}

type BackRepoEMBEDDEDVALUEStruct struct {
	// stores EMBEDDEDVALUEDB according to their gorm ID
	Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB map[uint]*EMBEDDEDVALUEDB

	// stores EMBEDDEDVALUEDB ID according to EMBEDDEDVALUE address
	Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID map[*models.EMBEDDEDVALUE]uint

	// stores EMBEDDEDVALUE according to their gorm ID
	Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr map[uint]*models.EMBEDDEDVALUE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEMBEDDEDVALUE.stage
	return
}

func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) GetDB() *gorm.DB {
	return backRepoEMBEDDEDVALUE.db
}

// GetEMBEDDEDVALUEDBFromEMBEDDEDVALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) GetEMBEDDEDVALUEDBFromEMBEDDEDVALUEPtr(embeddedvalue *models.EMBEDDEDVALUE) (embeddedvalueDB *EMBEDDEDVALUEDB) {
	id := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]
	embeddedvalueDB = backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[id]
	return
}

// BackRepoEMBEDDEDVALUE.CommitPhaseOne commits all staged instances of EMBEDDEDVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for embeddedvalue := range stage.EMBEDDEDVALUEs {
		backRepoEMBEDDEDVALUE.CommitPhaseOneInstance(embeddedvalue)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, embeddedvalue := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr {
		if _, ok := stage.EMBEDDEDVALUEs[embeddedvalue]; !ok {
			backRepoEMBEDDEDVALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEMBEDDEDVALUE.CommitDeleteInstance commits deletion of EMBEDDEDVALUE to the BackRepo
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	embeddedvalue := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[id]

	// embeddedvalue is not staged anymore, remove embeddedvalueDB
	embeddedvalueDB := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[id]
	query := backRepoEMBEDDEDVALUE.db.Unscoped().Delete(&embeddedvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID, embeddedvalue)
	delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr, id)
	delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB, id)

	return
}

// BackRepoEMBEDDEDVALUE.CommitPhaseOneInstance commits embeddedvalue staged instances of EMBEDDEDVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CommitPhaseOneInstance(embeddedvalue *models.EMBEDDEDVALUE) (Error error) {

	// check if the embeddedvalue is not commited yet
	if _, ok := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]; ok {
		return
	}

	// initiate embeddedvalue
	var embeddedvalueDB EMBEDDEDVALUEDB
	embeddedvalueDB.CopyBasicFieldsFromEMBEDDEDVALUE(embeddedvalue)

	query := backRepoEMBEDDEDVALUE.db.Create(&embeddedvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue] = embeddedvalueDB.ID
	backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[embeddedvalueDB.ID] = embeddedvalue
	backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[embeddedvalueDB.ID] = &embeddedvalueDB

	return
}

// BackRepoEMBEDDEDVALUE.CommitPhaseTwo commits all staged instances of EMBEDDEDVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedvalue := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr {
		backRepoEMBEDDEDVALUE.CommitPhaseTwoInstance(backRepo, idx, embeddedvalue)
	}

	return
}

// BackRepoEMBEDDEDVALUE.CommitPhaseTwoInstance commits {{structname }} of models.EMBEDDEDVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, embeddedvalue *models.EMBEDDEDVALUE) (Error error) {

	// fetch matching embeddedvalueDB
	if embeddedvalueDB, ok := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[idx]; ok {

		embeddedvalueDB.CopyBasicFieldsFromEMBEDDEDVALUE(embeddedvalue)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEMBEDDEDVALUE.db.Save(&embeddedvalueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EMBEDDEDVALUE intance %s", embeddedvalue.Name))
		return err
	}

	return
}

// BackRepoEMBEDDEDVALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CheckoutPhaseOne() (Error error) {

	embeddedvalueDBArray := make([]EMBEDDEDVALUEDB, 0)
	query := backRepoEMBEDDEDVALUE.db.Find(&embeddedvalueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	embeddedvalueInstancesToBeRemovedFromTheStage := make(map[*models.EMBEDDEDVALUE]any)
	for key, value := range backRepoEMBEDDEDVALUE.stage.EMBEDDEDVALUEs {
		embeddedvalueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, embeddedvalueDB := range embeddedvalueDBArray {
		backRepoEMBEDDEDVALUE.CheckoutPhaseOneInstance(&embeddedvalueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		embeddedvalue, ok := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[embeddedvalueDB.ID]
		if ok {
			delete(embeddedvalueInstancesToBeRemovedFromTheStage, embeddedvalue)
		}
	}

	// remove from stage and back repo's 3 maps all embeddedvalues that are not in the checkout
	for embeddedvalue := range embeddedvalueInstancesToBeRemovedFromTheStage {
		embeddedvalue.Unstage(backRepoEMBEDDEDVALUE.GetStage())

		// remove instance from the back repo 3 maps
		embeddedvalueID := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]
		delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID, embeddedvalue)
		delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB, embeddedvalueID)
		delete(backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr, embeddedvalueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a embeddedvalueDB that has been found in the DB, updates the backRepo and stages the
// models version of the embeddedvalueDB
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CheckoutPhaseOneInstance(embeddedvalueDB *EMBEDDEDVALUEDB) (Error error) {

	embeddedvalue, ok := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[embeddedvalueDB.ID]
	if !ok {
		embeddedvalue = new(models.EMBEDDEDVALUE)

		backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[embeddedvalueDB.ID] = embeddedvalue
		backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue] = embeddedvalueDB.ID

		// append model store with the new element
		embeddedvalue.Name = embeddedvalueDB.Name_Data.String
		embeddedvalue.Stage(backRepoEMBEDDEDVALUE.GetStage())
	}
	embeddedvalueDB.CopyBasicFieldsToEMBEDDEDVALUE(embeddedvalue)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	embeddedvalue.Stage(backRepoEMBEDDEDVALUE.GetStage())

	// preserve pointer to embeddedvalueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB)[embeddedvalueDB hold variable pointers
	embeddedvalueDB_Data := *embeddedvalueDB
	preservedPtrToEMBEDDEDVALUE := &embeddedvalueDB_Data
	backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[embeddedvalueDB.ID] = preservedPtrToEMBEDDEDVALUE

	return
}

// BackRepoEMBEDDEDVALUE.CheckoutPhaseTwo Checkouts all staged instances of EMBEDDEDVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, embeddedvalueDB := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB {
		backRepoEMBEDDEDVALUE.CheckoutPhaseTwoInstance(backRepo, embeddedvalueDB)
	}
	return
}

// BackRepoEMBEDDEDVALUE.CheckoutPhaseTwoInstance Checkouts staged instances of EMBEDDEDVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, embeddedvalueDB *EMBEDDEDVALUEDB) (Error error) {

	embeddedvalue := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr[embeddedvalueDB.ID]

	embeddedvalueDB.DecodePointers(backRepo, embeddedvalue)

	return
}

func (embeddedvalueDB *EMBEDDEDVALUEDB) DecodePointers(backRepo *BackRepoStruct, embeddedvalue *models.EMBEDDEDVALUE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEMBEDDEDVALUE allows commit of a single embeddedvalue (if already staged)
func (backRepo *BackRepoStruct) CommitEMBEDDEDVALUE(embeddedvalue *models.EMBEDDEDVALUE) {
	backRepo.BackRepoEMBEDDEDVALUE.CommitPhaseOneInstance(embeddedvalue)
	if id, ok := backRepo.BackRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]; ok {
		backRepo.BackRepoEMBEDDEDVALUE.CommitPhaseTwoInstance(backRepo, id, embeddedvalue)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEMBEDDEDVALUE allows checkout of a single embeddedvalue (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEMBEDDEDVALUE(embeddedvalue *models.EMBEDDEDVALUE) {
	// check if the embeddedvalue is staged
	if _, ok := backRepo.BackRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]; ok {

		if id, ok := backRepo.BackRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEPtr_EMBEDDEDVALUEDBID[embeddedvalue]; ok {
			var embeddedvalueDB EMBEDDEDVALUEDB
			embeddedvalueDB.ID = id

			if err := backRepo.BackRepoEMBEDDEDVALUE.db.First(&embeddedvalueDB, id).Error; err != nil {
				log.Fatalln("CheckoutEMBEDDEDVALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEMBEDDEDVALUE.CheckoutPhaseOneInstance(&embeddedvalueDB)
			backRepo.BackRepoEMBEDDEDVALUE.CheckoutPhaseTwoInstance(backRepo, &embeddedvalueDB)
		}
	}
}

// CopyBasicFieldsFromEMBEDDEDVALUE
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsFromEMBEDDEDVALUE(embeddedvalue *models.EMBEDDEDVALUE) {
	// insertion point for fields commit

	embeddedvalueDB.Name_Data.String = embeddedvalue.Name
	embeddedvalueDB.Name_Data.Valid = true

	embeddedvalueDB.KEYAttr_Data.Int64 = int64(embeddedvalue.KEYAttr)
	embeddedvalueDB.KEYAttr_Data.Valid = true

	embeddedvalueDB.OTHERCONTENTAttr_Data.String = embeddedvalue.OTHERCONTENTAttr
	embeddedvalueDB.OTHERCONTENTAttr_Data.Valid = true
}

// CopyBasicFieldsFromEMBEDDEDVALUE_WOP
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsFromEMBEDDEDVALUE_WOP(embeddedvalue *models.EMBEDDEDVALUE_WOP) {
	// insertion point for fields commit

	embeddedvalueDB.Name_Data.String = embeddedvalue.Name
	embeddedvalueDB.Name_Data.Valid = true

	embeddedvalueDB.KEYAttr_Data.Int64 = int64(embeddedvalue.KEYAttr)
	embeddedvalueDB.KEYAttr_Data.Valid = true

	embeddedvalueDB.OTHERCONTENTAttr_Data.String = embeddedvalue.OTHERCONTENTAttr
	embeddedvalueDB.OTHERCONTENTAttr_Data.Valid = true
}

// CopyBasicFieldsFromEMBEDDEDVALUEWOP
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsFromEMBEDDEDVALUEWOP(embeddedvalue *EMBEDDEDVALUEWOP) {
	// insertion point for fields commit

	embeddedvalueDB.Name_Data.String = embeddedvalue.Name
	embeddedvalueDB.Name_Data.Valid = true

	embeddedvalueDB.KEYAttr_Data.Int64 = int64(embeddedvalue.KEYAttr)
	embeddedvalueDB.KEYAttr_Data.Valid = true

	embeddedvalueDB.OTHERCONTENTAttr_Data.String = embeddedvalue.OTHERCONTENTAttr
	embeddedvalueDB.OTHERCONTENTAttr_Data.Valid = true
}

// CopyBasicFieldsToEMBEDDEDVALUE
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsToEMBEDDEDVALUE(embeddedvalue *models.EMBEDDEDVALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedvalue.Name = embeddedvalueDB.Name_Data.String
	embeddedvalue.KEYAttr = int(embeddedvalueDB.KEYAttr_Data.Int64)
	embeddedvalue.OTHERCONTENTAttr = embeddedvalueDB.OTHERCONTENTAttr_Data.String
}

// CopyBasicFieldsToEMBEDDEDVALUE_WOP
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsToEMBEDDEDVALUE_WOP(embeddedvalue *models.EMBEDDEDVALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedvalue.Name = embeddedvalueDB.Name_Data.String
	embeddedvalue.KEYAttr = int(embeddedvalueDB.KEYAttr_Data.Int64)
	embeddedvalue.OTHERCONTENTAttr = embeddedvalueDB.OTHERCONTENTAttr_Data.String
}

// CopyBasicFieldsToEMBEDDEDVALUEWOP
func (embeddedvalueDB *EMBEDDEDVALUEDB) CopyBasicFieldsToEMBEDDEDVALUEWOP(embeddedvalue *EMBEDDEDVALUEWOP) {
	embeddedvalue.ID = int(embeddedvalueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	embeddedvalue.Name = embeddedvalueDB.Name_Data.String
	embeddedvalue.KEYAttr = int(embeddedvalueDB.KEYAttr_Data.Int64)
	embeddedvalue.OTHERCONTENTAttr = embeddedvalueDB.OTHERCONTENTAttr_Data.String
}

// Backup generates a json file from a slice of all EMBEDDEDVALUEDB instances in the backrepo
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EMBEDDEDVALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EMBEDDEDVALUEDB, 0)
	for _, embeddedvalueDB := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB {
		forBackup = append(forBackup, embeddedvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EMBEDDEDVALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EMBEDDEDVALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all EMBEDDEDVALUEDB instances in the backrepo
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EMBEDDEDVALUEDB, 0)
	for _, embeddedvalueDB := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB {
		forBackup = append(forBackup, embeddedvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EMBEDDEDVALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EMBEDDEDVALUE_Fields, -1)
	for _, embeddedvalueDB := range forBackup {

		var embeddedvalueWOP EMBEDDEDVALUEWOP
		embeddedvalueDB.CopyBasicFieldsToEMBEDDEDVALUEWOP(&embeddedvalueWOP)

		row := sh.AddRow()
		row.WriteStruct(&embeddedvalueWOP, -1)
	}
}

// RestoreXL from the "EMBEDDEDVALUE" sheet all EMBEDDEDVALUEDB instances
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEMBEDDEDVALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EMBEDDEDVALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEMBEDDEDVALUE.rowVisitorEMBEDDEDVALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) rowVisitorEMBEDDEDVALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var embeddedvalueWOP EMBEDDEDVALUEWOP
		row.ReadStruct(&embeddedvalueWOP)

		// add the unmarshalled struct to the stage
		embeddedvalueDB := new(EMBEDDEDVALUEDB)
		embeddedvalueDB.CopyBasicFieldsFromEMBEDDEDVALUEWOP(&embeddedvalueWOP)

		embeddedvalueDB_ID_atBackupTime := embeddedvalueDB.ID
		embeddedvalueDB.ID = 0
		query := backRepoEMBEDDEDVALUE.db.Create(embeddedvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[embeddedvalueDB.ID] = embeddedvalueDB
		BackRepoEMBEDDEDVALUEid_atBckpTime_newID[embeddedvalueDB_ID_atBackupTime] = embeddedvalueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EMBEDDEDVALUEDB.json" in dirPath that stores an array
// of EMBEDDEDVALUEDB and stores it in the database
// the map BackRepoEMBEDDEDVALUEid_atBckpTime_newID is updated accordingly
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEMBEDDEDVALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EMBEDDEDVALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EMBEDDEDVALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EMBEDDEDVALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB
	for _, embeddedvalueDB := range forRestore {

		embeddedvalueDB_ID_atBackupTime := embeddedvalueDB.ID
		embeddedvalueDB.ID = 0
		query := backRepoEMBEDDEDVALUE.db.Create(embeddedvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[embeddedvalueDB.ID] = embeddedvalueDB
		BackRepoEMBEDDEDVALUEid_atBckpTime_newID[embeddedvalueDB_ID_atBackupTime] = embeddedvalueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EMBEDDEDVALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EMBEDDEDVALUE>id_atBckpTime_newID
// to compute new index
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) RestorePhaseTwo() {

	for _, embeddedvalueDB := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = embeddedvalueDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEMBEDDEDVALUE.db.Model(embeddedvalueDB).Updates(*embeddedvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEMBEDDEDVALUE.ResetReversePointers commits all staged instances of EMBEDDEDVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, embeddedvalue := range backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEPtr {
		backRepoEMBEDDEDVALUE.ResetReversePointersInstance(backRepo, idx, embeddedvalue)
	}

	return
}

func (backRepoEMBEDDEDVALUE *BackRepoEMBEDDEDVALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, embeddedvalue *models.EMBEDDEDVALUE) (Error error) {

	// fetch matching embeddedvalueDB
	if embeddedvalueDB, ok := backRepoEMBEDDEDVALUE.Map_EMBEDDEDVALUEDBID_EMBEDDEDVALUEDB[idx]; ok {
		_ = embeddedvalueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEMBEDDEDVALUEid_atBckpTime_newID map[uint]uint
