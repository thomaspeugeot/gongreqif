// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONBOOLEAN_sql sql.NullBool
var dummy_DATATYPEDEFINITIONBOOLEAN_time time.Duration
var dummy_DATATYPEDEFINITIONBOOLEAN_sort sort.Float64Slice

// DATATYPEDEFINITIONBOOLEANAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionbooleanAPI
type DATATYPEDEFINITIONBOOLEANAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONBOOLEAN_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONBOOLEANPointersEncoding DATATYPEDEFINITIONBOOLEANPointersEncoding
}

// DATATYPEDEFINITIONBOOLEANPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONBOOLEANPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64
}

// DATATYPEDEFINITIONBOOLEANDB describes a datatypedefinitionboolean in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionbooleanDB
type DATATYPEDEFINITIONBOOLEANDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionbooleanDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionbooleanDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionbooleanDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionbooleanDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionbooleanDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONBOOLEANPointersEncoding
}

// DATATYPEDEFINITIONBOOLEANDBs arrays datatypedefinitionbooleanDBs
// swagger:response datatypedefinitionbooleanDBsResponse
type DATATYPEDEFINITIONBOOLEANDBs []DATATYPEDEFINITIONBOOLEANDB

// DATATYPEDEFINITIONBOOLEANDBResponse provides response
// swagger:response datatypedefinitionbooleanDBResponse
type DATATYPEDEFINITIONBOOLEANDBResponse struct {
	DATATYPEDEFINITIONBOOLEANDB
}

// DATATYPEDEFINITIONBOOLEANWOP is a DATATYPEDEFINITIONBOOLEAN without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONBOOLEANWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONBOOLEAN_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoDATATYPEDEFINITIONBOOLEANStruct struct {
	// stores DATATYPEDEFINITIONBOOLEANDB according to their gorm ID
	Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB map[uint]*DATATYPEDEFINITIONBOOLEANDB

	// stores DATATYPEDEFINITIONBOOLEANDB ID according to DATATYPEDEFINITIONBOOLEAN address
	Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID map[*models.DATATYPEDEFINITIONBOOLEAN]uint

	// stores DATATYPEDEFINITIONBOOLEAN according to their gorm ID
	Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr map[uint]*models.DATATYPEDEFINITIONBOOLEAN

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONBOOLEAN.stage
	return
}

func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONBOOLEAN.db
}

// GetDATATYPEDEFINITIONBOOLEANDBFromDATATYPEDEFINITIONBOOLEANPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) GetDATATYPEDEFINITIONBOOLEANDBFromDATATYPEDEFINITIONBOOLEANPtr(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) {
	id := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]
	datatypedefinitionbooleanDB = backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitionboolean := range stage.DATATYPEDEFINITIONBOOLEANs {
		backRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseOneInstance(datatypedefinitionboolean)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitionboolean := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr {
		if _, ok := stage.DATATYPEDEFINITIONBOOLEANs[datatypedefinitionboolean]; !ok {
			backRepoDATATYPEDEFINITIONBOOLEAN.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONBOOLEAN to the BackRepo
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitionboolean := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[id]

	// datatypedefinitionboolean is not staged anymore, remove datatypedefinitionbooleanDB
	datatypedefinitionbooleanDB := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[id]
	query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Unscoped().Delete(&datatypedefinitionbooleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID, datatypedefinitionboolean)
	delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr, id)
	delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseOneInstance commits datatypedefinitionboolean staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CommitPhaseOneInstance(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) (Error error) {

	// check if the datatypedefinitionboolean is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]; ok {
		return
	}

	// initiate datatypedefinitionboolean
	var datatypedefinitionbooleanDB DATATYPEDEFINITIONBOOLEANDB
	datatypedefinitionbooleanDB.CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean)

	query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Create(&datatypedefinitionbooleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean] = datatypedefinitionbooleanDB.ID
	backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[datatypedefinitionbooleanDB.ID] = datatypedefinitionboolean
	backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[datatypedefinitionbooleanDB.ID] = &datatypedefinitionbooleanDB

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionboolean := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr {
		backRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitionboolean)
	}

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) (Error error) {

	// fetch matching datatypedefinitionbooleanDB
	if datatypedefinitionbooleanDB, ok := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[idx]; ok {

		datatypedefinitionbooleanDB.CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitionboolean.ALTERNATIVEID translates to updating the datatypedefinitionboolean.ALTERNATIVEIDID
		datatypedefinitionbooleanDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionboolean.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitionboolean.ALTERNATIVEID]; ok {
				datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionbooleanDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionbooleanDB.ALTERNATIVEIDID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Save(&datatypedefinitionbooleanDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONBOOLEAN intance %s", datatypedefinitionboolean.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionbooleanDBArray := make([]DATATYPEDEFINITIONBOOLEANDB, 0)
	query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Find(&datatypedefinitionbooleanDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionbooleanInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONBOOLEAN]any)
	for key, value := range backRepoDATATYPEDEFINITIONBOOLEAN.stage.DATATYPEDEFINITIONBOOLEANs {
		datatypedefinitionbooleanInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionbooleanDB := range datatypedefinitionbooleanDBArray {
		backRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseOneInstance(&datatypedefinitionbooleanDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitionboolean, ok := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[datatypedefinitionbooleanDB.ID]
		if ok {
			delete(datatypedefinitionbooleanInstancesToBeRemovedFromTheStage, datatypedefinitionboolean)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionbooleans that are not in the checkout
	for datatypedefinitionboolean := range datatypedefinitionbooleanInstancesToBeRemovedFromTheStage {
		datatypedefinitionboolean.Unstage(backRepoDATATYPEDEFINITIONBOOLEAN.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionbooleanID := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]
		delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID, datatypedefinitionboolean)
		delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB, datatypedefinitionbooleanID)
		delete(backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr, datatypedefinitionbooleanID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionbooleanDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionbooleanDB
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CheckoutPhaseOneInstance(datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) (Error error) {

	datatypedefinitionboolean, ok := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[datatypedefinitionbooleanDB.ID]
	if !ok {
		datatypedefinitionboolean = new(models.DATATYPEDEFINITIONBOOLEAN)

		backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[datatypedefinitionbooleanDB.ID] = datatypedefinitionboolean
		backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean] = datatypedefinitionbooleanDB.ID

		// append model store with the new element
		datatypedefinitionboolean.Name = datatypedefinitionbooleanDB.Name_Data.String
		datatypedefinitionboolean.Stage(backRepoDATATYPEDEFINITIONBOOLEAN.GetStage())
	}
	datatypedefinitionbooleanDB.CopyBasicFieldsToDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitionboolean.Stage(backRepoDATATYPEDEFINITIONBOOLEAN.GetStage())

	// preserve pointer to datatypedefinitionbooleanDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB)[datatypedefinitionbooleanDB hold variable pointers
	datatypedefinitionbooleanDB_Data := *datatypedefinitionbooleanDB
	preservedPtrToDATATYPEDEFINITIONBOOLEAN := &datatypedefinitionbooleanDB_Data
	backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[datatypedefinitionbooleanDB.ID] = preservedPtrToDATATYPEDEFINITIONBOOLEAN

	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionbooleanDB := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB {
		backRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionbooleanDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) (Error error) {

	datatypedefinitionboolean := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr[datatypedefinitionbooleanDB.ID]

	datatypedefinitionbooleanDB.DecodePointers(backRepo, datatypedefinitionboolean)

	return
}

func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitionboolean.ALTERNATIVEID = nil
	if datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitionboolean.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONBOOLEAN allows commit of a single datatypedefinitionboolean (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) {
	backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseOneInstance(datatypedefinitionboolean)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.CommitPhaseTwoInstance(backRepo, id, datatypedefinitionboolean)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONBOOLEAN allows checkout of a single datatypedefinitionboolean (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) {
	// check if the datatypedefinitionboolean is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANPtr_DATATYPEDEFINITIONBOOLEANDBID[datatypedefinitionboolean]; ok {
			var datatypedefinitionbooleanDB DATATYPEDEFINITIONBOOLEANDB
			datatypedefinitionbooleanDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.db.First(&datatypedefinitionbooleanDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONBOOLEAN : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseOneInstance(&datatypedefinitionbooleanDB)
			backRepo.BackRepoDATATYPEDEFINITIONBOOLEAN.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionbooleanDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) {
	// insertion point for fields commit

	datatypedefinitionbooleanDB.Name_Data.String = datatypedefinitionboolean.Name
	datatypedefinitionbooleanDB.Name_Data.Valid = true

	datatypedefinitionbooleanDB.DESCAttr_Data.String = datatypedefinitionboolean.DESCAttr
	datatypedefinitionbooleanDB.DESCAttr_Data.Valid = true

	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String = datatypedefinitionboolean.IDENTIFIERAttr
	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String = datatypedefinitionboolean.LASTCHANGEAttr
	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String = datatypedefinitionboolean.LONGNAMEAttr
	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN_WOP
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEAN_WOP(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN_WOP) {
	// insertion point for fields commit

	datatypedefinitionbooleanDB.Name_Data.String = datatypedefinitionboolean.Name
	datatypedefinitionbooleanDB.Name_Data.Valid = true

	datatypedefinitionbooleanDB.DESCAttr_Data.String = datatypedefinitionboolean.DESCAttr
	datatypedefinitionbooleanDB.DESCAttr_Data.Valid = true

	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String = datatypedefinitionboolean.IDENTIFIERAttr
	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String = datatypedefinitionboolean.LASTCHANGEAttr
	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String = datatypedefinitionboolean.LONGNAMEAttr
	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEANWOP
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEANWOP(datatypedefinitionboolean *DATATYPEDEFINITIONBOOLEANWOP) {
	// insertion point for fields commit

	datatypedefinitionbooleanDB.Name_Data.String = datatypedefinitionboolean.Name
	datatypedefinitionbooleanDB.Name_Data.Valid = true

	datatypedefinitionbooleanDB.DESCAttr_Data.String = datatypedefinitionboolean.DESCAttr
	datatypedefinitionbooleanDB.DESCAttr_Data.Valid = true

	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String = datatypedefinitionboolean.IDENTIFIERAttr
	datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String = datatypedefinitionboolean.LASTCHANGEAttr
	datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String = datatypedefinitionboolean.LONGNAMEAttr
	datatypedefinitionbooleanDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONBOOLEAN
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsToDATATYPEDEFINITIONBOOLEAN(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionboolean.Name = datatypedefinitionbooleanDB.Name_Data.String
	datatypedefinitionboolean.DESCAttr = datatypedefinitionbooleanDB.DESCAttr_Data.String
	datatypedefinitionboolean.IDENTIFIERAttr = datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String
	datatypedefinitionboolean.LASTCHANGEAttr = datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String
	datatypedefinitionboolean.LONGNAMEAttr = datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONBOOLEAN_WOP
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsToDATATYPEDEFINITIONBOOLEAN_WOP(datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionboolean.Name = datatypedefinitionbooleanDB.Name_Data.String
	datatypedefinitionboolean.DESCAttr = datatypedefinitionbooleanDB.DESCAttr_Data.String
	datatypedefinitionboolean.IDENTIFIERAttr = datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String
	datatypedefinitionboolean.LASTCHANGEAttr = datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String
	datatypedefinitionboolean.LONGNAMEAttr = datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONBOOLEANWOP
func (datatypedefinitionbooleanDB *DATATYPEDEFINITIONBOOLEANDB) CopyBasicFieldsToDATATYPEDEFINITIONBOOLEANWOP(datatypedefinitionboolean *DATATYPEDEFINITIONBOOLEANWOP) {
	datatypedefinitionboolean.ID = int(datatypedefinitionbooleanDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionboolean.Name = datatypedefinitionbooleanDB.Name_Data.String
	datatypedefinitionboolean.DESCAttr = datatypedefinitionbooleanDB.DESCAttr_Data.String
	datatypedefinitionboolean.IDENTIFIERAttr = datatypedefinitionbooleanDB.IDENTIFIERAttr_Data.String
	datatypedefinitionboolean.LASTCHANGEAttr = datatypedefinitionbooleanDB.LASTCHANGEAttr_Data.String
	datatypedefinitionboolean.LONGNAMEAttr = datatypedefinitionbooleanDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONBOOLEANDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONBOOLEANDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONBOOLEANDB, 0)
	for _, datatypedefinitionbooleanDB := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB {
		forBackup = append(forBackup, datatypedefinitionbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONBOOLEAN ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONBOOLEAN file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONBOOLEANDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONBOOLEANDB, 0)
	for _, datatypedefinitionbooleanDB := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB {
		forBackup = append(forBackup, datatypedefinitionbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONBOOLEAN")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONBOOLEAN_Fields, -1)
	for _, datatypedefinitionbooleanDB := range forBackup {

		var datatypedefinitionbooleanWOP DATATYPEDEFINITIONBOOLEANWOP
		datatypedefinitionbooleanDB.CopyBasicFieldsToDATATYPEDEFINITIONBOOLEANWOP(&datatypedefinitionbooleanWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionbooleanWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONBOOLEAN" sheet all DATATYPEDEFINITIONBOOLEANDB instances
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONBOOLEAN"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONBOOLEAN.rowVisitorDATATYPEDEFINITIONBOOLEAN)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) rowVisitorDATATYPEDEFINITIONBOOLEAN(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionbooleanWOP DATATYPEDEFINITIONBOOLEANWOP
		row.ReadStruct(&datatypedefinitionbooleanWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionbooleanDB := new(DATATYPEDEFINITIONBOOLEANDB)
		datatypedefinitionbooleanDB.CopyBasicFieldsFromDATATYPEDEFINITIONBOOLEANWOP(&datatypedefinitionbooleanWOP)

		datatypedefinitionbooleanDB_ID_atBackupTime := datatypedefinitionbooleanDB.ID
		datatypedefinitionbooleanDB.ID = 0
		query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Create(datatypedefinitionbooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[datatypedefinitionbooleanDB.ID] = datatypedefinitionbooleanDB
		BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID[datatypedefinitionbooleanDB_ID_atBackupTime] = datatypedefinitionbooleanDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONBOOLEANDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONBOOLEANDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONBOOLEANDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONBOOLEAN file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONBOOLEANDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB
	for _, datatypedefinitionbooleanDB := range forRestore {

		datatypedefinitionbooleanDB_ID_atBackupTime := datatypedefinitionbooleanDB.ID
		datatypedefinitionbooleanDB.ID = 0
		query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Create(datatypedefinitionbooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[datatypedefinitionbooleanDB.ID] = datatypedefinitionbooleanDB
		BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID[datatypedefinitionbooleanDB_ID_atBackupTime] = datatypedefinitionbooleanDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONBOOLEAN file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONBOOLEAN>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) RestorePhaseTwo() {

	for _, datatypedefinitionbooleanDB := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionbooleanDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionbooleanDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionbooleanDB.ALTERNATIVEIDID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONBOOLEAN.db.Model(datatypedefinitionbooleanDB).Updates(*datatypedefinitionbooleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONBOOLEAN.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONBOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionboolean := range backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANPtr {
		backRepoDATATYPEDEFINITIONBOOLEAN.ResetReversePointersInstance(backRepo, idx, datatypedefinitionboolean)
	}

	return
}

func (backRepoDATATYPEDEFINITIONBOOLEAN *BackRepoDATATYPEDEFINITIONBOOLEANStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionboolean *models.DATATYPEDEFINITIONBOOLEAN) (Error error) {

	// fetch matching datatypedefinitionbooleanDB
	if datatypedefinitionbooleanDB, ok := backRepoDATATYPEDEFINITIONBOOLEAN.Map_DATATYPEDEFINITIONBOOLEANDBID_DATATYPEDEFINITIONBOOLEANDB[idx]; ok {
		_ = datatypedefinitionbooleanDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONBOOLEANid_atBckpTime_newID map[uint]uint
