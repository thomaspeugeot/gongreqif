// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECIFICATIONTYPE_sql sql.NullBool
var dummy_SPECIFICATIONTYPE_time time.Duration
var dummy_SPECIFICATIONTYPE_sort sort.Float64Slice

// SPECIFICATIONTYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specificationtypeAPI
type SPECIFICATIONTYPEAPI struct {
	gorm.Model

	models.SPECIFICATIONTYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECIFICATIONTYPEPointersEncoding SPECIFICATIONTYPEPointersEncoding
}

// SPECIFICATIONTYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECIFICATIONTYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field SPECATTRIBUTES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECATTRIBUTESID sql.NullInt64
}

// SPECIFICATIONTYPEDB describes a specificationtype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specificationtypeDB
type SPECIFICATIONTYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specificationtypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field specificationtypeDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field specificationtypeDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field specificationtypeDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field specificationtypeDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECIFICATIONTYPEPointersEncoding
}

// SPECIFICATIONTYPEDBs arrays specificationtypeDBs
// swagger:response specificationtypeDBsResponse
type SPECIFICATIONTYPEDBs []SPECIFICATIONTYPEDB

// SPECIFICATIONTYPEDBResponse provides response
// swagger:response specificationtypeDBResponse
type SPECIFICATIONTYPEDBResponse struct {
	SPECIFICATIONTYPEDB
}

// SPECIFICATIONTYPEWOP is a SPECIFICATIONTYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECIFICATIONTYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPECIFICATIONTYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoSPECIFICATIONTYPEStruct struct {
	// stores SPECIFICATIONTYPEDB according to their gorm ID
	Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB map[uint]*SPECIFICATIONTYPEDB

	// stores SPECIFICATIONTYPEDB ID according to SPECIFICATIONTYPE address
	Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID map[*models.SPECIFICATIONTYPE]uint

	// stores SPECIFICATIONTYPE according to their gorm ID
	Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr map[uint]*models.SPECIFICATIONTYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECIFICATIONTYPE.stage
	return
}

func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) GetDB() *gorm.DB {
	return backRepoSPECIFICATIONTYPE.db
}

// GetSPECIFICATIONTYPEDBFromSPECIFICATIONTYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) GetSPECIFICATIONTYPEDBFromSPECIFICATIONTYPEPtr(specificationtype *models.SPECIFICATIONTYPE) (specificationtypeDB *SPECIFICATIONTYPEDB) {
	id := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]
	specificationtypeDB = backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[id]
	return
}

// BackRepoSPECIFICATIONTYPE.CommitPhaseOne commits all staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specificationtype := range stage.SPECIFICATIONTYPEs {
		backRepoSPECIFICATIONTYPE.CommitPhaseOneInstance(specificationtype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specificationtype := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr {
		if _, ok := stage.SPECIFICATIONTYPEs[specificationtype]; !ok {
			backRepoSPECIFICATIONTYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECIFICATIONTYPE.CommitDeleteInstance commits deletion of SPECIFICATIONTYPE to the BackRepo
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	specificationtype := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[id]

	// specificationtype is not staged anymore, remove specificationtypeDB
	specificationtypeDB := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[id]
	query := backRepoSPECIFICATIONTYPE.db.Unscoped().Delete(&specificationtypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID, specificationtype)
	delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr, id)
	delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB, id)

	return
}

// BackRepoSPECIFICATIONTYPE.CommitPhaseOneInstance commits specificationtype staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CommitPhaseOneInstance(specificationtype *models.SPECIFICATIONTYPE) (Error error) {

	// check if the specificationtype is not commited yet
	if _, ok := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]; ok {
		return
	}

	// initiate specificationtype
	var specificationtypeDB SPECIFICATIONTYPEDB
	specificationtypeDB.CopyBasicFieldsFromSPECIFICATIONTYPE(specificationtype)

	query := backRepoSPECIFICATIONTYPE.db.Create(&specificationtypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype] = specificationtypeDB.ID
	backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[specificationtypeDB.ID] = specificationtype
	backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[specificationtypeDB.ID] = &specificationtypeDB

	return
}

// BackRepoSPECIFICATIONTYPE.CommitPhaseTwo commits all staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specificationtype := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr {
		backRepoSPECIFICATIONTYPE.CommitPhaseTwoInstance(backRepo, idx, specificationtype)
	}

	return
}

// BackRepoSPECIFICATIONTYPE.CommitPhaseTwoInstance commits {{structname }} of models.SPECIFICATIONTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specificationtype *models.SPECIFICATIONTYPE) (Error error) {

	// fetch matching specificationtypeDB
	if specificationtypeDB, ok := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[idx]; ok {

		specificationtypeDB.CopyBasicFieldsFromSPECIFICATIONTYPE(specificationtype)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value specificationtype.ALTERNATIVEID translates to updating the specificationtype.ALTERNATIVEIDID
		specificationtypeDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if specificationtype.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[specificationtype.ALTERNATIVEID]; ok {
				specificationtypeDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				specificationtypeDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			specificationtypeDB.ALTERNATIVEIDID.Int64 = 0
			specificationtypeDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value specificationtype.SPECATTRIBUTES translates to updating the specificationtype.SPECATTRIBUTESID
		specificationtypeDB.SPECATTRIBUTESID.Valid = true // allow for a 0 value (nil association)
		if specificationtype.SPECATTRIBUTES != nil {
			if SPECATTRIBUTESId, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[specificationtype.SPECATTRIBUTES]; ok {
				specificationtypeDB.SPECATTRIBUTESID.Int64 = int64(SPECATTRIBUTESId)
				specificationtypeDB.SPECATTRIBUTESID.Valid = true
			}
		} else {
			specificationtypeDB.SPECATTRIBUTESID.Int64 = 0
			specificationtypeDB.SPECATTRIBUTESID.Valid = true
		}

		query := backRepoSPECIFICATIONTYPE.db.Save(&specificationtypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECIFICATIONTYPE intance %s", specificationtype.Name))
		return err
	}

	return
}

// BackRepoSPECIFICATIONTYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CheckoutPhaseOne() (Error error) {

	specificationtypeDBArray := make([]SPECIFICATIONTYPEDB, 0)
	query := backRepoSPECIFICATIONTYPE.db.Find(&specificationtypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specificationtypeInstancesToBeRemovedFromTheStage := make(map[*models.SPECIFICATIONTYPE]any)
	for key, value := range backRepoSPECIFICATIONTYPE.stage.SPECIFICATIONTYPEs {
		specificationtypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specificationtypeDB := range specificationtypeDBArray {
		backRepoSPECIFICATIONTYPE.CheckoutPhaseOneInstance(&specificationtypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specificationtype, ok := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[specificationtypeDB.ID]
		if ok {
			delete(specificationtypeInstancesToBeRemovedFromTheStage, specificationtype)
		}
	}

	// remove from stage and back repo's 3 maps all specificationtypes that are not in the checkout
	for specificationtype := range specificationtypeInstancesToBeRemovedFromTheStage {
		specificationtype.Unstage(backRepoSPECIFICATIONTYPE.GetStage())

		// remove instance from the back repo 3 maps
		specificationtypeID := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]
		delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID, specificationtype)
		delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB, specificationtypeID)
		delete(backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr, specificationtypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specificationtypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the specificationtypeDB
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CheckoutPhaseOneInstance(specificationtypeDB *SPECIFICATIONTYPEDB) (Error error) {

	specificationtype, ok := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[specificationtypeDB.ID]
	if !ok {
		specificationtype = new(models.SPECIFICATIONTYPE)

		backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[specificationtypeDB.ID] = specificationtype
		backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype] = specificationtypeDB.ID

		// append model store with the new element
		specificationtype.Name = specificationtypeDB.Name_Data.String
		specificationtype.Stage(backRepoSPECIFICATIONTYPE.GetStage())
	}
	specificationtypeDB.CopyBasicFieldsToSPECIFICATIONTYPE(specificationtype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specificationtype.Stage(backRepoSPECIFICATIONTYPE.GetStage())

	// preserve pointer to specificationtypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB)[specificationtypeDB hold variable pointers
	specificationtypeDB_Data := *specificationtypeDB
	preservedPtrToSPECIFICATIONTYPE := &specificationtypeDB_Data
	backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[specificationtypeDB.ID] = preservedPtrToSPECIFICATIONTYPE

	return
}

// BackRepoSPECIFICATIONTYPE.CheckoutPhaseTwo Checkouts all staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specificationtypeDB := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB {
		backRepoSPECIFICATIONTYPE.CheckoutPhaseTwoInstance(backRepo, specificationtypeDB)
	}
	return
}

// BackRepoSPECIFICATIONTYPE.CheckoutPhaseTwoInstance Checkouts staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specificationtypeDB *SPECIFICATIONTYPEDB) (Error error) {

	specificationtype := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr[specificationtypeDB.ID]

	specificationtypeDB.DecodePointers(backRepo, specificationtype)

	return
}

func (specificationtypeDB *SPECIFICATIONTYPEDB) DecodePointers(backRepo *BackRepoStruct, specificationtype *models.SPECIFICATIONTYPE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	specificationtype.ALTERNATIVEID = nil
	if specificationtypeDB.ALTERNATIVEIDID.Int64 != 0 {
		specificationtype.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(specificationtypeDB.ALTERNATIVEIDID.Int64)]
	}
	// SPECATTRIBUTES field
	specificationtype.SPECATTRIBUTES = nil
	if specificationtypeDB.SPECATTRIBUTESID.Int64 != 0 {
		specificationtype.SPECATTRIBUTES = backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[uint(specificationtypeDB.SPECATTRIBUTESID.Int64)]
	}
	return
}

// CommitSPECIFICATIONTYPE allows commit of a single specificationtype (if already staged)
func (backRepo *BackRepoStruct) CommitSPECIFICATIONTYPE(specificationtype *models.SPECIFICATIONTYPE) {
	backRepo.BackRepoSPECIFICATIONTYPE.CommitPhaseOneInstance(specificationtype)
	if id, ok := backRepo.BackRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]; ok {
		backRepo.BackRepoSPECIFICATIONTYPE.CommitPhaseTwoInstance(backRepo, id, specificationtype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECIFICATIONTYPE allows checkout of a single specificationtype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECIFICATIONTYPE(specificationtype *models.SPECIFICATIONTYPE) {
	// check if the specificationtype is staged
	if _, ok := backRepo.BackRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]; ok {

		if id, ok := backRepo.BackRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEPtr_SPECIFICATIONTYPEDBID[specificationtype]; ok {
			var specificationtypeDB SPECIFICATIONTYPEDB
			specificationtypeDB.ID = id

			if err := backRepo.BackRepoSPECIFICATIONTYPE.db.First(&specificationtypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECIFICATIONTYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECIFICATIONTYPE.CheckoutPhaseOneInstance(&specificationtypeDB)
			backRepo.BackRepoSPECIFICATIONTYPE.CheckoutPhaseTwoInstance(backRepo, &specificationtypeDB)
		}
	}
}

// CopyBasicFieldsFromSPECIFICATIONTYPE
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsFromSPECIFICATIONTYPE(specificationtype *models.SPECIFICATIONTYPE) {
	// insertion point for fields commit

	specificationtypeDB.Name_Data.String = specificationtype.Name
	specificationtypeDB.Name_Data.Valid = true

	specificationtypeDB.DESCAttr_Data.String = specificationtype.DESCAttr
	specificationtypeDB.DESCAttr_Data.Valid = true

	specificationtypeDB.IDENTIFIERAttr_Data.String = specificationtype.IDENTIFIERAttr
	specificationtypeDB.IDENTIFIERAttr_Data.Valid = true

	specificationtypeDB.LASTCHANGEAttr_Data.String = specificationtype.LASTCHANGEAttr
	specificationtypeDB.LASTCHANGEAttr_Data.Valid = true

	specificationtypeDB.LONGNAMEAttr_Data.String = specificationtype.LONGNAMEAttr
	specificationtypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATIONTYPE_WOP
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsFromSPECIFICATIONTYPE_WOP(specificationtype *models.SPECIFICATIONTYPE_WOP) {
	// insertion point for fields commit

	specificationtypeDB.Name_Data.String = specificationtype.Name
	specificationtypeDB.Name_Data.Valid = true

	specificationtypeDB.DESCAttr_Data.String = specificationtype.DESCAttr
	specificationtypeDB.DESCAttr_Data.Valid = true

	specificationtypeDB.IDENTIFIERAttr_Data.String = specificationtype.IDENTIFIERAttr
	specificationtypeDB.IDENTIFIERAttr_Data.Valid = true

	specificationtypeDB.LASTCHANGEAttr_Data.String = specificationtype.LASTCHANGEAttr
	specificationtypeDB.LASTCHANGEAttr_Data.Valid = true

	specificationtypeDB.LONGNAMEAttr_Data.String = specificationtype.LONGNAMEAttr
	specificationtypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATIONTYPEWOP
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsFromSPECIFICATIONTYPEWOP(specificationtype *SPECIFICATIONTYPEWOP) {
	// insertion point for fields commit

	specificationtypeDB.Name_Data.String = specificationtype.Name
	specificationtypeDB.Name_Data.Valid = true

	specificationtypeDB.DESCAttr_Data.String = specificationtype.DESCAttr
	specificationtypeDB.DESCAttr_Data.Valid = true

	specificationtypeDB.IDENTIFIERAttr_Data.String = specificationtype.IDENTIFIERAttr
	specificationtypeDB.IDENTIFIERAttr_Data.Valid = true

	specificationtypeDB.LASTCHANGEAttr_Data.String = specificationtype.LASTCHANGEAttr
	specificationtypeDB.LASTCHANGEAttr_Data.Valid = true

	specificationtypeDB.LONGNAMEAttr_Data.String = specificationtype.LONGNAMEAttr
	specificationtypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToSPECIFICATIONTYPE
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsToSPECIFICATIONTYPE(specificationtype *models.SPECIFICATIONTYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	specificationtype.Name = specificationtypeDB.Name_Data.String
	specificationtype.DESCAttr = specificationtypeDB.DESCAttr_Data.String
	specificationtype.IDENTIFIERAttr = specificationtypeDB.IDENTIFIERAttr_Data.String
	specificationtype.LASTCHANGEAttr = specificationtypeDB.LASTCHANGEAttr_Data.String
	specificationtype.LONGNAMEAttr = specificationtypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECIFICATIONTYPE_WOP
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsToSPECIFICATIONTYPE_WOP(specificationtype *models.SPECIFICATIONTYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specificationtype.Name = specificationtypeDB.Name_Data.String
	specificationtype.DESCAttr = specificationtypeDB.DESCAttr_Data.String
	specificationtype.IDENTIFIERAttr = specificationtypeDB.IDENTIFIERAttr_Data.String
	specificationtype.LASTCHANGEAttr = specificationtypeDB.LASTCHANGEAttr_Data.String
	specificationtype.LONGNAMEAttr = specificationtypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECIFICATIONTYPEWOP
func (specificationtypeDB *SPECIFICATIONTYPEDB) CopyBasicFieldsToSPECIFICATIONTYPEWOP(specificationtype *SPECIFICATIONTYPEWOP) {
	specificationtype.ID = int(specificationtypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specificationtype.Name = specificationtypeDB.Name_Data.String
	specificationtype.DESCAttr = specificationtypeDB.DESCAttr_Data.String
	specificationtype.IDENTIFIERAttr = specificationtypeDB.IDENTIFIERAttr_Data.String
	specificationtype.LASTCHANGEAttr = specificationtypeDB.LASTCHANGEAttr_Data.String
	specificationtype.LONGNAMEAttr = specificationtypeDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all SPECIFICATIONTYPEDB instances in the backrepo
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECIFICATIONTYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATIONTYPEDB, 0)
	for _, specificationtypeDB := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB {
		forBackup = append(forBackup, specificationtypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECIFICATIONTYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECIFICATIONTYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECIFICATIONTYPEDB instances in the backrepo
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATIONTYPEDB, 0)
	for _, specificationtypeDB := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB {
		forBackup = append(forBackup, specificationtypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECIFICATIONTYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECIFICATIONTYPE_Fields, -1)
	for _, specificationtypeDB := range forBackup {

		var specificationtypeWOP SPECIFICATIONTYPEWOP
		specificationtypeDB.CopyBasicFieldsToSPECIFICATIONTYPEWOP(&specificationtypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&specificationtypeWOP, -1)
	}
}

// RestoreXL from the "SPECIFICATIONTYPE" sheet all SPECIFICATIONTYPEDB instances
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECIFICATIONTYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECIFICATIONTYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECIFICATIONTYPE.rowVisitorSPECIFICATIONTYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) rowVisitorSPECIFICATIONTYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specificationtypeWOP SPECIFICATIONTYPEWOP
		row.ReadStruct(&specificationtypeWOP)

		// add the unmarshalled struct to the stage
		specificationtypeDB := new(SPECIFICATIONTYPEDB)
		specificationtypeDB.CopyBasicFieldsFromSPECIFICATIONTYPEWOP(&specificationtypeWOP)

		specificationtypeDB_ID_atBackupTime := specificationtypeDB.ID
		specificationtypeDB.ID = 0
		query := backRepoSPECIFICATIONTYPE.db.Create(specificationtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[specificationtypeDB.ID] = specificationtypeDB
		BackRepoSPECIFICATIONTYPEid_atBckpTime_newID[specificationtypeDB_ID_atBackupTime] = specificationtypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECIFICATIONTYPEDB.json" in dirPath that stores an array
// of SPECIFICATIONTYPEDB and stores it in the database
// the map BackRepoSPECIFICATIONTYPEid_atBckpTime_newID is updated accordingly
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECIFICATIONTYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECIFICATIONTYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECIFICATIONTYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECIFICATIONTYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB
	for _, specificationtypeDB := range forRestore {

		specificationtypeDB_ID_atBackupTime := specificationtypeDB.ID
		specificationtypeDB.ID = 0
		query := backRepoSPECIFICATIONTYPE.db.Create(specificationtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[specificationtypeDB.ID] = specificationtypeDB
		BackRepoSPECIFICATIONTYPEid_atBckpTime_newID[specificationtypeDB_ID_atBackupTime] = specificationtypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECIFICATIONTYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECIFICATIONTYPE>id_atBckpTime_newID
// to compute new index
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) RestorePhaseTwo() {

	for _, specificationtypeDB := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = specificationtypeDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if specificationtypeDB.ALTERNATIVEIDID.Int64 != 0 {
			specificationtypeDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(specificationtypeDB.ALTERNATIVEIDID.Int64)])
			specificationtypeDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing SPECATTRIBUTES field
		if specificationtypeDB.SPECATTRIBUTESID.Int64 != 0 {
			specificationtypeDB.SPECATTRIBUTESID.Int64 = int64(BackRepoSPECATTRIBUTESid_atBckpTime_newID[uint(specificationtypeDB.SPECATTRIBUTESID.Int64)])
			specificationtypeDB.SPECATTRIBUTESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSPECIFICATIONTYPE.db.Model(specificationtypeDB).Updates(*specificationtypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECIFICATIONTYPE.ResetReversePointers commits all staged instances of SPECIFICATIONTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specificationtype := range backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEPtr {
		backRepoSPECIFICATIONTYPE.ResetReversePointersInstance(backRepo, idx, specificationtype)
	}

	return
}

func (backRepoSPECIFICATIONTYPE *BackRepoSPECIFICATIONTYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specificationtype *models.SPECIFICATIONTYPE) (Error error) {

	// fetch matching specificationtypeDB
	if specificationtypeDB, ok := backRepoSPECIFICATIONTYPE.Map_SPECIFICATIONTYPEDBID_SPECIFICATIONTYPEDB[idx]; ok {
		_ = specificationtypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECIFICATIONTYPEid_atBckpTime_newID map[uint]uint
