// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONINTEGER_sql sql.NullBool
var dummy_DATATYPEDEFINITIONINTEGER_time time.Duration
var dummy_DATATYPEDEFINITIONINTEGER_sort sort.Float64Slice

// DATATYPEDEFINITIONINTEGERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionintegerAPI
type DATATYPEDEFINITIONINTEGERAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONINTEGER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONINTEGERPointersEncoding DATATYPEDEFINITIONINTEGERPointersEncoding
}

// DATATYPEDEFINITIONINTEGERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONINTEGERPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64
}

// DATATYPEDEFINITIONINTEGERDB describes a datatypedefinitioninteger in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionintegerDB
type DATATYPEDEFINITIONINTEGERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionintegerDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionintegerDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionintegerDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionintegerDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionintegerDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionintegerDB.MAXAttr
	MAXAttr_Data sql.NullInt64

	// Declation for basic field datatypedefinitionintegerDB.MINAttr
	MINAttr_Data sql.NullInt64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONINTEGERPointersEncoding
}

// DATATYPEDEFINITIONINTEGERDBs arrays datatypedefinitionintegerDBs
// swagger:response datatypedefinitionintegerDBsResponse
type DATATYPEDEFINITIONINTEGERDBs []DATATYPEDEFINITIONINTEGERDB

// DATATYPEDEFINITIONINTEGERDBResponse provides response
// swagger:response datatypedefinitionintegerDBResponse
type DATATYPEDEFINITIONINTEGERDBResponse struct {
	DATATYPEDEFINITIONINTEGERDB
}

// DATATYPEDEFINITIONINTEGERWOP is a DATATYPEDEFINITIONINTEGER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONINTEGERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`

	MAXAttr int `xlsx:"6"`

	MINAttr int `xlsx:"7"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONINTEGER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
	"MAXAttr",
	"MINAttr",
}

type BackRepoDATATYPEDEFINITIONINTEGERStruct struct {
	// stores DATATYPEDEFINITIONINTEGERDB according to their gorm ID
	Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB map[uint]*DATATYPEDEFINITIONINTEGERDB

	// stores DATATYPEDEFINITIONINTEGERDB ID according to DATATYPEDEFINITIONINTEGER address
	Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID map[*models.DATATYPEDEFINITIONINTEGER]uint

	// stores DATATYPEDEFINITIONINTEGER according to their gorm ID
	Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr map[uint]*models.DATATYPEDEFINITIONINTEGER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONINTEGER.stage
	return
}

func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONINTEGER.db
}

// GetDATATYPEDEFINITIONINTEGERDBFromDATATYPEDEFINITIONINTEGERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) GetDATATYPEDEFINITIONINTEGERDBFromDATATYPEDEFINITIONINTEGERPtr(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) {
	id := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]
	datatypedefinitionintegerDB = backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitioninteger := range stage.DATATYPEDEFINITIONINTEGERs {
		backRepoDATATYPEDEFINITIONINTEGER.CommitPhaseOneInstance(datatypedefinitioninteger)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitioninteger := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr {
		if _, ok := stage.DATATYPEDEFINITIONINTEGERs[datatypedefinitioninteger]; !ok {
			backRepoDATATYPEDEFINITIONINTEGER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONINTEGER to the BackRepo
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitioninteger := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[id]

	// datatypedefinitioninteger is not staged anymore, remove datatypedefinitionintegerDB
	datatypedefinitionintegerDB := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[id]
	query := backRepoDATATYPEDEFINITIONINTEGER.db.Unscoped().Delete(&datatypedefinitionintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID, datatypedefinitioninteger)
	delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr, id)
	delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseOneInstance commits datatypedefinitioninteger staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CommitPhaseOneInstance(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) (Error error) {

	// check if the datatypedefinitioninteger is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]; ok {
		return
	}

	// initiate datatypedefinitioninteger
	var datatypedefinitionintegerDB DATATYPEDEFINITIONINTEGERDB
	datatypedefinitionintegerDB.CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger)

	query := backRepoDATATYPEDEFINITIONINTEGER.db.Create(&datatypedefinitionintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger] = datatypedefinitionintegerDB.ID
	backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[datatypedefinitionintegerDB.ID] = datatypedefinitioninteger
	backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[datatypedefinitionintegerDB.ID] = &datatypedefinitionintegerDB

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitioninteger := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr {
		backRepoDATATYPEDEFINITIONINTEGER.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitioninteger)
	}

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) (Error error) {

	// fetch matching datatypedefinitionintegerDB
	if datatypedefinitionintegerDB, ok := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[idx]; ok {

		datatypedefinitionintegerDB.CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitioninteger.ALTERNATIVEID translates to updating the datatypedefinitioninteger.ALTERNATIVEIDID
		datatypedefinitionintegerDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitioninteger.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitioninteger.ALTERNATIVEID]; ok {
				datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONINTEGER.db.Save(&datatypedefinitionintegerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONINTEGER intance %s", datatypedefinitioninteger.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionintegerDBArray := make([]DATATYPEDEFINITIONINTEGERDB, 0)
	query := backRepoDATATYPEDEFINITIONINTEGER.db.Find(&datatypedefinitionintegerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionintegerInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONINTEGER]any)
	for key, value := range backRepoDATATYPEDEFINITIONINTEGER.stage.DATATYPEDEFINITIONINTEGERs {
		datatypedefinitionintegerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionintegerDB := range datatypedefinitionintegerDBArray {
		backRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseOneInstance(&datatypedefinitionintegerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitioninteger, ok := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[datatypedefinitionintegerDB.ID]
		if ok {
			delete(datatypedefinitionintegerInstancesToBeRemovedFromTheStage, datatypedefinitioninteger)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionintegers that are not in the checkout
	for datatypedefinitioninteger := range datatypedefinitionintegerInstancesToBeRemovedFromTheStage {
		datatypedefinitioninteger.Unstage(backRepoDATATYPEDEFINITIONINTEGER.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionintegerID := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]
		delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID, datatypedefinitioninteger)
		delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB, datatypedefinitionintegerID)
		delete(backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr, datatypedefinitionintegerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionintegerDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionintegerDB
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CheckoutPhaseOneInstance(datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) (Error error) {

	datatypedefinitioninteger, ok := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[datatypedefinitionintegerDB.ID]
	if !ok {
		datatypedefinitioninteger = new(models.DATATYPEDEFINITIONINTEGER)

		backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[datatypedefinitionintegerDB.ID] = datatypedefinitioninteger
		backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger] = datatypedefinitionintegerDB.ID

		// append model store with the new element
		datatypedefinitioninteger.Name = datatypedefinitionintegerDB.Name_Data.String
		datatypedefinitioninteger.Stage(backRepoDATATYPEDEFINITIONINTEGER.GetStage())
	}
	datatypedefinitionintegerDB.CopyBasicFieldsToDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitioninteger.Stage(backRepoDATATYPEDEFINITIONINTEGER.GetStage())

	// preserve pointer to datatypedefinitionintegerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB)[datatypedefinitionintegerDB hold variable pointers
	datatypedefinitionintegerDB_Data := *datatypedefinitionintegerDB
	preservedPtrToDATATYPEDEFINITIONINTEGER := &datatypedefinitionintegerDB_Data
	backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[datatypedefinitionintegerDB.ID] = preservedPtrToDATATYPEDEFINITIONINTEGER

	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionintegerDB := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB {
		backRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionintegerDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) (Error error) {

	datatypedefinitioninteger := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr[datatypedefinitionintegerDB.ID]

	datatypedefinitionintegerDB.DecodePointers(backRepo, datatypedefinitioninteger)

	return
}

func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitioninteger.ALTERNATIVEID = nil
	if datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitioninteger.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONINTEGER allows commit of a single datatypedefinitioninteger (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) {
	backRepo.BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseOneInstance(datatypedefinitioninteger)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONINTEGER.CommitPhaseTwoInstance(backRepo, id, datatypedefinitioninteger)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONINTEGER allows checkout of a single datatypedefinitioninteger (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) {
	// check if the datatypedefinitioninteger is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERPtr_DATATYPEDEFINITIONINTEGERDBID[datatypedefinitioninteger]; ok {
			var datatypedefinitionintegerDB DATATYPEDEFINITIONINTEGERDB
			datatypedefinitionintegerDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONINTEGER.db.First(&datatypedefinitionintegerDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONINTEGER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseOneInstance(&datatypedefinitionintegerDB)
			backRepo.BackRepoDATATYPEDEFINITIONINTEGER.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionintegerDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) {
	// insertion point for fields commit

	datatypedefinitionintegerDB.Name_Data.String = datatypedefinitioninteger.Name
	datatypedefinitionintegerDB.Name_Data.Valid = true

	datatypedefinitionintegerDB.DESCAttr_Data.String = datatypedefinitioninteger.DESCAttr
	datatypedefinitionintegerDB.DESCAttr_Data.Valid = true

	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String = datatypedefinitioninteger.IDENTIFIERAttr
	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String = datatypedefinitioninteger.LASTCHANGEAttr
	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionintegerDB.LONGNAMEAttr_Data.String = datatypedefinitioninteger.LONGNAMEAttr
	datatypedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionintegerDB.MAXAttr_Data.Int64 = int64(datatypedefinitioninteger.MAXAttr)
	datatypedefinitionintegerDB.MAXAttr_Data.Valid = true

	datatypedefinitionintegerDB.MINAttr_Data.Int64 = int64(datatypedefinitioninteger.MINAttr)
	datatypedefinitionintegerDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER_WOP
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsFromDATATYPEDEFINITIONINTEGER_WOP(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER_WOP) {
	// insertion point for fields commit

	datatypedefinitionintegerDB.Name_Data.String = datatypedefinitioninteger.Name
	datatypedefinitionintegerDB.Name_Data.Valid = true

	datatypedefinitionintegerDB.DESCAttr_Data.String = datatypedefinitioninteger.DESCAttr
	datatypedefinitionintegerDB.DESCAttr_Data.Valid = true

	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String = datatypedefinitioninteger.IDENTIFIERAttr
	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String = datatypedefinitioninteger.LASTCHANGEAttr
	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionintegerDB.LONGNAMEAttr_Data.String = datatypedefinitioninteger.LONGNAMEAttr
	datatypedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionintegerDB.MAXAttr_Data.Int64 = int64(datatypedefinitioninteger.MAXAttr)
	datatypedefinitionintegerDB.MAXAttr_Data.Valid = true

	datatypedefinitionintegerDB.MINAttr_Data.Int64 = int64(datatypedefinitioninteger.MINAttr)
	datatypedefinitionintegerDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONINTEGERWOP
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsFromDATATYPEDEFINITIONINTEGERWOP(datatypedefinitioninteger *DATATYPEDEFINITIONINTEGERWOP) {
	// insertion point for fields commit

	datatypedefinitionintegerDB.Name_Data.String = datatypedefinitioninteger.Name
	datatypedefinitionintegerDB.Name_Data.Valid = true

	datatypedefinitionintegerDB.DESCAttr_Data.String = datatypedefinitioninteger.DESCAttr
	datatypedefinitionintegerDB.DESCAttr_Data.Valid = true

	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String = datatypedefinitioninteger.IDENTIFIERAttr
	datatypedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String = datatypedefinitioninteger.LASTCHANGEAttr
	datatypedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionintegerDB.LONGNAMEAttr_Data.String = datatypedefinitioninteger.LONGNAMEAttr
	datatypedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true

	datatypedefinitionintegerDB.MAXAttr_Data.Int64 = int64(datatypedefinitioninteger.MAXAttr)
	datatypedefinitionintegerDB.MAXAttr_Data.Valid = true

	datatypedefinitionintegerDB.MINAttr_Data.Int64 = int64(datatypedefinitioninteger.MINAttr)
	datatypedefinitionintegerDB.MINAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONINTEGER
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsToDATATYPEDEFINITIONINTEGER(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitioninteger.Name = datatypedefinitionintegerDB.Name_Data.String
	datatypedefinitioninteger.DESCAttr = datatypedefinitionintegerDB.DESCAttr_Data.String
	datatypedefinitioninteger.IDENTIFIERAttr = datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String
	datatypedefinitioninteger.LASTCHANGEAttr = datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String
	datatypedefinitioninteger.LONGNAMEAttr = datatypedefinitionintegerDB.LONGNAMEAttr_Data.String
	datatypedefinitioninteger.MAXAttr = int(datatypedefinitionintegerDB.MAXAttr_Data.Int64)
	datatypedefinitioninteger.MINAttr = int(datatypedefinitionintegerDB.MINAttr_Data.Int64)
}

// CopyBasicFieldsToDATATYPEDEFINITIONINTEGER_WOP
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsToDATATYPEDEFINITIONINTEGER_WOP(datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitioninteger.Name = datatypedefinitionintegerDB.Name_Data.String
	datatypedefinitioninteger.DESCAttr = datatypedefinitionintegerDB.DESCAttr_Data.String
	datatypedefinitioninteger.IDENTIFIERAttr = datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String
	datatypedefinitioninteger.LASTCHANGEAttr = datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String
	datatypedefinitioninteger.LONGNAMEAttr = datatypedefinitionintegerDB.LONGNAMEAttr_Data.String
	datatypedefinitioninteger.MAXAttr = int(datatypedefinitionintegerDB.MAXAttr_Data.Int64)
	datatypedefinitioninteger.MINAttr = int(datatypedefinitionintegerDB.MINAttr_Data.Int64)
}

// CopyBasicFieldsToDATATYPEDEFINITIONINTEGERWOP
func (datatypedefinitionintegerDB *DATATYPEDEFINITIONINTEGERDB) CopyBasicFieldsToDATATYPEDEFINITIONINTEGERWOP(datatypedefinitioninteger *DATATYPEDEFINITIONINTEGERWOP) {
	datatypedefinitioninteger.ID = int(datatypedefinitionintegerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitioninteger.Name = datatypedefinitionintegerDB.Name_Data.String
	datatypedefinitioninteger.DESCAttr = datatypedefinitionintegerDB.DESCAttr_Data.String
	datatypedefinitioninteger.IDENTIFIERAttr = datatypedefinitionintegerDB.IDENTIFIERAttr_Data.String
	datatypedefinitioninteger.LASTCHANGEAttr = datatypedefinitionintegerDB.LASTCHANGEAttr_Data.String
	datatypedefinitioninteger.LONGNAMEAttr = datatypedefinitionintegerDB.LONGNAMEAttr_Data.String
	datatypedefinitioninteger.MAXAttr = int(datatypedefinitionintegerDB.MAXAttr_Data.Int64)
	datatypedefinitioninteger.MINAttr = int(datatypedefinitionintegerDB.MINAttr_Data.Int64)
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONINTEGERDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONINTEGERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONINTEGERDB, 0)
	for _, datatypedefinitionintegerDB := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB {
		forBackup = append(forBackup, datatypedefinitionintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONINTEGER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONINTEGER file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONINTEGERDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONINTEGERDB, 0)
	for _, datatypedefinitionintegerDB := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB {
		forBackup = append(forBackup, datatypedefinitionintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONINTEGER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONINTEGER_Fields, -1)
	for _, datatypedefinitionintegerDB := range forBackup {

		var datatypedefinitionintegerWOP DATATYPEDEFINITIONINTEGERWOP
		datatypedefinitionintegerDB.CopyBasicFieldsToDATATYPEDEFINITIONINTEGERWOP(&datatypedefinitionintegerWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionintegerWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONINTEGER" sheet all DATATYPEDEFINITIONINTEGERDB instances
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONINTEGER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONINTEGER.rowVisitorDATATYPEDEFINITIONINTEGER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) rowVisitorDATATYPEDEFINITIONINTEGER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionintegerWOP DATATYPEDEFINITIONINTEGERWOP
		row.ReadStruct(&datatypedefinitionintegerWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionintegerDB := new(DATATYPEDEFINITIONINTEGERDB)
		datatypedefinitionintegerDB.CopyBasicFieldsFromDATATYPEDEFINITIONINTEGERWOP(&datatypedefinitionintegerWOP)

		datatypedefinitionintegerDB_ID_atBackupTime := datatypedefinitionintegerDB.ID
		datatypedefinitionintegerDB.ID = 0
		query := backRepoDATATYPEDEFINITIONINTEGER.db.Create(datatypedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[datatypedefinitionintegerDB.ID] = datatypedefinitionintegerDB
		BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID[datatypedefinitionintegerDB_ID_atBackupTime] = datatypedefinitionintegerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONINTEGERDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONINTEGERDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONINTEGERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONINTEGER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONINTEGERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB
	for _, datatypedefinitionintegerDB := range forRestore {

		datatypedefinitionintegerDB_ID_atBackupTime := datatypedefinitionintegerDB.ID
		datatypedefinitionintegerDB.ID = 0
		query := backRepoDATATYPEDEFINITIONINTEGER.db.Create(datatypedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[datatypedefinitionintegerDB.ID] = datatypedefinitionintegerDB
		BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID[datatypedefinitionintegerDB_ID_atBackupTime] = datatypedefinitionintegerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONINTEGER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONINTEGER>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) RestorePhaseTwo() {

	for _, datatypedefinitionintegerDB := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionintegerDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionintegerDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONINTEGER.db.Model(datatypedefinitionintegerDB).Updates(*datatypedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONINTEGER.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitioninteger := range backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERPtr {
		backRepoDATATYPEDEFINITIONINTEGER.ResetReversePointersInstance(backRepo, idx, datatypedefinitioninteger)
	}

	return
}

func (backRepoDATATYPEDEFINITIONINTEGER *BackRepoDATATYPEDEFINITIONINTEGERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitioninteger *models.DATATYPEDEFINITIONINTEGER) (Error error) {

	// fetch matching datatypedefinitionintegerDB
	if datatypedefinitionintegerDB, ok := backRepoDATATYPEDEFINITIONINTEGER.Map_DATATYPEDEFINITIONINTEGERDBID_DATATYPEDEFINITIONINTEGERDB[idx]; ok {
		_ = datatypedefinitionintegerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONINTEGERid_atBckpTime_newID map[uint]uint
