// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEDEFINITIONREAL_sql sql.NullBool
var dummy_ATTRIBUTEDEFINITIONREAL_time time.Duration
var dummy_ATTRIBUTEDEFINITIONREAL_sort sort.Float64Slice

// ATTRIBUTEDEFINITIONREALAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributedefinitionrealAPI
type ATTRIBUTEDEFINITIONREALAPI struct {
	gorm.Model

	models.ATTRIBUTEDEFINITIONREAL_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEDEFINITIONREALPointersEncoding ATTRIBUTEDEFINITIONREALPointersEncoding
}

// ATTRIBUTEDEFINITIONREALPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEDEFINITIONREALPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field DEFAULTVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFAULTVALUEID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// ATTRIBUTEDEFINITIONREALDB describes a attributedefinitionreal in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributedefinitionrealDB
type ATTRIBUTEDEFINITIONREALDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributedefinitionrealDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributedefinitionrealDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field attributedefinitionrealDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field attributedefinitionrealDB.ISEDITABLEAttr
	// provide the sql storage for the boolan
	ISEDITABLEAttr_Data sql.NullBool

	// Declation for basic field attributedefinitionrealDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field attributedefinitionrealDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEDEFINITIONREALPointersEncoding
}

// ATTRIBUTEDEFINITIONREALDBs arrays attributedefinitionrealDBs
// swagger:response attributedefinitionrealDBsResponse
type ATTRIBUTEDEFINITIONREALDBs []ATTRIBUTEDEFINITIONREALDB

// ATTRIBUTEDEFINITIONREALDBResponse provides response
// swagger:response attributedefinitionrealDBResponse
type ATTRIBUTEDEFINITIONREALDBResponse struct {
	ATTRIBUTEDEFINITIONREALDB
}

// ATTRIBUTEDEFINITIONREALWOP is a ATTRIBUTEDEFINITIONREAL without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEDEFINITIONREALWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	ISEDITABLEAttr bool `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEDEFINITIONREAL_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"ISEDITABLEAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoATTRIBUTEDEFINITIONREALStruct struct {
	// stores ATTRIBUTEDEFINITIONREALDB according to their gorm ID
	Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB map[uint]*ATTRIBUTEDEFINITIONREALDB

	// stores ATTRIBUTEDEFINITIONREALDB ID according to ATTRIBUTEDEFINITIONREAL address
	Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID map[*models.ATTRIBUTEDEFINITIONREAL]uint

	// stores ATTRIBUTEDEFINITIONREAL according to their gorm ID
	Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr map[uint]*models.ATTRIBUTEDEFINITIONREAL

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEDEFINITIONREAL.stage
	return
}

func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEDEFINITIONREAL.db
}

// GetATTRIBUTEDEFINITIONREALDBFromATTRIBUTEDEFINITIONREALPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) GetATTRIBUTEDEFINITIONREALDBFromATTRIBUTEDEFINITIONREALPtr(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) {
	id := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]
	attributedefinitionrealDB = backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[id]
	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseOne commits all staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributedefinitionreal := range stage.ATTRIBUTEDEFINITIONREALs {
		backRepoATTRIBUTEDEFINITIONREAL.CommitPhaseOneInstance(attributedefinitionreal)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributedefinitionreal := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr {
		if _, ok := stage.ATTRIBUTEDEFINITIONREALs[attributedefinitionreal]; !ok {
			backRepoATTRIBUTEDEFINITIONREAL.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CommitDeleteInstance commits deletion of ATTRIBUTEDEFINITIONREAL to the BackRepo
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CommitDeleteInstance(id uint) (Error error) {

	attributedefinitionreal := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[id]

	// attributedefinitionreal is not staged anymore, remove attributedefinitionrealDB
	attributedefinitionrealDB := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[id]
	query := backRepoATTRIBUTEDEFINITIONREAL.db.Unscoped().Delete(&attributedefinitionrealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID, attributedefinitionreal)
	delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr, id)
	delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB, id)

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseOneInstance commits attributedefinitionreal staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CommitPhaseOneInstance(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) (Error error) {

	// check if the attributedefinitionreal is not commited yet
	if _, ok := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]; ok {
		return
	}

	// initiate attributedefinitionreal
	var attributedefinitionrealDB ATTRIBUTEDEFINITIONREALDB
	attributedefinitionrealDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL(attributedefinitionreal)

	query := backRepoATTRIBUTEDEFINITIONREAL.db.Create(&attributedefinitionrealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal] = attributedefinitionrealDB.ID
	backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[attributedefinitionrealDB.ID] = attributedefinitionreal
	backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[attributedefinitionrealDB.ID] = &attributedefinitionrealDB

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseTwo commits all staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionreal := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr {
		backRepoATTRIBUTEDEFINITIONREAL.CommitPhaseTwoInstance(backRepo, idx, attributedefinitionreal)
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) (Error error) {

	// fetch matching attributedefinitionrealDB
	if attributedefinitionrealDB, ok := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[idx]; ok {

		attributedefinitionrealDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL(attributedefinitionreal)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributedefinitionreal.ALTERNATIVEID translates to updating the attributedefinitionreal.ALTERNATIVEIDID
		attributedefinitionrealDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionreal.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[attributedefinitionreal.ALTERNATIVEID]; ok {
				attributedefinitionrealDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				attributedefinitionrealDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			attributedefinitionrealDB.ALTERNATIVEIDID.Int64 = 0
			attributedefinitionrealDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value attributedefinitionreal.DEFAULTVALUE translates to updating the attributedefinitionreal.DEFAULTVALUEID
		attributedefinitionrealDB.DEFAULTVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionreal.DEFAULTVALUE != nil {
			if DEFAULTVALUEId, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[attributedefinitionreal.DEFAULTVALUE]; ok {
				attributedefinitionrealDB.DEFAULTVALUEID.Int64 = int64(DEFAULTVALUEId)
				attributedefinitionrealDB.DEFAULTVALUEID.Valid = true
			}
		} else {
			attributedefinitionrealDB.DEFAULTVALUEID.Int64 = 0
			attributedefinitionrealDB.DEFAULTVALUEID.Valid = true
		}

		// commit pointer value attributedefinitionreal.TYPE translates to updating the attributedefinitionreal.TYPEID
		attributedefinitionrealDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionreal.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQTYPE.Map_REQTYPEPtr_REQTYPEDBID[attributedefinitionreal.TYPE]; ok {
				attributedefinitionrealDB.TYPEID.Int64 = int64(TYPEId)
				attributedefinitionrealDB.TYPEID.Valid = true
			}
		} else {
			attributedefinitionrealDB.TYPEID.Int64 = 0
			attributedefinitionrealDB.TYPEID.Valid = true
		}

		query := backRepoATTRIBUTEDEFINITIONREAL.db.Save(&attributedefinitionrealDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEDEFINITIONREAL intance %s", attributedefinitionreal.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CheckoutPhaseOne() (Error error) {

	attributedefinitionrealDBArray := make([]ATTRIBUTEDEFINITIONREALDB, 0)
	query := backRepoATTRIBUTEDEFINITIONREAL.db.Find(&attributedefinitionrealDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributedefinitionrealInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEDEFINITIONREAL]any)
	for key, value := range backRepoATTRIBUTEDEFINITIONREAL.stage.ATTRIBUTEDEFINITIONREALs {
		attributedefinitionrealInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributedefinitionrealDB := range attributedefinitionrealDBArray {
		backRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseOneInstance(&attributedefinitionrealDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributedefinitionreal, ok := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[attributedefinitionrealDB.ID]
		if ok {
			delete(attributedefinitionrealInstancesToBeRemovedFromTheStage, attributedefinitionreal)
		}
	}

	// remove from stage and back repo's 3 maps all attributedefinitionreals that are not in the checkout
	for attributedefinitionreal := range attributedefinitionrealInstancesToBeRemovedFromTheStage {
		attributedefinitionreal.Unstage(backRepoATTRIBUTEDEFINITIONREAL.GetStage())

		// remove instance from the back repo 3 maps
		attributedefinitionrealID := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]
		delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID, attributedefinitionreal)
		delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB, attributedefinitionrealID)
		delete(backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr, attributedefinitionrealID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributedefinitionrealDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributedefinitionrealDB
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CheckoutPhaseOneInstance(attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) (Error error) {

	attributedefinitionreal, ok := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[attributedefinitionrealDB.ID]
	if !ok {
		attributedefinitionreal = new(models.ATTRIBUTEDEFINITIONREAL)

		backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[attributedefinitionrealDB.ID] = attributedefinitionreal
		backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal] = attributedefinitionrealDB.ID

		// append model store with the new element
		attributedefinitionreal.Name = attributedefinitionrealDB.Name_Data.String
		attributedefinitionreal.Stage(backRepoATTRIBUTEDEFINITIONREAL.GetStage())
	}
	attributedefinitionrealDB.CopyBasicFieldsToATTRIBUTEDEFINITIONREAL(attributedefinitionreal)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributedefinitionreal.Stage(backRepoATTRIBUTEDEFINITIONREAL.GetStage())

	// preserve pointer to attributedefinitionrealDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB)[attributedefinitionrealDB hold variable pointers
	attributedefinitionrealDB_Data := *attributedefinitionrealDB
	preservedPtrToATTRIBUTEDEFINITIONREAL := &attributedefinitionrealDB_Data
	backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[attributedefinitionrealDB.ID] = preservedPtrToATTRIBUTEDEFINITIONREAL

	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributedefinitionrealDB := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB {
		backRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseTwoInstance(backRepo, attributedefinitionrealDB)
	}
	return
}

// BackRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) (Error error) {

	attributedefinitionreal := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr[attributedefinitionrealDB.ID]

	attributedefinitionrealDB.DecodePointers(backRepo, attributedefinitionreal)

	return
}

func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) DecodePointers(backRepo *BackRepoStruct, attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	attributedefinitionreal.ALTERNATIVEID = nil
	if attributedefinitionrealDB.ALTERNATIVEIDID.Int64 != 0 {
		attributedefinitionreal.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(attributedefinitionrealDB.ALTERNATIVEIDID.Int64)]
	}
	// DEFAULTVALUE field
	attributedefinitionreal.DEFAULTVALUE = nil
	if attributedefinitionrealDB.DEFAULTVALUEID.Int64 != 0 {
		attributedefinitionreal.DEFAULTVALUE = backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[uint(attributedefinitionrealDB.DEFAULTVALUEID.Int64)]
	}
	// TYPE field
	attributedefinitionreal.TYPE = nil
	if attributedefinitionrealDB.TYPEID.Int64 != 0 {
		attributedefinitionreal.TYPE = backRepo.BackRepoREQTYPE.Map_REQTYPEDBID_REQTYPEPtr[uint(attributedefinitionrealDB.TYPEID.Int64)]
	}
	return
}

// CommitATTRIBUTEDEFINITIONREAL allows commit of a single attributedefinitionreal (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEDEFINITIONREAL(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) {
	backRepo.BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseOneInstance(attributedefinitionreal)
	if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]; ok {
		backRepo.BackRepoATTRIBUTEDEFINITIONREAL.CommitPhaseTwoInstance(backRepo, id, attributedefinitionreal)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEDEFINITIONREAL allows checkout of a single attributedefinitionreal (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEDEFINITIONREAL(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) {
	// check if the attributedefinitionreal is staged
	if _, ok := backRepo.BackRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALPtr_ATTRIBUTEDEFINITIONREALDBID[attributedefinitionreal]; ok {
			var attributedefinitionrealDB ATTRIBUTEDEFINITIONREALDB
			attributedefinitionrealDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEDEFINITIONREAL.db.First(&attributedefinitionrealDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEDEFINITIONREAL : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseOneInstance(&attributedefinitionrealDB)
			backRepo.BackRepoATTRIBUTEDEFINITIONREAL.CheckoutPhaseTwoInstance(backRepo, &attributedefinitionrealDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) {
	// insertion point for fields commit

	attributedefinitionrealDB.Name_Data.String = attributedefinitionreal.Name
	attributedefinitionrealDB.Name_Data.Valid = true

	attributedefinitionrealDB.DESCAttr_Data.String = attributedefinitionreal.DESCAttr
	attributedefinitionrealDB.DESCAttr_Data.Valid = true

	attributedefinitionrealDB.IDENTIFIERAttr_Data.String = attributedefinitionreal.IDENTIFIERAttr
	attributedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool = attributedefinitionreal.ISEDITABLEAttr
	attributedefinitionrealDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionrealDB.LASTCHANGEAttr_Data.String = attributedefinitionreal.LASTCHANGEAttr
	attributedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionrealDB.LONGNAMEAttr_Data.String = attributedefinitionreal.LONGNAMEAttr
	attributedefinitionrealDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL_WOP
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONREAL_WOP(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL_WOP) {
	// insertion point for fields commit

	attributedefinitionrealDB.Name_Data.String = attributedefinitionreal.Name
	attributedefinitionrealDB.Name_Data.Valid = true

	attributedefinitionrealDB.DESCAttr_Data.String = attributedefinitionreal.DESCAttr
	attributedefinitionrealDB.DESCAttr_Data.Valid = true

	attributedefinitionrealDB.IDENTIFIERAttr_Data.String = attributedefinitionreal.IDENTIFIERAttr
	attributedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool = attributedefinitionreal.ISEDITABLEAttr
	attributedefinitionrealDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionrealDB.LASTCHANGEAttr_Data.String = attributedefinitionreal.LASTCHANGEAttr
	attributedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionrealDB.LONGNAMEAttr_Data.String = attributedefinitionreal.LONGNAMEAttr
	attributedefinitionrealDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONREALWOP
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONREALWOP(attributedefinitionreal *ATTRIBUTEDEFINITIONREALWOP) {
	// insertion point for fields commit

	attributedefinitionrealDB.Name_Data.String = attributedefinitionreal.Name
	attributedefinitionrealDB.Name_Data.Valid = true

	attributedefinitionrealDB.DESCAttr_Data.String = attributedefinitionreal.DESCAttr
	attributedefinitionrealDB.DESCAttr_Data.Valid = true

	attributedefinitionrealDB.IDENTIFIERAttr_Data.String = attributedefinitionreal.IDENTIFIERAttr
	attributedefinitionrealDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool = attributedefinitionreal.ISEDITABLEAttr
	attributedefinitionrealDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionrealDB.LASTCHANGEAttr_Data.String = attributedefinitionreal.LASTCHANGEAttr
	attributedefinitionrealDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionrealDB.LONGNAMEAttr_Data.String = attributedefinitionreal.LONGNAMEAttr
	attributedefinitionrealDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONREAL
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsToATTRIBUTEDEFINITIONREAL(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionreal.Name = attributedefinitionrealDB.Name_Data.String
	attributedefinitionreal.DESCAttr = attributedefinitionrealDB.DESCAttr_Data.String
	attributedefinitionreal.IDENTIFIERAttr = attributedefinitionrealDB.IDENTIFIERAttr_Data.String
	attributedefinitionreal.ISEDITABLEAttr = attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionreal.LASTCHANGEAttr = attributedefinitionrealDB.LASTCHANGEAttr_Data.String
	attributedefinitionreal.LONGNAMEAttr = attributedefinitionrealDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONREAL_WOP
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsToATTRIBUTEDEFINITIONREAL_WOP(attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionreal.Name = attributedefinitionrealDB.Name_Data.String
	attributedefinitionreal.DESCAttr = attributedefinitionrealDB.DESCAttr_Data.String
	attributedefinitionreal.IDENTIFIERAttr = attributedefinitionrealDB.IDENTIFIERAttr_Data.String
	attributedefinitionreal.ISEDITABLEAttr = attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionreal.LASTCHANGEAttr = attributedefinitionrealDB.LASTCHANGEAttr_Data.String
	attributedefinitionreal.LONGNAMEAttr = attributedefinitionrealDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONREALWOP
func (attributedefinitionrealDB *ATTRIBUTEDEFINITIONREALDB) CopyBasicFieldsToATTRIBUTEDEFINITIONREALWOP(attributedefinitionreal *ATTRIBUTEDEFINITIONREALWOP) {
	attributedefinitionreal.ID = int(attributedefinitionrealDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionreal.Name = attributedefinitionrealDB.Name_Data.String
	attributedefinitionreal.DESCAttr = attributedefinitionrealDB.DESCAttr_Data.String
	attributedefinitionreal.IDENTIFIERAttr = attributedefinitionrealDB.IDENTIFIERAttr_Data.String
	attributedefinitionreal.ISEDITABLEAttr = attributedefinitionrealDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionreal.LASTCHANGEAttr = attributedefinitionrealDB.LASTCHANGEAttr_Data.String
	attributedefinitionreal.LONGNAMEAttr = attributedefinitionrealDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONREALDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONREALDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONREALDB, 0)
	for _, attributedefinitionrealDB := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB {
		forBackup = append(forBackup, attributedefinitionrealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEDEFINITIONREAL ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEDEFINITIONREAL file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONREALDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONREALDB, 0)
	for _, attributedefinitionrealDB := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB {
		forBackup = append(forBackup, attributedefinitionrealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEDEFINITIONREAL")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEDEFINITIONREAL_Fields, -1)
	for _, attributedefinitionrealDB := range forBackup {

		var attributedefinitionrealWOP ATTRIBUTEDEFINITIONREALWOP
		attributedefinitionrealDB.CopyBasicFieldsToATTRIBUTEDEFINITIONREALWOP(&attributedefinitionrealWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributedefinitionrealWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEDEFINITIONREAL" sheet all ATTRIBUTEDEFINITIONREALDB instances
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEDEFINITIONREAL"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEDEFINITIONREAL.rowVisitorATTRIBUTEDEFINITIONREAL)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) rowVisitorATTRIBUTEDEFINITIONREAL(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributedefinitionrealWOP ATTRIBUTEDEFINITIONREALWOP
		row.ReadStruct(&attributedefinitionrealWOP)

		// add the unmarshalled struct to the stage
		attributedefinitionrealDB := new(ATTRIBUTEDEFINITIONREALDB)
		attributedefinitionrealDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONREALWOP(&attributedefinitionrealWOP)

		attributedefinitionrealDB_ID_atBackupTime := attributedefinitionrealDB.ID
		attributedefinitionrealDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONREAL.db.Create(attributedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[attributedefinitionrealDB.ID] = attributedefinitionrealDB
		BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID[attributedefinitionrealDB_ID_atBackupTime] = attributedefinitionrealDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEDEFINITIONREALDB.json" in dirPath that stores an array
// of ATTRIBUTEDEFINITIONREALDB and stores it in the database
// the map BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONREALDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEDEFINITIONREAL file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEDEFINITIONREALDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB
	for _, attributedefinitionrealDB := range forRestore {

		attributedefinitionrealDB_ID_atBackupTime := attributedefinitionrealDB.ID
		attributedefinitionrealDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONREAL.db.Create(attributedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[attributedefinitionrealDB.ID] = attributedefinitionrealDB
		BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID[attributedefinitionrealDB_ID_atBackupTime] = attributedefinitionrealDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEDEFINITIONREAL file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEDEFINITIONREAL>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) RestorePhaseTwo() {

	for _, attributedefinitionrealDB := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB {

		// next line of code is to avert unused variable compilation error
		_ = attributedefinitionrealDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if attributedefinitionrealDB.ALTERNATIVEIDID.Int64 != 0 {
			attributedefinitionrealDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(attributedefinitionrealDB.ALTERNATIVEIDID.Int64)])
			attributedefinitionrealDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing DEFAULTVALUE field
		if attributedefinitionrealDB.DEFAULTVALUEID.Int64 != 0 {
			attributedefinitionrealDB.DEFAULTVALUEID.Int64 = int64(BackRepoDEFAULTVALUEid_atBckpTime_newID[uint(attributedefinitionrealDB.DEFAULTVALUEID.Int64)])
			attributedefinitionrealDB.DEFAULTVALUEID.Valid = true
		}

		// reindexing TYPE field
		if attributedefinitionrealDB.TYPEID.Int64 != 0 {
			attributedefinitionrealDB.TYPEID.Int64 = int64(BackRepoREQTYPEid_atBckpTime_newID[uint(attributedefinitionrealDB.TYPEID.Int64)])
			attributedefinitionrealDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEDEFINITIONREAL.db.Model(attributedefinitionrealDB).Updates(*attributedefinitionrealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEDEFINITIONREAL.ResetReversePointers commits all staged instances of ATTRIBUTEDEFINITIONREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionreal := range backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALPtr {
		backRepoATTRIBUTEDEFINITIONREAL.ResetReversePointersInstance(backRepo, idx, attributedefinitionreal)
	}

	return
}

func (backRepoATTRIBUTEDEFINITIONREAL *BackRepoATTRIBUTEDEFINITIONREALStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionreal *models.ATTRIBUTEDEFINITIONREAL) (Error error) {

	// fetch matching attributedefinitionrealDB
	if attributedefinitionrealDB, ok := backRepoATTRIBUTEDEFINITIONREAL.Map_ATTRIBUTEDEFINITIONREALDBID_ATTRIBUTEDEFINITIONREALDB[idx]; ok {
		_ = attributedefinitionrealDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEDEFINITIONREALid_atBckpTime_newID map[uint]uint
