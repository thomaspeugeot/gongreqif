// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECIFICATION_TYPE_sql sql.NullBool
var dummy_SPECIFICATION_TYPE_time time.Duration
var dummy_SPECIFICATION_TYPE_sort sort.Float64Slice

// SPECIFICATION_TYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specification_typeAPI
type SPECIFICATION_TYPEAPI struct {
	gorm.Model

	models.SPECIFICATION_TYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECIFICATION_TYPEPointersEncoding SPECIFICATION_TYPEPointersEncoding
}

// SPECIFICATION_TYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECIFICATION_TYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SPECIFICATION_TYPEDB describes a specification_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specification_typeDB
type SPECIFICATION_TYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specification_typeDB.Name
	Name_Data sql.NullString

	// Declation for basic field specification_typeDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field specification_typeDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field specification_typeDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullTime

	// Declation for basic field specification_typeDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECIFICATION_TYPEPointersEncoding
}

// SPECIFICATION_TYPEDBs arrays specification_typeDBs
// swagger:response specification_typeDBsResponse
type SPECIFICATION_TYPEDBs []SPECIFICATION_TYPEDB

// SPECIFICATION_TYPEDBResponse provides response
// swagger:response specification_typeDBResponse
type SPECIFICATION_TYPEDBResponse struct {
	SPECIFICATION_TYPEDB
}

// SPECIFICATION_TYPEWOP is a SPECIFICATION_TYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECIFICATION_TYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE time.Time `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPECIFICATION_TYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoSPECIFICATION_TYPEStruct struct {
	// stores SPECIFICATION_TYPEDB according to their gorm ID
	Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB map[uint]*SPECIFICATION_TYPEDB

	// stores SPECIFICATION_TYPEDB ID according to SPECIFICATION_TYPE address
	Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID map[*models.SPECIFICATION_TYPE]uint

	// stores SPECIFICATION_TYPE according to their gorm ID
	Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr map[uint]*models.SPECIFICATION_TYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECIFICATION_TYPE.stage
	return
}

func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) GetDB() *gorm.DB {
	return backRepoSPECIFICATION_TYPE.db
}

// GetSPECIFICATION_TYPEDBFromSPECIFICATION_TYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) GetSPECIFICATION_TYPEDBFromSPECIFICATION_TYPEPtr(specification_type *models.SPECIFICATION_TYPE) (specification_typeDB *SPECIFICATION_TYPEDB) {
	id := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]
	specification_typeDB = backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[id]
	return
}

// BackRepoSPECIFICATION_TYPE.CommitPhaseOne commits all staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specification_type := range stage.SPECIFICATION_TYPEs {
		backRepoSPECIFICATION_TYPE.CommitPhaseOneInstance(specification_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specification_type := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr {
		if _, ok := stage.SPECIFICATION_TYPEs[specification_type]; !ok {
			backRepoSPECIFICATION_TYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECIFICATION_TYPE.CommitDeleteInstance commits deletion of SPECIFICATION_TYPE to the BackRepo
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	specification_type := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[id]

	// specification_type is not staged anymore, remove specification_typeDB
	specification_typeDB := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[id]
	query := backRepoSPECIFICATION_TYPE.db.Unscoped().Delete(&specification_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID, specification_type)
	delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr, id)
	delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB, id)

	return
}

// BackRepoSPECIFICATION_TYPE.CommitPhaseOneInstance commits specification_type staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CommitPhaseOneInstance(specification_type *models.SPECIFICATION_TYPE) (Error error) {

	// check if the specification_type is not commited yet
	if _, ok := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]; ok {
		return
	}

	// initiate specification_type
	var specification_typeDB SPECIFICATION_TYPEDB
	specification_typeDB.CopyBasicFieldsFromSPECIFICATION_TYPE(specification_type)

	query := backRepoSPECIFICATION_TYPE.db.Create(&specification_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type] = specification_typeDB.ID
	backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[specification_typeDB.ID] = specification_type
	backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[specification_typeDB.ID] = &specification_typeDB

	return
}

// BackRepoSPECIFICATION_TYPE.CommitPhaseTwo commits all staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specification_type := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr {
		backRepoSPECIFICATION_TYPE.CommitPhaseTwoInstance(backRepo, idx, specification_type)
	}

	return
}

// BackRepoSPECIFICATION_TYPE.CommitPhaseTwoInstance commits {{structname }} of models.SPECIFICATION_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specification_type *models.SPECIFICATION_TYPE) (Error error) {

	// fetch matching specification_typeDB
	if specification_typeDB, ok := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[idx]; ok {

		specification_typeDB.CopyBasicFieldsFromSPECIFICATION_TYPE(specification_type)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSPECIFICATION_TYPE.db.Save(&specification_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECIFICATION_TYPE intance %s", specification_type.Name))
		return err
	}

	return
}

// BackRepoSPECIFICATION_TYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CheckoutPhaseOne() (Error error) {

	specification_typeDBArray := make([]SPECIFICATION_TYPEDB, 0)
	query := backRepoSPECIFICATION_TYPE.db.Find(&specification_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specification_typeInstancesToBeRemovedFromTheStage := make(map[*models.SPECIFICATION_TYPE]any)
	for key, value := range backRepoSPECIFICATION_TYPE.stage.SPECIFICATION_TYPEs {
		specification_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specification_typeDB := range specification_typeDBArray {
		backRepoSPECIFICATION_TYPE.CheckoutPhaseOneInstance(&specification_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specification_type, ok := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[specification_typeDB.ID]
		if ok {
			delete(specification_typeInstancesToBeRemovedFromTheStage, specification_type)
		}
	}

	// remove from stage and back repo's 3 maps all specification_types that are not in the checkout
	for specification_type := range specification_typeInstancesToBeRemovedFromTheStage {
		specification_type.Unstage(backRepoSPECIFICATION_TYPE.GetStage())

		// remove instance from the back repo 3 maps
		specification_typeID := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]
		delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID, specification_type)
		delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB, specification_typeID)
		delete(backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr, specification_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specification_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the specification_typeDB
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CheckoutPhaseOneInstance(specification_typeDB *SPECIFICATION_TYPEDB) (Error error) {

	specification_type, ok := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[specification_typeDB.ID]
	if !ok {
		specification_type = new(models.SPECIFICATION_TYPE)

		backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[specification_typeDB.ID] = specification_type
		backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type] = specification_typeDB.ID

		// append model store with the new element
		specification_type.Name = specification_typeDB.Name_Data.String
		specification_type.Stage(backRepoSPECIFICATION_TYPE.GetStage())
	}
	specification_typeDB.CopyBasicFieldsToSPECIFICATION_TYPE(specification_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specification_type.Stage(backRepoSPECIFICATION_TYPE.GetStage())

	// preserve pointer to specification_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB)[specification_typeDB hold variable pointers
	specification_typeDB_Data := *specification_typeDB
	preservedPtrToSPECIFICATION_TYPE := &specification_typeDB_Data
	backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[specification_typeDB.ID] = preservedPtrToSPECIFICATION_TYPE

	return
}

// BackRepoSPECIFICATION_TYPE.CheckoutPhaseTwo Checkouts all staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specification_typeDB := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB {
		backRepoSPECIFICATION_TYPE.CheckoutPhaseTwoInstance(backRepo, specification_typeDB)
	}
	return
}

// BackRepoSPECIFICATION_TYPE.CheckoutPhaseTwoInstance Checkouts staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specification_typeDB *SPECIFICATION_TYPEDB) (Error error) {

	specification_type := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr[specification_typeDB.ID]

	specification_typeDB.DecodePointers(backRepo, specification_type)

	return
}

func (specification_typeDB *SPECIFICATION_TYPEDB) DecodePointers(backRepo *BackRepoStruct, specification_type *models.SPECIFICATION_TYPE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSPECIFICATION_TYPE allows commit of a single specification_type (if already staged)
func (backRepo *BackRepoStruct) CommitSPECIFICATION_TYPE(specification_type *models.SPECIFICATION_TYPE) {
	backRepo.BackRepoSPECIFICATION_TYPE.CommitPhaseOneInstance(specification_type)
	if id, ok := backRepo.BackRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]; ok {
		backRepo.BackRepoSPECIFICATION_TYPE.CommitPhaseTwoInstance(backRepo, id, specification_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECIFICATION_TYPE allows checkout of a single specification_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECIFICATION_TYPE(specification_type *models.SPECIFICATION_TYPE) {
	// check if the specification_type is staged
	if _, ok := backRepo.BackRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]; ok {

		if id, ok := backRepo.BackRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEPtr_SPECIFICATION_TYPEDBID[specification_type]; ok {
			var specification_typeDB SPECIFICATION_TYPEDB
			specification_typeDB.ID = id

			if err := backRepo.BackRepoSPECIFICATION_TYPE.db.First(&specification_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECIFICATION_TYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECIFICATION_TYPE.CheckoutPhaseOneInstance(&specification_typeDB)
			backRepo.BackRepoSPECIFICATION_TYPE.CheckoutPhaseTwoInstance(backRepo, &specification_typeDB)
		}
	}
}

// CopyBasicFieldsFromSPECIFICATION_TYPE
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsFromSPECIFICATION_TYPE(specification_type *models.SPECIFICATION_TYPE) {
	// insertion point for fields commit

	specification_typeDB.Name_Data.String = specification_type.Name
	specification_typeDB.Name_Data.Valid = true

	specification_typeDB.DESC_Data.String = specification_type.DESC
	specification_typeDB.DESC_Data.Valid = true

	specification_typeDB.IDENTIFIER_Data.String = specification_type.IDENTIFIER
	specification_typeDB.IDENTIFIER_Data.Valid = true

	specification_typeDB.LAST_CHANGE_Data.Time = specification_type.LAST_CHANGE
	specification_typeDB.LAST_CHANGE_Data.Valid = true

	specification_typeDB.LONG_NAME_Data.String = specification_type.LONG_NAME
	specification_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATION_TYPE_WOP
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsFromSPECIFICATION_TYPE_WOP(specification_type *models.SPECIFICATION_TYPE_WOP) {
	// insertion point for fields commit

	specification_typeDB.Name_Data.String = specification_type.Name
	specification_typeDB.Name_Data.Valid = true

	specification_typeDB.DESC_Data.String = specification_type.DESC
	specification_typeDB.DESC_Data.Valid = true

	specification_typeDB.IDENTIFIER_Data.String = specification_type.IDENTIFIER
	specification_typeDB.IDENTIFIER_Data.Valid = true

	specification_typeDB.LAST_CHANGE_Data.Time = specification_type.LAST_CHANGE
	specification_typeDB.LAST_CHANGE_Data.Valid = true

	specification_typeDB.LONG_NAME_Data.String = specification_type.LONG_NAME
	specification_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFICATION_TYPEWOP
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsFromSPECIFICATION_TYPEWOP(specification_type *SPECIFICATION_TYPEWOP) {
	// insertion point for fields commit

	specification_typeDB.Name_Data.String = specification_type.Name
	specification_typeDB.Name_Data.Valid = true

	specification_typeDB.DESC_Data.String = specification_type.DESC
	specification_typeDB.DESC_Data.Valid = true

	specification_typeDB.IDENTIFIER_Data.String = specification_type.IDENTIFIER
	specification_typeDB.IDENTIFIER_Data.Valid = true

	specification_typeDB.LAST_CHANGE_Data.Time = specification_type.LAST_CHANGE
	specification_typeDB.LAST_CHANGE_Data.Valid = true

	specification_typeDB.LONG_NAME_Data.String = specification_type.LONG_NAME
	specification_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToSPECIFICATION_TYPE
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsToSPECIFICATION_TYPE(specification_type *models.SPECIFICATION_TYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	specification_type.Name = specification_typeDB.Name_Data.String
	specification_type.DESC = specification_typeDB.DESC_Data.String
	specification_type.IDENTIFIER = specification_typeDB.IDENTIFIER_Data.String
	specification_type.LAST_CHANGE = specification_typeDB.LAST_CHANGE_Data.Time
	specification_type.LONG_NAME = specification_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPECIFICATION_TYPE_WOP
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsToSPECIFICATION_TYPE_WOP(specification_type *models.SPECIFICATION_TYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specification_type.Name = specification_typeDB.Name_Data.String
	specification_type.DESC = specification_typeDB.DESC_Data.String
	specification_type.IDENTIFIER = specification_typeDB.IDENTIFIER_Data.String
	specification_type.LAST_CHANGE = specification_typeDB.LAST_CHANGE_Data.Time
	specification_type.LONG_NAME = specification_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPECIFICATION_TYPEWOP
func (specification_typeDB *SPECIFICATION_TYPEDB) CopyBasicFieldsToSPECIFICATION_TYPEWOP(specification_type *SPECIFICATION_TYPEWOP) {
	specification_type.ID = int(specification_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specification_type.Name = specification_typeDB.Name_Data.String
	specification_type.DESC = specification_typeDB.DESC_Data.String
	specification_type.IDENTIFIER = specification_typeDB.IDENTIFIER_Data.String
	specification_type.LAST_CHANGE = specification_typeDB.LAST_CHANGE_Data.Time
	specification_type.LONG_NAME = specification_typeDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all SPECIFICATION_TYPEDB instances in the backrepo
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECIFICATION_TYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATION_TYPEDB, 0)
	for _, specification_typeDB := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB {
		forBackup = append(forBackup, specification_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECIFICATION_TYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECIFICATION_TYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECIFICATION_TYPEDB instances in the backrepo
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFICATION_TYPEDB, 0)
	for _, specification_typeDB := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB {
		forBackup = append(forBackup, specification_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECIFICATION_TYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECIFICATION_TYPE_Fields, -1)
	for _, specification_typeDB := range forBackup {

		var specification_typeWOP SPECIFICATION_TYPEWOP
		specification_typeDB.CopyBasicFieldsToSPECIFICATION_TYPEWOP(&specification_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&specification_typeWOP, -1)
	}
}

// RestoreXL from the "SPECIFICATION_TYPE" sheet all SPECIFICATION_TYPEDB instances
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECIFICATION_TYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECIFICATION_TYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECIFICATION_TYPE.rowVisitorSPECIFICATION_TYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) rowVisitorSPECIFICATION_TYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specification_typeWOP SPECIFICATION_TYPEWOP
		row.ReadStruct(&specification_typeWOP)

		// add the unmarshalled struct to the stage
		specification_typeDB := new(SPECIFICATION_TYPEDB)
		specification_typeDB.CopyBasicFieldsFromSPECIFICATION_TYPEWOP(&specification_typeWOP)

		specification_typeDB_ID_atBackupTime := specification_typeDB.ID
		specification_typeDB.ID = 0
		query := backRepoSPECIFICATION_TYPE.db.Create(specification_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[specification_typeDB.ID] = specification_typeDB
		BackRepoSPECIFICATION_TYPEid_atBckpTime_newID[specification_typeDB_ID_atBackupTime] = specification_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECIFICATION_TYPEDB.json" in dirPath that stores an array
// of SPECIFICATION_TYPEDB and stores it in the database
// the map BackRepoSPECIFICATION_TYPEid_atBckpTime_newID is updated accordingly
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECIFICATION_TYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECIFICATION_TYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECIFICATION_TYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECIFICATION_TYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB
	for _, specification_typeDB := range forRestore {

		specification_typeDB_ID_atBackupTime := specification_typeDB.ID
		specification_typeDB.ID = 0
		query := backRepoSPECIFICATION_TYPE.db.Create(specification_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[specification_typeDB.ID] = specification_typeDB
		BackRepoSPECIFICATION_TYPEid_atBckpTime_newID[specification_typeDB_ID_atBackupTime] = specification_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECIFICATION_TYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECIFICATION_TYPE>id_atBckpTime_newID
// to compute new index
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) RestorePhaseTwo() {

	for _, specification_typeDB := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = specification_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECIFICATION_TYPE.db.Model(specification_typeDB).Updates(*specification_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECIFICATION_TYPE.ResetReversePointers commits all staged instances of SPECIFICATION_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specification_type := range backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEPtr {
		backRepoSPECIFICATION_TYPE.ResetReversePointersInstance(backRepo, idx, specification_type)
	}

	return
}

func (backRepoSPECIFICATION_TYPE *BackRepoSPECIFICATION_TYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specification_type *models.SPECIFICATION_TYPE) (Error error) {

	// fetch matching specification_typeDB
	if specification_typeDB, ok := backRepoSPECIFICATION_TYPE.Map_SPECIFICATION_TYPEDBID_SPECIFICATION_TYPEDB[idx]; ok {
		_ = specification_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECIFICATION_TYPEid_atBckpTime_newID map[uint]uint
