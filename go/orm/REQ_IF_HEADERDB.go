// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQ_IF_HEADER_sql sql.NullBool
var dummy_REQ_IF_HEADER_time time.Duration
var dummy_REQ_IF_HEADER_sort sort.Float64Slice

// REQ_IF_HEADERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model req_if_headerAPI
type REQ_IF_HEADERAPI struct {
	gorm.Model

	models.REQ_IF_HEADER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQ_IF_HEADERPointersEncoding REQ_IF_HEADERPointersEncoding
}

// REQ_IF_HEADERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQ_IF_HEADERPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// REQ_IF_HEADERDB describes a req_if_header in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model req_if_headerDB
type REQ_IF_HEADERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field req_if_headerDB.Name
	Name_Data sql.NullString

	// Declation for basic field req_if_headerDB.COMMENT
	COMMENT_Data sql.NullString

	// Declation for basic field req_if_headerDB.CREATION_TIME
	CREATION_TIME_Data sql.NullTime

	// Declation for basic field req_if_headerDB.REPOSITORY_ID
	REPOSITORY_ID_Data sql.NullString

	// Declation for basic field req_if_headerDB.REQ_IF_TOOL_ID
	REQ_IF_TOOL_ID_Data sql.NullString

	// Declation for basic field req_if_headerDB.REQ_IF_VERSION
	REQ_IF_VERSION_Data sql.NullString

	// Declation for basic field req_if_headerDB.SOURCE_TOOL_ID
	SOURCE_TOOL_ID_Data sql.NullString

	// Declation for basic field req_if_headerDB.TITLE
	TITLE_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQ_IF_HEADERPointersEncoding
}

// REQ_IF_HEADERDBs arrays req_if_headerDBs
// swagger:response req_if_headerDBsResponse
type REQ_IF_HEADERDBs []REQ_IF_HEADERDB

// REQ_IF_HEADERDBResponse provides response
// swagger:response req_if_headerDBResponse
type REQ_IF_HEADERDBResponse struct {
	REQ_IF_HEADERDB
}

// REQ_IF_HEADERWOP is a REQ_IF_HEADER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQ_IF_HEADERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	COMMENT string `xlsx:"2"`

	CREATION_TIME time.Time `xlsx:"3"`

	REPOSITORY_ID string `xlsx:"4"`

	REQ_IF_TOOL_ID string `xlsx:"5"`

	REQ_IF_VERSION string `xlsx:"6"`

	SOURCE_TOOL_ID string `xlsx:"7"`

	TITLE string `xlsx:"8"`
	// insertion for WOP pointer fields
}

var REQ_IF_HEADER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"COMMENT",
	"CREATION_TIME",
	"REPOSITORY_ID",
	"REQ_IF_TOOL_ID",
	"REQ_IF_VERSION",
	"SOURCE_TOOL_ID",
	"TITLE",
}

type BackRepoREQ_IF_HEADERStruct struct {
	// stores REQ_IF_HEADERDB according to their gorm ID
	Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB map[uint]*REQ_IF_HEADERDB

	// stores REQ_IF_HEADERDB ID according to REQ_IF_HEADER address
	Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID map[*models.REQ_IF_HEADER]uint

	// stores REQ_IF_HEADER according to their gorm ID
	Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr map[uint]*models.REQ_IF_HEADER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQ_IF_HEADER.stage
	return
}

func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) GetDB() *gorm.DB {
	return backRepoREQ_IF_HEADER.db
}

// GetREQ_IF_HEADERDBFromREQ_IF_HEADERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) GetREQ_IF_HEADERDBFromREQ_IF_HEADERPtr(req_if_header *models.REQ_IF_HEADER) (req_if_headerDB *REQ_IF_HEADERDB) {
	id := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]
	req_if_headerDB = backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[id]
	return
}

// BackRepoREQ_IF_HEADER.CommitPhaseOne commits all staged instances of REQ_IF_HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for req_if_header := range stage.REQ_IF_HEADERs {
		backRepoREQ_IF_HEADER.CommitPhaseOneInstance(req_if_header)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, req_if_header := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr {
		if _, ok := stage.REQ_IF_HEADERs[req_if_header]; !ok {
			backRepoREQ_IF_HEADER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQ_IF_HEADER.CommitDeleteInstance commits deletion of REQ_IF_HEADER to the BackRepo
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CommitDeleteInstance(id uint) (Error error) {

	req_if_header := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[id]

	// req_if_header is not staged anymore, remove req_if_headerDB
	req_if_headerDB := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[id]
	query := backRepoREQ_IF_HEADER.db.Unscoped().Delete(&req_if_headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID, req_if_header)
	delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr, id)
	delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB, id)

	return
}

// BackRepoREQ_IF_HEADER.CommitPhaseOneInstance commits req_if_header staged instances of REQ_IF_HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CommitPhaseOneInstance(req_if_header *models.REQ_IF_HEADER) (Error error) {

	// check if the req_if_header is not commited yet
	if _, ok := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]; ok {
		return
	}

	// initiate req_if_header
	var req_if_headerDB REQ_IF_HEADERDB
	req_if_headerDB.CopyBasicFieldsFromREQ_IF_HEADER(req_if_header)

	query := backRepoREQ_IF_HEADER.db.Create(&req_if_headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header] = req_if_headerDB.ID
	backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[req_if_headerDB.ID] = req_if_header
	backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[req_if_headerDB.ID] = &req_if_headerDB

	return
}

// BackRepoREQ_IF_HEADER.CommitPhaseTwo commits all staged instances of REQ_IF_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, req_if_header := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr {
		backRepoREQ_IF_HEADER.CommitPhaseTwoInstance(backRepo, idx, req_if_header)
	}

	return
}

// BackRepoREQ_IF_HEADER.CommitPhaseTwoInstance commits {{structname }} of models.REQ_IF_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, req_if_header *models.REQ_IF_HEADER) (Error error) {

	// fetch matching req_if_headerDB
	if req_if_headerDB, ok := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[idx]; ok {

		req_if_headerDB.CopyBasicFieldsFromREQ_IF_HEADER(req_if_header)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoREQ_IF_HEADER.db.Save(&req_if_headerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQ_IF_HEADER intance %s", req_if_header.Name))
		return err
	}

	return
}

// BackRepoREQ_IF_HEADER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CheckoutPhaseOne() (Error error) {

	req_if_headerDBArray := make([]REQ_IF_HEADERDB, 0)
	query := backRepoREQ_IF_HEADER.db.Find(&req_if_headerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	req_if_headerInstancesToBeRemovedFromTheStage := make(map[*models.REQ_IF_HEADER]any)
	for key, value := range backRepoREQ_IF_HEADER.stage.REQ_IF_HEADERs {
		req_if_headerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, req_if_headerDB := range req_if_headerDBArray {
		backRepoREQ_IF_HEADER.CheckoutPhaseOneInstance(&req_if_headerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		req_if_header, ok := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[req_if_headerDB.ID]
		if ok {
			delete(req_if_headerInstancesToBeRemovedFromTheStage, req_if_header)
		}
	}

	// remove from stage and back repo's 3 maps all req_if_headers that are not in the checkout
	for req_if_header := range req_if_headerInstancesToBeRemovedFromTheStage {
		req_if_header.Unstage(backRepoREQ_IF_HEADER.GetStage())

		// remove instance from the back repo 3 maps
		req_if_headerID := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]
		delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID, req_if_header)
		delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB, req_if_headerID)
		delete(backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr, req_if_headerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a req_if_headerDB that has been found in the DB, updates the backRepo and stages the
// models version of the req_if_headerDB
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CheckoutPhaseOneInstance(req_if_headerDB *REQ_IF_HEADERDB) (Error error) {

	req_if_header, ok := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[req_if_headerDB.ID]
	if !ok {
		req_if_header = new(models.REQ_IF_HEADER)

		backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[req_if_headerDB.ID] = req_if_header
		backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header] = req_if_headerDB.ID

		// append model store with the new element
		req_if_header.Name = req_if_headerDB.Name_Data.String
		req_if_header.Stage(backRepoREQ_IF_HEADER.GetStage())
	}
	req_if_headerDB.CopyBasicFieldsToREQ_IF_HEADER(req_if_header)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	req_if_header.Stage(backRepoREQ_IF_HEADER.GetStage())

	// preserve pointer to req_if_headerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB)[req_if_headerDB hold variable pointers
	req_if_headerDB_Data := *req_if_headerDB
	preservedPtrToREQ_IF_HEADER := &req_if_headerDB_Data
	backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[req_if_headerDB.ID] = preservedPtrToREQ_IF_HEADER

	return
}

// BackRepoREQ_IF_HEADER.CheckoutPhaseTwo Checkouts all staged instances of REQ_IF_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, req_if_headerDB := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB {
		backRepoREQ_IF_HEADER.CheckoutPhaseTwoInstance(backRepo, req_if_headerDB)
	}
	return
}

// BackRepoREQ_IF_HEADER.CheckoutPhaseTwoInstance Checkouts staged instances of REQ_IF_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, req_if_headerDB *REQ_IF_HEADERDB) (Error error) {

	req_if_header := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[req_if_headerDB.ID]

	req_if_headerDB.DecodePointers(backRepo, req_if_header)

	return
}

func (req_if_headerDB *REQ_IF_HEADERDB) DecodePointers(backRepo *BackRepoStruct, req_if_header *models.REQ_IF_HEADER) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitREQ_IF_HEADER allows commit of a single req_if_header (if already staged)
func (backRepo *BackRepoStruct) CommitREQ_IF_HEADER(req_if_header *models.REQ_IF_HEADER) {
	backRepo.BackRepoREQ_IF_HEADER.CommitPhaseOneInstance(req_if_header)
	if id, ok := backRepo.BackRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]; ok {
		backRepo.BackRepoREQ_IF_HEADER.CommitPhaseTwoInstance(backRepo, id, req_if_header)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQ_IF_HEADER allows checkout of a single req_if_header (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQ_IF_HEADER(req_if_header *models.REQ_IF_HEADER) {
	// check if the req_if_header is staged
	if _, ok := backRepo.BackRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]; ok {

		if id, ok := backRepo.BackRepoREQ_IF_HEADER.Map_REQ_IF_HEADERPtr_REQ_IF_HEADERDBID[req_if_header]; ok {
			var req_if_headerDB REQ_IF_HEADERDB
			req_if_headerDB.ID = id

			if err := backRepo.BackRepoREQ_IF_HEADER.db.First(&req_if_headerDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQ_IF_HEADER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQ_IF_HEADER.CheckoutPhaseOneInstance(&req_if_headerDB)
			backRepo.BackRepoREQ_IF_HEADER.CheckoutPhaseTwoInstance(backRepo, &req_if_headerDB)
		}
	}
}

// CopyBasicFieldsFromREQ_IF_HEADER
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsFromREQ_IF_HEADER(req_if_header *models.REQ_IF_HEADER) {
	// insertion point for fields commit

	req_if_headerDB.Name_Data.String = req_if_header.Name
	req_if_headerDB.Name_Data.Valid = true

	req_if_headerDB.COMMENT_Data.String = req_if_header.COMMENT
	req_if_headerDB.COMMENT_Data.Valid = true

	req_if_headerDB.CREATION_TIME_Data.Time = req_if_header.CREATION_TIME
	req_if_headerDB.CREATION_TIME_Data.Valid = true

	req_if_headerDB.REPOSITORY_ID_Data.String = req_if_header.REPOSITORY_ID
	req_if_headerDB.REPOSITORY_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_TOOL_ID_Data.String = req_if_header.REQ_IF_TOOL_ID
	req_if_headerDB.REQ_IF_TOOL_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_VERSION_Data.String = req_if_header.REQ_IF_VERSION
	req_if_headerDB.REQ_IF_VERSION_Data.Valid = true

	req_if_headerDB.SOURCE_TOOL_ID_Data.String = req_if_header.SOURCE_TOOL_ID
	req_if_headerDB.SOURCE_TOOL_ID_Data.Valid = true

	req_if_headerDB.TITLE_Data.String = req_if_header.TITLE
	req_if_headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromREQ_IF_HEADER_WOP
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsFromREQ_IF_HEADER_WOP(req_if_header *models.REQ_IF_HEADER_WOP) {
	// insertion point for fields commit

	req_if_headerDB.Name_Data.String = req_if_header.Name
	req_if_headerDB.Name_Data.Valid = true

	req_if_headerDB.COMMENT_Data.String = req_if_header.COMMENT
	req_if_headerDB.COMMENT_Data.Valid = true

	req_if_headerDB.CREATION_TIME_Data.Time = req_if_header.CREATION_TIME
	req_if_headerDB.CREATION_TIME_Data.Valid = true

	req_if_headerDB.REPOSITORY_ID_Data.String = req_if_header.REPOSITORY_ID
	req_if_headerDB.REPOSITORY_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_TOOL_ID_Data.String = req_if_header.REQ_IF_TOOL_ID
	req_if_headerDB.REQ_IF_TOOL_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_VERSION_Data.String = req_if_header.REQ_IF_VERSION
	req_if_headerDB.REQ_IF_VERSION_Data.Valid = true

	req_if_headerDB.SOURCE_TOOL_ID_Data.String = req_if_header.SOURCE_TOOL_ID
	req_if_headerDB.SOURCE_TOOL_ID_Data.Valid = true

	req_if_headerDB.TITLE_Data.String = req_if_header.TITLE
	req_if_headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromREQ_IF_HEADERWOP
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsFromREQ_IF_HEADERWOP(req_if_header *REQ_IF_HEADERWOP) {
	// insertion point for fields commit

	req_if_headerDB.Name_Data.String = req_if_header.Name
	req_if_headerDB.Name_Data.Valid = true

	req_if_headerDB.COMMENT_Data.String = req_if_header.COMMENT
	req_if_headerDB.COMMENT_Data.Valid = true

	req_if_headerDB.CREATION_TIME_Data.Time = req_if_header.CREATION_TIME
	req_if_headerDB.CREATION_TIME_Data.Valid = true

	req_if_headerDB.REPOSITORY_ID_Data.String = req_if_header.REPOSITORY_ID
	req_if_headerDB.REPOSITORY_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_TOOL_ID_Data.String = req_if_header.REQ_IF_TOOL_ID
	req_if_headerDB.REQ_IF_TOOL_ID_Data.Valid = true

	req_if_headerDB.REQ_IF_VERSION_Data.String = req_if_header.REQ_IF_VERSION
	req_if_headerDB.REQ_IF_VERSION_Data.Valid = true

	req_if_headerDB.SOURCE_TOOL_ID_Data.String = req_if_header.SOURCE_TOOL_ID
	req_if_headerDB.SOURCE_TOOL_ID_Data.Valid = true

	req_if_headerDB.TITLE_Data.String = req_if_header.TITLE
	req_if_headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsToREQ_IF_HEADER
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsToREQ_IF_HEADER(req_if_header *models.REQ_IF_HEADER) {
	// insertion point for checkout of basic fields (back repo to stage)
	req_if_header.Name = req_if_headerDB.Name_Data.String
	req_if_header.COMMENT = req_if_headerDB.COMMENT_Data.String
	req_if_header.CREATION_TIME = req_if_headerDB.CREATION_TIME_Data.Time
	req_if_header.REPOSITORY_ID = req_if_headerDB.REPOSITORY_ID_Data.String
	req_if_header.REQ_IF_TOOL_ID = req_if_headerDB.REQ_IF_TOOL_ID_Data.String
	req_if_header.REQ_IF_VERSION = req_if_headerDB.REQ_IF_VERSION_Data.String
	req_if_header.SOURCE_TOOL_ID = req_if_headerDB.SOURCE_TOOL_ID_Data.String
	req_if_header.TITLE = req_if_headerDB.TITLE_Data.String
}

// CopyBasicFieldsToREQ_IF_HEADER_WOP
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsToREQ_IF_HEADER_WOP(req_if_header *models.REQ_IF_HEADER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	req_if_header.Name = req_if_headerDB.Name_Data.String
	req_if_header.COMMENT = req_if_headerDB.COMMENT_Data.String
	req_if_header.CREATION_TIME = req_if_headerDB.CREATION_TIME_Data.Time
	req_if_header.REPOSITORY_ID = req_if_headerDB.REPOSITORY_ID_Data.String
	req_if_header.REQ_IF_TOOL_ID = req_if_headerDB.REQ_IF_TOOL_ID_Data.String
	req_if_header.REQ_IF_VERSION = req_if_headerDB.REQ_IF_VERSION_Data.String
	req_if_header.SOURCE_TOOL_ID = req_if_headerDB.SOURCE_TOOL_ID_Data.String
	req_if_header.TITLE = req_if_headerDB.TITLE_Data.String
}

// CopyBasicFieldsToREQ_IF_HEADERWOP
func (req_if_headerDB *REQ_IF_HEADERDB) CopyBasicFieldsToREQ_IF_HEADERWOP(req_if_header *REQ_IF_HEADERWOP) {
	req_if_header.ID = int(req_if_headerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	req_if_header.Name = req_if_headerDB.Name_Data.String
	req_if_header.COMMENT = req_if_headerDB.COMMENT_Data.String
	req_if_header.CREATION_TIME = req_if_headerDB.CREATION_TIME_Data.Time
	req_if_header.REPOSITORY_ID = req_if_headerDB.REPOSITORY_ID_Data.String
	req_if_header.REQ_IF_TOOL_ID = req_if_headerDB.REQ_IF_TOOL_ID_Data.String
	req_if_header.REQ_IF_VERSION = req_if_headerDB.REQ_IF_VERSION_Data.String
	req_if_header.SOURCE_TOOL_ID = req_if_headerDB.SOURCE_TOOL_ID_Data.String
	req_if_header.TITLE = req_if_headerDB.TITLE_Data.String
}

// Backup generates a json file from a slice of all REQ_IF_HEADERDB instances in the backrepo
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQ_IF_HEADERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQ_IF_HEADERDB, 0)
	for _, req_if_headerDB := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB {
		forBackup = append(forBackup, req_if_headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQ_IF_HEADER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQ_IF_HEADER file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQ_IF_HEADERDB instances in the backrepo
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQ_IF_HEADERDB, 0)
	for _, req_if_headerDB := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB {
		forBackup = append(forBackup, req_if_headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQ_IF_HEADER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQ_IF_HEADER_Fields, -1)
	for _, req_if_headerDB := range forBackup {

		var req_if_headerWOP REQ_IF_HEADERWOP
		req_if_headerDB.CopyBasicFieldsToREQ_IF_HEADERWOP(&req_if_headerWOP)

		row := sh.AddRow()
		row.WriteStruct(&req_if_headerWOP, -1)
	}
}

// RestoreXL from the "REQ_IF_HEADER" sheet all REQ_IF_HEADERDB instances
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQ_IF_HEADERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQ_IF_HEADER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQ_IF_HEADER.rowVisitorREQ_IF_HEADER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) rowVisitorREQ_IF_HEADER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var req_if_headerWOP REQ_IF_HEADERWOP
		row.ReadStruct(&req_if_headerWOP)

		// add the unmarshalled struct to the stage
		req_if_headerDB := new(REQ_IF_HEADERDB)
		req_if_headerDB.CopyBasicFieldsFromREQ_IF_HEADERWOP(&req_if_headerWOP)

		req_if_headerDB_ID_atBackupTime := req_if_headerDB.ID
		req_if_headerDB.ID = 0
		query := backRepoREQ_IF_HEADER.db.Create(req_if_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[req_if_headerDB.ID] = req_if_headerDB
		BackRepoREQ_IF_HEADERid_atBckpTime_newID[req_if_headerDB_ID_atBackupTime] = req_if_headerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQ_IF_HEADERDB.json" in dirPath that stores an array
// of REQ_IF_HEADERDB and stores it in the database
// the map BackRepoREQ_IF_HEADERid_atBckpTime_newID is updated accordingly
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQ_IF_HEADERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQ_IF_HEADERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQ_IF_HEADER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQ_IF_HEADERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB
	for _, req_if_headerDB := range forRestore {

		req_if_headerDB_ID_atBackupTime := req_if_headerDB.ID
		req_if_headerDB.ID = 0
		query := backRepoREQ_IF_HEADER.db.Create(req_if_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[req_if_headerDB.ID] = req_if_headerDB
		BackRepoREQ_IF_HEADERid_atBckpTime_newID[req_if_headerDB_ID_atBackupTime] = req_if_headerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQ_IF_HEADER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQ_IF_HEADER>id_atBckpTime_newID
// to compute new index
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) RestorePhaseTwo() {

	for _, req_if_headerDB := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB {

		// next line of code is to avert unused variable compilation error
		_ = req_if_headerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoREQ_IF_HEADER.db.Model(req_if_headerDB).Updates(*req_if_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQ_IF_HEADER.ResetReversePointers commits all staged instances of REQ_IF_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, req_if_header := range backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr {
		backRepoREQ_IF_HEADER.ResetReversePointersInstance(backRepo, idx, req_if_header)
	}

	return
}

func (backRepoREQ_IF_HEADER *BackRepoREQ_IF_HEADERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, req_if_header *models.REQ_IF_HEADER) (Error error) {

	// fetch matching req_if_headerDB
	if req_if_headerDB, ok := backRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERDB[idx]; ok {
		_ = req_if_headerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQ_IF_HEADERid_atBckpTime_newID map[uint]uint
