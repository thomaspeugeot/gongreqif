// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EDITABLEATTS_sql sql.NullBool
var dummy_EDITABLEATTS_time time.Duration
var dummy_EDITABLEATTS_sort sort.Float64Slice

// EDITABLEATTSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model editableattsAPI
type EDITABLEATTSAPI struct {
	gorm.Model

	models.EDITABLEATTS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EDITABLEATTSPointersEncoding EDITABLEATTSPointersEncoding
}

// EDITABLEATTSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EDITABLEATTSPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EDITABLEATTSDB describes a editableatts in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model editableattsDB
type EDITABLEATTSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field editableattsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EDITABLEATTSPointersEncoding
}

// EDITABLEATTSDBs arrays editableattsDBs
// swagger:response editableattsDBsResponse
type EDITABLEATTSDBs []EDITABLEATTSDB

// EDITABLEATTSDBResponse provides response
// swagger:response editableattsDBResponse
type EDITABLEATTSDBResponse struct {
	EDITABLEATTSDB
}

// EDITABLEATTSWOP is a EDITABLEATTS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EDITABLEATTSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var EDITABLEATTS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEDITABLEATTSStruct struct {
	// stores EDITABLEATTSDB according to their gorm ID
	Map_EDITABLEATTSDBID_EDITABLEATTSDB map[uint]*EDITABLEATTSDB

	// stores EDITABLEATTSDB ID according to EDITABLEATTS address
	Map_EDITABLEATTSPtr_EDITABLEATTSDBID map[*models.EDITABLEATTS]uint

	// stores EDITABLEATTS according to their gorm ID
	Map_EDITABLEATTSDBID_EDITABLEATTSPtr map[uint]*models.EDITABLEATTS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEDITABLEATTS.stage
	return
}

func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) GetDB() *gorm.DB {
	return backRepoEDITABLEATTS.db
}

// GetEDITABLEATTSDBFromEDITABLEATTSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) GetEDITABLEATTSDBFromEDITABLEATTSPtr(editableatts *models.EDITABLEATTS) (editableattsDB *EDITABLEATTSDB) {
	id := backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]
	editableattsDB = backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[id]
	return
}

// BackRepoEDITABLEATTS.CommitPhaseOne commits all staged instances of EDITABLEATTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for editableatts := range stage.EDITABLEATTSs {
		backRepoEDITABLEATTS.CommitPhaseOneInstance(editableatts)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, editableatts := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr {
		if _, ok := stage.EDITABLEATTSs[editableatts]; !ok {
			backRepoEDITABLEATTS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEDITABLEATTS.CommitDeleteInstance commits deletion of EDITABLEATTS to the BackRepo
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CommitDeleteInstance(id uint) (Error error) {

	editableatts := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[id]

	// editableatts is not staged anymore, remove editableattsDB
	editableattsDB := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[id]
	query := backRepoEDITABLEATTS.db.Unscoped().Delete(&editableattsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID, editableatts)
	delete(backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr, id)
	delete(backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB, id)

	return
}

// BackRepoEDITABLEATTS.CommitPhaseOneInstance commits editableatts staged instances of EDITABLEATTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CommitPhaseOneInstance(editableatts *models.EDITABLEATTS) (Error error) {

	// check if the editableatts is not commited yet
	if _, ok := backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]; ok {
		return
	}

	// initiate editableatts
	var editableattsDB EDITABLEATTSDB
	editableattsDB.CopyBasicFieldsFromEDITABLEATTS(editableatts)

	query := backRepoEDITABLEATTS.db.Create(&editableattsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts] = editableattsDB.ID
	backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[editableattsDB.ID] = editableatts
	backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[editableattsDB.ID] = &editableattsDB

	return
}

// BackRepoEDITABLEATTS.CommitPhaseTwo commits all staged instances of EDITABLEATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, editableatts := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr {
		backRepoEDITABLEATTS.CommitPhaseTwoInstance(backRepo, idx, editableatts)
	}

	return
}

// BackRepoEDITABLEATTS.CommitPhaseTwoInstance commits {{structname }} of models.EDITABLEATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, editableatts *models.EDITABLEATTS) (Error error) {

	// fetch matching editableattsDB
	if editableattsDB, ok := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[idx]; ok {

		editableattsDB.CopyBasicFieldsFromEDITABLEATTS(editableatts)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEDITABLEATTS.db.Save(&editableattsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EDITABLEATTS intance %s", editableatts.Name))
		return err
	}

	return
}

// BackRepoEDITABLEATTS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CheckoutPhaseOne() (Error error) {

	editableattsDBArray := make([]EDITABLEATTSDB, 0)
	query := backRepoEDITABLEATTS.db.Find(&editableattsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	editableattsInstancesToBeRemovedFromTheStage := make(map[*models.EDITABLEATTS]any)
	for key, value := range backRepoEDITABLEATTS.stage.EDITABLEATTSs {
		editableattsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, editableattsDB := range editableattsDBArray {
		backRepoEDITABLEATTS.CheckoutPhaseOneInstance(&editableattsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		editableatts, ok := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[editableattsDB.ID]
		if ok {
			delete(editableattsInstancesToBeRemovedFromTheStage, editableatts)
		}
	}

	// remove from stage and back repo's 3 maps all editableattss that are not in the checkout
	for editableatts := range editableattsInstancesToBeRemovedFromTheStage {
		editableatts.Unstage(backRepoEDITABLEATTS.GetStage())

		// remove instance from the back repo 3 maps
		editableattsID := backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]
		delete(backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID, editableatts)
		delete(backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB, editableattsID)
		delete(backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr, editableattsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a editableattsDB that has been found in the DB, updates the backRepo and stages the
// models version of the editableattsDB
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CheckoutPhaseOneInstance(editableattsDB *EDITABLEATTSDB) (Error error) {

	editableatts, ok := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[editableattsDB.ID]
	if !ok {
		editableatts = new(models.EDITABLEATTS)

		backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[editableattsDB.ID] = editableatts
		backRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts] = editableattsDB.ID

		// append model store with the new element
		editableatts.Name = editableattsDB.Name_Data.String
		editableatts.Stage(backRepoEDITABLEATTS.GetStage())
	}
	editableattsDB.CopyBasicFieldsToEDITABLEATTS(editableatts)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	editableatts.Stage(backRepoEDITABLEATTS.GetStage())

	// preserve pointer to editableattsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EDITABLEATTSDBID_EDITABLEATTSDB)[editableattsDB hold variable pointers
	editableattsDB_Data := *editableattsDB
	preservedPtrToEDITABLEATTS := &editableattsDB_Data
	backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[editableattsDB.ID] = preservedPtrToEDITABLEATTS

	return
}

// BackRepoEDITABLEATTS.CheckoutPhaseTwo Checkouts all staged instances of EDITABLEATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, editableattsDB := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB {
		backRepoEDITABLEATTS.CheckoutPhaseTwoInstance(backRepo, editableattsDB)
	}
	return
}

// BackRepoEDITABLEATTS.CheckoutPhaseTwoInstance Checkouts staged instances of EDITABLEATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, editableattsDB *EDITABLEATTSDB) (Error error) {

	editableatts := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr[editableattsDB.ID]

	editableattsDB.DecodePointers(backRepo, editableatts)

	return
}

func (editableattsDB *EDITABLEATTSDB) DecodePointers(backRepo *BackRepoStruct, editableatts *models.EDITABLEATTS) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEDITABLEATTS allows commit of a single editableatts (if already staged)
func (backRepo *BackRepoStruct) CommitEDITABLEATTS(editableatts *models.EDITABLEATTS) {
	backRepo.BackRepoEDITABLEATTS.CommitPhaseOneInstance(editableatts)
	if id, ok := backRepo.BackRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]; ok {
		backRepo.BackRepoEDITABLEATTS.CommitPhaseTwoInstance(backRepo, id, editableatts)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEDITABLEATTS allows checkout of a single editableatts (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEDITABLEATTS(editableatts *models.EDITABLEATTS) {
	// check if the editableatts is staged
	if _, ok := backRepo.BackRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]; ok {

		if id, ok := backRepo.BackRepoEDITABLEATTS.Map_EDITABLEATTSPtr_EDITABLEATTSDBID[editableatts]; ok {
			var editableattsDB EDITABLEATTSDB
			editableattsDB.ID = id

			if err := backRepo.BackRepoEDITABLEATTS.db.First(&editableattsDB, id).Error; err != nil {
				log.Fatalln("CheckoutEDITABLEATTS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEDITABLEATTS.CheckoutPhaseOneInstance(&editableattsDB)
			backRepo.BackRepoEDITABLEATTS.CheckoutPhaseTwoInstance(backRepo, &editableattsDB)
		}
	}
}

// CopyBasicFieldsFromEDITABLEATTS
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsFromEDITABLEATTS(editableatts *models.EDITABLEATTS) {
	// insertion point for fields commit

	editableattsDB.Name_Data.String = editableatts.Name
	editableattsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEDITABLEATTS_WOP
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsFromEDITABLEATTS_WOP(editableatts *models.EDITABLEATTS_WOP) {
	// insertion point for fields commit

	editableattsDB.Name_Data.String = editableatts.Name
	editableattsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEDITABLEATTSWOP
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsFromEDITABLEATTSWOP(editableatts *EDITABLEATTSWOP) {
	// insertion point for fields commit

	editableattsDB.Name_Data.String = editableatts.Name
	editableattsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEDITABLEATTS
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsToEDITABLEATTS(editableatts *models.EDITABLEATTS) {
	// insertion point for checkout of basic fields (back repo to stage)
	editableatts.Name = editableattsDB.Name_Data.String
}

// CopyBasicFieldsToEDITABLEATTS_WOP
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsToEDITABLEATTS_WOP(editableatts *models.EDITABLEATTS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	editableatts.Name = editableattsDB.Name_Data.String
}

// CopyBasicFieldsToEDITABLEATTSWOP
func (editableattsDB *EDITABLEATTSDB) CopyBasicFieldsToEDITABLEATTSWOP(editableatts *EDITABLEATTSWOP) {
	editableatts.ID = int(editableattsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	editableatts.Name = editableattsDB.Name_Data.String
}

// Backup generates a json file from a slice of all EDITABLEATTSDB instances in the backrepo
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EDITABLEATTSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EDITABLEATTSDB, 0)
	for _, editableattsDB := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB {
		forBackup = append(forBackup, editableattsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EDITABLEATTS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EDITABLEATTS file", err.Error())
	}
}

// Backup generates a json file from a slice of all EDITABLEATTSDB instances in the backrepo
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EDITABLEATTSDB, 0)
	for _, editableattsDB := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB {
		forBackup = append(forBackup, editableattsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EDITABLEATTS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EDITABLEATTS_Fields, -1)
	for _, editableattsDB := range forBackup {

		var editableattsWOP EDITABLEATTSWOP
		editableattsDB.CopyBasicFieldsToEDITABLEATTSWOP(&editableattsWOP)

		row := sh.AddRow()
		row.WriteStruct(&editableattsWOP, -1)
	}
}

// RestoreXL from the "EDITABLEATTS" sheet all EDITABLEATTSDB instances
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEDITABLEATTSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EDITABLEATTS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEDITABLEATTS.rowVisitorEDITABLEATTS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) rowVisitorEDITABLEATTS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var editableattsWOP EDITABLEATTSWOP
		row.ReadStruct(&editableattsWOP)

		// add the unmarshalled struct to the stage
		editableattsDB := new(EDITABLEATTSDB)
		editableattsDB.CopyBasicFieldsFromEDITABLEATTSWOP(&editableattsWOP)

		editableattsDB_ID_atBackupTime := editableattsDB.ID
		editableattsDB.ID = 0
		query := backRepoEDITABLEATTS.db.Create(editableattsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[editableattsDB.ID] = editableattsDB
		BackRepoEDITABLEATTSid_atBckpTime_newID[editableattsDB_ID_atBackupTime] = editableattsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EDITABLEATTSDB.json" in dirPath that stores an array
// of EDITABLEATTSDB and stores it in the database
// the map BackRepoEDITABLEATTSid_atBckpTime_newID is updated accordingly
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEDITABLEATTSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EDITABLEATTSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EDITABLEATTS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EDITABLEATTSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EDITABLEATTSDBID_EDITABLEATTSDB
	for _, editableattsDB := range forRestore {

		editableattsDB_ID_atBackupTime := editableattsDB.ID
		editableattsDB.ID = 0
		query := backRepoEDITABLEATTS.db.Create(editableattsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[editableattsDB.ID] = editableattsDB
		BackRepoEDITABLEATTSid_atBckpTime_newID[editableattsDB_ID_atBackupTime] = editableattsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EDITABLEATTS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EDITABLEATTS>id_atBckpTime_newID
// to compute new index
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) RestorePhaseTwo() {

	for _, editableattsDB := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB {

		// next line of code is to avert unused variable compilation error
		_ = editableattsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEDITABLEATTS.db.Model(editableattsDB).Updates(*editableattsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEDITABLEATTS.ResetReversePointers commits all staged instances of EDITABLEATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, editableatts := range backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSPtr {
		backRepoEDITABLEATTS.ResetReversePointersInstance(backRepo, idx, editableatts)
	}

	return
}

func (backRepoEDITABLEATTS *BackRepoEDITABLEATTSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, editableatts *models.EDITABLEATTS) (Error error) {

	// fetch matching editableattsDB
	if editableattsDB, ok := backRepoEDITABLEATTS.Map_EDITABLEATTSDBID_EDITABLEATTSDB[idx]; ok {
		_ = editableattsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEDITABLEATTSid_atBckpTime_newID map[uint]uint
