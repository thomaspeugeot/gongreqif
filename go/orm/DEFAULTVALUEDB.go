// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DEFAULTVALUE_sql sql.NullBool
var dummy_DEFAULTVALUE_time time.Duration
var dummy_DEFAULTVALUE_sort sort.Float64Slice

// DEFAULTVALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model defaultvalueAPI
type DEFAULTVALUEAPI struct {
	gorm.Model

	models.DEFAULTVALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DEFAULTVALUEPointersEncoding DEFAULTVALUEPointersEncoding
}

// DEFAULTVALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DEFAULTVALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTEVALUEBOOLEAN is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ATTRIBUTEVALUEBOOLEANID sql.NullInt64
}

// DEFAULTVALUEDB describes a defaultvalue in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model defaultvalueDB
type DEFAULTVALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field defaultvalueDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DEFAULTVALUEPointersEncoding
}

// DEFAULTVALUEDBs arrays defaultvalueDBs
// swagger:response defaultvalueDBsResponse
type DEFAULTVALUEDBs []DEFAULTVALUEDB

// DEFAULTVALUEDBResponse provides response
// swagger:response defaultvalueDBResponse
type DEFAULTVALUEDBResponse struct {
	DEFAULTVALUEDB
}

// DEFAULTVALUEWOP is a DEFAULTVALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DEFAULTVALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var DEFAULTVALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDEFAULTVALUEStruct struct {
	// stores DEFAULTVALUEDB according to their gorm ID
	Map_DEFAULTVALUEDBID_DEFAULTVALUEDB map[uint]*DEFAULTVALUEDB

	// stores DEFAULTVALUEDB ID according to DEFAULTVALUE address
	Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID map[*models.DEFAULTVALUE]uint

	// stores DEFAULTVALUE according to their gorm ID
	Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr map[uint]*models.DEFAULTVALUE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDEFAULTVALUE.stage
	return
}

func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) GetDB() *gorm.DB {
	return backRepoDEFAULTVALUE.db
}

// GetDEFAULTVALUEDBFromDEFAULTVALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) GetDEFAULTVALUEDBFromDEFAULTVALUEPtr(defaultvalue *models.DEFAULTVALUE) (defaultvalueDB *DEFAULTVALUEDB) {
	id := backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]
	defaultvalueDB = backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[id]
	return
}

// BackRepoDEFAULTVALUE.CommitPhaseOne commits all staged instances of DEFAULTVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for defaultvalue := range stage.DEFAULTVALUEs {
		backRepoDEFAULTVALUE.CommitPhaseOneInstance(defaultvalue)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, defaultvalue := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr {
		if _, ok := stage.DEFAULTVALUEs[defaultvalue]; !ok {
			backRepoDEFAULTVALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDEFAULTVALUE.CommitDeleteInstance commits deletion of DEFAULTVALUE to the BackRepo
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	defaultvalue := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[id]

	// defaultvalue is not staged anymore, remove defaultvalueDB
	defaultvalueDB := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[id]
	query := backRepoDEFAULTVALUE.db.Unscoped().Delete(&defaultvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID, defaultvalue)
	delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr, id)
	delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB, id)

	return
}

// BackRepoDEFAULTVALUE.CommitPhaseOneInstance commits defaultvalue staged instances of DEFAULTVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CommitPhaseOneInstance(defaultvalue *models.DEFAULTVALUE) (Error error) {

	// check if the defaultvalue is not commited yet
	if _, ok := backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]; ok {
		return
	}

	// initiate defaultvalue
	var defaultvalueDB DEFAULTVALUEDB
	defaultvalueDB.CopyBasicFieldsFromDEFAULTVALUE(defaultvalue)

	query := backRepoDEFAULTVALUE.db.Create(&defaultvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue] = defaultvalueDB.ID
	backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[defaultvalueDB.ID] = defaultvalue
	backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[defaultvalueDB.ID] = &defaultvalueDB

	return
}

// BackRepoDEFAULTVALUE.CommitPhaseTwo commits all staged instances of DEFAULTVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, defaultvalue := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr {
		backRepoDEFAULTVALUE.CommitPhaseTwoInstance(backRepo, idx, defaultvalue)
	}

	return
}

// BackRepoDEFAULTVALUE.CommitPhaseTwoInstance commits {{structname }} of models.DEFAULTVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, defaultvalue *models.DEFAULTVALUE) (Error error) {

	// fetch matching defaultvalueDB
	if defaultvalueDB, ok := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[idx]; ok {

		defaultvalueDB.CopyBasicFieldsFromDEFAULTVALUE(defaultvalue)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value defaultvalue.ATTRIBUTEVALUEBOOLEAN translates to updating the defaultvalue.ATTRIBUTEVALUEBOOLEANID
		defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Valid = true // allow for a 0 value (nil association)
		if defaultvalue.ATTRIBUTEVALUEBOOLEAN != nil {
			if ATTRIBUTEVALUEBOOLEANId, ok := backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANPtr_ATTRIBUTEVALUEBOOLEANDBID[defaultvalue.ATTRIBUTEVALUEBOOLEAN]; ok {
				defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64 = int64(ATTRIBUTEVALUEBOOLEANId)
				defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Valid = true
			}
		} else {
			defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64 = 0
			defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Valid = true
		}

		query := backRepoDEFAULTVALUE.db.Save(&defaultvalueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DEFAULTVALUE intance %s", defaultvalue.Name))
		return err
	}

	return
}

// BackRepoDEFAULTVALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CheckoutPhaseOne() (Error error) {

	defaultvalueDBArray := make([]DEFAULTVALUEDB, 0)
	query := backRepoDEFAULTVALUE.db.Find(&defaultvalueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	defaultvalueInstancesToBeRemovedFromTheStage := make(map[*models.DEFAULTVALUE]any)
	for key, value := range backRepoDEFAULTVALUE.stage.DEFAULTVALUEs {
		defaultvalueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, defaultvalueDB := range defaultvalueDBArray {
		backRepoDEFAULTVALUE.CheckoutPhaseOneInstance(&defaultvalueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		defaultvalue, ok := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[defaultvalueDB.ID]
		if ok {
			delete(defaultvalueInstancesToBeRemovedFromTheStage, defaultvalue)
		}
	}

	// remove from stage and back repo's 3 maps all defaultvalues that are not in the checkout
	for defaultvalue := range defaultvalueInstancesToBeRemovedFromTheStage {
		defaultvalue.Unstage(backRepoDEFAULTVALUE.GetStage())

		// remove instance from the back repo 3 maps
		defaultvalueID := backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]
		delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID, defaultvalue)
		delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB, defaultvalueID)
		delete(backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr, defaultvalueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a defaultvalueDB that has been found in the DB, updates the backRepo and stages the
// models version of the defaultvalueDB
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CheckoutPhaseOneInstance(defaultvalueDB *DEFAULTVALUEDB) (Error error) {

	defaultvalue, ok := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[defaultvalueDB.ID]
	if !ok {
		defaultvalue = new(models.DEFAULTVALUE)

		backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[defaultvalueDB.ID] = defaultvalue
		backRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue] = defaultvalueDB.ID

		// append model store with the new element
		defaultvalue.Name = defaultvalueDB.Name_Data.String
		defaultvalue.Stage(backRepoDEFAULTVALUE.GetStage())
	}
	defaultvalueDB.CopyBasicFieldsToDEFAULTVALUE(defaultvalue)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	defaultvalue.Stage(backRepoDEFAULTVALUE.GetStage())

	// preserve pointer to defaultvalueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DEFAULTVALUEDBID_DEFAULTVALUEDB)[defaultvalueDB hold variable pointers
	defaultvalueDB_Data := *defaultvalueDB
	preservedPtrToDEFAULTVALUE := &defaultvalueDB_Data
	backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[defaultvalueDB.ID] = preservedPtrToDEFAULTVALUE

	return
}

// BackRepoDEFAULTVALUE.CheckoutPhaseTwo Checkouts all staged instances of DEFAULTVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, defaultvalueDB := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB {
		backRepoDEFAULTVALUE.CheckoutPhaseTwoInstance(backRepo, defaultvalueDB)
	}
	return
}

// BackRepoDEFAULTVALUE.CheckoutPhaseTwoInstance Checkouts staged instances of DEFAULTVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, defaultvalueDB *DEFAULTVALUEDB) (Error error) {

	defaultvalue := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[defaultvalueDB.ID]

	defaultvalueDB.DecodePointers(backRepo, defaultvalue)

	return
}

func (defaultvalueDB *DEFAULTVALUEDB) DecodePointers(backRepo *BackRepoStruct, defaultvalue *models.DEFAULTVALUE) {

	// insertion point for checkout of pointer encoding
	// ATTRIBUTEVALUEBOOLEAN field
	defaultvalue.ATTRIBUTEVALUEBOOLEAN = nil
	if defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64 != 0 {
		defaultvalue.ATTRIBUTEVALUEBOOLEAN = backRepo.BackRepoATTRIBUTEVALUEBOOLEAN.Map_ATTRIBUTEVALUEBOOLEANDBID_ATTRIBUTEVALUEBOOLEANPtr[uint(defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64)]
	}
	return
}

// CommitDEFAULTVALUE allows commit of a single defaultvalue (if already staged)
func (backRepo *BackRepoStruct) CommitDEFAULTVALUE(defaultvalue *models.DEFAULTVALUE) {
	backRepo.BackRepoDEFAULTVALUE.CommitPhaseOneInstance(defaultvalue)
	if id, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]; ok {
		backRepo.BackRepoDEFAULTVALUE.CommitPhaseTwoInstance(backRepo, id, defaultvalue)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDEFAULTVALUE allows checkout of a single defaultvalue (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDEFAULTVALUE(defaultvalue *models.DEFAULTVALUE) {
	// check if the defaultvalue is staged
	if _, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]; ok {

		if id, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[defaultvalue]; ok {
			var defaultvalueDB DEFAULTVALUEDB
			defaultvalueDB.ID = id

			if err := backRepo.BackRepoDEFAULTVALUE.db.First(&defaultvalueDB, id).Error; err != nil {
				log.Fatalln("CheckoutDEFAULTVALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDEFAULTVALUE.CheckoutPhaseOneInstance(&defaultvalueDB)
			backRepo.BackRepoDEFAULTVALUE.CheckoutPhaseTwoInstance(backRepo, &defaultvalueDB)
		}
	}
}

// CopyBasicFieldsFromDEFAULTVALUE
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsFromDEFAULTVALUE(defaultvalue *models.DEFAULTVALUE) {
	// insertion point for fields commit

	defaultvalueDB.Name_Data.String = defaultvalue.Name
	defaultvalueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDEFAULTVALUE_WOP
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsFromDEFAULTVALUE_WOP(defaultvalue *models.DEFAULTVALUE_WOP) {
	// insertion point for fields commit

	defaultvalueDB.Name_Data.String = defaultvalue.Name
	defaultvalueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDEFAULTVALUEWOP
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsFromDEFAULTVALUEWOP(defaultvalue *DEFAULTVALUEWOP) {
	// insertion point for fields commit

	defaultvalueDB.Name_Data.String = defaultvalue.Name
	defaultvalueDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDEFAULTVALUE
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsToDEFAULTVALUE(defaultvalue *models.DEFAULTVALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	defaultvalue.Name = defaultvalueDB.Name_Data.String
}

// CopyBasicFieldsToDEFAULTVALUE_WOP
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsToDEFAULTVALUE_WOP(defaultvalue *models.DEFAULTVALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	defaultvalue.Name = defaultvalueDB.Name_Data.String
}

// CopyBasicFieldsToDEFAULTVALUEWOP
func (defaultvalueDB *DEFAULTVALUEDB) CopyBasicFieldsToDEFAULTVALUEWOP(defaultvalue *DEFAULTVALUEWOP) {
	defaultvalue.ID = int(defaultvalueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	defaultvalue.Name = defaultvalueDB.Name_Data.String
}

// Backup generates a json file from a slice of all DEFAULTVALUEDB instances in the backrepo
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DEFAULTVALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DEFAULTVALUEDB, 0)
	for _, defaultvalueDB := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB {
		forBackup = append(forBackup, defaultvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DEFAULTVALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DEFAULTVALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all DEFAULTVALUEDB instances in the backrepo
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DEFAULTVALUEDB, 0)
	for _, defaultvalueDB := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB {
		forBackup = append(forBackup, defaultvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DEFAULTVALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DEFAULTVALUE_Fields, -1)
	for _, defaultvalueDB := range forBackup {

		var defaultvalueWOP DEFAULTVALUEWOP
		defaultvalueDB.CopyBasicFieldsToDEFAULTVALUEWOP(&defaultvalueWOP)

		row := sh.AddRow()
		row.WriteStruct(&defaultvalueWOP, -1)
	}
}

// RestoreXL from the "DEFAULTVALUE" sheet all DEFAULTVALUEDB instances
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDEFAULTVALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DEFAULTVALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDEFAULTVALUE.rowVisitorDEFAULTVALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) rowVisitorDEFAULTVALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var defaultvalueWOP DEFAULTVALUEWOP
		row.ReadStruct(&defaultvalueWOP)

		// add the unmarshalled struct to the stage
		defaultvalueDB := new(DEFAULTVALUEDB)
		defaultvalueDB.CopyBasicFieldsFromDEFAULTVALUEWOP(&defaultvalueWOP)

		defaultvalueDB_ID_atBackupTime := defaultvalueDB.ID
		defaultvalueDB.ID = 0
		query := backRepoDEFAULTVALUE.db.Create(defaultvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[defaultvalueDB.ID] = defaultvalueDB
		BackRepoDEFAULTVALUEid_atBckpTime_newID[defaultvalueDB_ID_atBackupTime] = defaultvalueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DEFAULTVALUEDB.json" in dirPath that stores an array
// of DEFAULTVALUEDB and stores it in the database
// the map BackRepoDEFAULTVALUEid_atBckpTime_newID is updated accordingly
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDEFAULTVALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DEFAULTVALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DEFAULTVALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DEFAULTVALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DEFAULTVALUEDBID_DEFAULTVALUEDB
	for _, defaultvalueDB := range forRestore {

		defaultvalueDB_ID_atBackupTime := defaultvalueDB.ID
		defaultvalueDB.ID = 0
		query := backRepoDEFAULTVALUE.db.Create(defaultvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[defaultvalueDB.ID] = defaultvalueDB
		BackRepoDEFAULTVALUEid_atBckpTime_newID[defaultvalueDB_ID_atBackupTime] = defaultvalueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DEFAULTVALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DEFAULTVALUE>id_atBckpTime_newID
// to compute new index
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) RestorePhaseTwo() {

	for _, defaultvalueDB := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = defaultvalueDB

		// insertion point for reindexing pointers encoding
		// reindexing ATTRIBUTEVALUEBOOLEAN field
		if defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64 != 0 {
			defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64 = int64(BackRepoATTRIBUTEVALUEBOOLEANid_atBckpTime_newID[uint(defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Int64)])
			defaultvalueDB.ATTRIBUTEVALUEBOOLEANID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDEFAULTVALUE.db.Model(defaultvalueDB).Updates(*defaultvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDEFAULTVALUE.ResetReversePointers commits all staged instances of DEFAULTVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, defaultvalue := range backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr {
		backRepoDEFAULTVALUE.ResetReversePointersInstance(backRepo, idx, defaultvalue)
	}

	return
}

func (backRepoDEFAULTVALUE *BackRepoDEFAULTVALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, defaultvalue *models.DEFAULTVALUE) (Error error) {

	// fetch matching defaultvalueDB
	if defaultvalueDB, ok := backRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEDB[idx]; ok {
		_ = defaultvalueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDEFAULTVALUEid_atBckpTime_newID map[uint]uint
