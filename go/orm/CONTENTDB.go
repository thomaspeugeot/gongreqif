// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CONTENT_sql sql.NullBool
var dummy_CONTENT_time time.Duration
var dummy_CONTENT_sort sort.Float64Slice

// CONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model contentAPI
type CONTENTAPI struct {
	gorm.Model

	models.CONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CONTENTPointersEncoding CONTENTPointersEncoding
}

// CONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CONTENTDB describes a content in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model contentDB
type CONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field contentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CONTENTPointersEncoding
}

// CONTENTDBs arrays contentDBs
// swagger:response contentDBsResponse
type CONTENTDBs []CONTENTDB

// CONTENTDBResponse provides response
// swagger:response contentDBResponse
type CONTENTDBResponse struct {
	CONTENTDB
}

// CONTENTWOP is a CONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var CONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCONTENTStruct struct {
	// stores CONTENTDB according to their gorm ID
	Map_CONTENTDBID_CONTENTDB map[uint]*CONTENTDB

	// stores CONTENTDB ID according to CONTENT address
	Map_CONTENTPtr_CONTENTDBID map[*models.CONTENT]uint

	// stores CONTENT according to their gorm ID
	Map_CONTENTDBID_CONTENTPtr map[uint]*models.CONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCONTENT *BackRepoCONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCONTENT.stage
	return
}

func (backRepoCONTENT *BackRepoCONTENTStruct) GetDB() *gorm.DB {
	return backRepoCONTENT.db
}

// GetCONTENTDBFromCONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCONTENT *BackRepoCONTENTStruct) GetCONTENTDBFromCONTENTPtr(content *models.CONTENT) (contentDB *CONTENTDB) {
	id := backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]
	contentDB = backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[id]
	return
}

// BackRepoCONTENT.CommitPhaseOne commits all staged instances of CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCONTENT *BackRepoCONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for content := range stage.CONTENTs {
		backRepoCONTENT.CommitPhaseOneInstance(content)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, content := range backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr {
		if _, ok := stage.CONTENTs[content]; !ok {
			backRepoCONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCONTENT.CommitDeleteInstance commits deletion of CONTENT to the BackRepo
func (backRepoCONTENT *BackRepoCONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	content := backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[id]

	// content is not staged anymore, remove contentDB
	contentDB := backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[id]
	query := backRepoCONTENT.db.Unscoped().Delete(&contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID, content)
	delete(backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr, id)
	delete(backRepoCONTENT.Map_CONTENTDBID_CONTENTDB, id)

	return
}

// BackRepoCONTENT.CommitPhaseOneInstance commits content staged instances of CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCONTENT *BackRepoCONTENTStruct) CommitPhaseOneInstance(content *models.CONTENT) (Error error) {

	// check if the content is not commited yet
	if _, ok := backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]; ok {
		return
	}

	// initiate content
	var contentDB CONTENTDB
	contentDB.CopyBasicFieldsFromCONTENT(content)

	query := backRepoCONTENT.db.Create(&contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content] = contentDB.ID
	backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[contentDB.ID] = content
	backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[contentDB.ID] = &contentDB

	return
}

// BackRepoCONTENT.CommitPhaseTwo commits all staged instances of CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCONTENT *BackRepoCONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, content := range backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr {
		backRepoCONTENT.CommitPhaseTwoInstance(backRepo, idx, content)
	}

	return
}

// BackRepoCONTENT.CommitPhaseTwoInstance commits {{structname }} of models.CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCONTENT *BackRepoCONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, content *models.CONTENT) (Error error) {

	// fetch matching contentDB
	if contentDB, ok := backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[idx]; ok {

		contentDB.CopyBasicFieldsFromCONTENT(content)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCONTENT.db.Save(&contentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CONTENT intance %s", content.Name))
		return err
	}

	return
}

// BackRepoCONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCONTENT *BackRepoCONTENTStruct) CheckoutPhaseOne() (Error error) {

	contentDBArray := make([]CONTENTDB, 0)
	query := backRepoCONTENT.db.Find(&contentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	contentInstancesToBeRemovedFromTheStage := make(map[*models.CONTENT]any)
	for key, value := range backRepoCONTENT.stage.CONTENTs {
		contentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, contentDB := range contentDBArray {
		backRepoCONTENT.CheckoutPhaseOneInstance(&contentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		content, ok := backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[contentDB.ID]
		if ok {
			delete(contentInstancesToBeRemovedFromTheStage, content)
		}
	}

	// remove from stage and back repo's 3 maps all contents that are not in the checkout
	for content := range contentInstancesToBeRemovedFromTheStage {
		content.Unstage(backRepoCONTENT.GetStage())

		// remove instance from the back repo 3 maps
		contentID := backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]
		delete(backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID, content)
		delete(backRepoCONTENT.Map_CONTENTDBID_CONTENTDB, contentID)
		delete(backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr, contentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a contentDB that has been found in the DB, updates the backRepo and stages the
// models version of the contentDB
func (backRepoCONTENT *BackRepoCONTENTStruct) CheckoutPhaseOneInstance(contentDB *CONTENTDB) (Error error) {

	content, ok := backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[contentDB.ID]
	if !ok {
		content = new(models.CONTENT)

		backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[contentDB.ID] = content
		backRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content] = contentDB.ID

		// append model store with the new element
		content.Name = contentDB.Name_Data.String
		content.Stage(backRepoCONTENT.GetStage())
	}
	contentDB.CopyBasicFieldsToCONTENT(content)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	content.Stage(backRepoCONTENT.GetStage())

	// preserve pointer to contentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CONTENTDBID_CONTENTDB)[contentDB hold variable pointers
	contentDB_Data := *contentDB
	preservedPtrToCONTENT := &contentDB_Data
	backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[contentDB.ID] = preservedPtrToCONTENT

	return
}

// BackRepoCONTENT.CheckoutPhaseTwo Checkouts all staged instances of CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCONTENT *BackRepoCONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, contentDB := range backRepoCONTENT.Map_CONTENTDBID_CONTENTDB {
		backRepoCONTENT.CheckoutPhaseTwoInstance(backRepo, contentDB)
	}
	return
}

// BackRepoCONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCONTENT *BackRepoCONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, contentDB *CONTENTDB) (Error error) {

	content := backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr[contentDB.ID]

	contentDB.DecodePointers(backRepo, content)

	return
}

func (contentDB *CONTENTDB) DecodePointers(backRepo *BackRepoStruct, content *models.CONTENT) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCONTENT allows commit of a single content (if already staged)
func (backRepo *BackRepoStruct) CommitCONTENT(content *models.CONTENT) {
	backRepo.BackRepoCONTENT.CommitPhaseOneInstance(content)
	if id, ok := backRepo.BackRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]; ok {
		backRepo.BackRepoCONTENT.CommitPhaseTwoInstance(backRepo, id, content)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCONTENT allows checkout of a single content (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCONTENT(content *models.CONTENT) {
	// check if the content is staged
	if _, ok := backRepo.BackRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]; ok {

		if id, ok := backRepo.BackRepoCONTENT.Map_CONTENTPtr_CONTENTDBID[content]; ok {
			var contentDB CONTENTDB
			contentDB.ID = id

			if err := backRepo.BackRepoCONTENT.db.First(&contentDB, id).Error; err != nil {
				log.Fatalln("CheckoutCONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCONTENT.CheckoutPhaseOneInstance(&contentDB)
			backRepo.BackRepoCONTENT.CheckoutPhaseTwoInstance(backRepo, &contentDB)
		}
	}
}

// CopyBasicFieldsFromCONTENT
func (contentDB *CONTENTDB) CopyBasicFieldsFromCONTENT(content *models.CONTENT) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCONTENT_WOP
func (contentDB *CONTENTDB) CopyBasicFieldsFromCONTENT_WOP(content *models.CONTENT_WOP) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCONTENTWOP
func (contentDB *CONTENTDB) CopyBasicFieldsFromCONTENTWOP(content *CONTENTWOP) {
	// insertion point for fields commit

	contentDB.Name_Data.String = content.Name
	contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCONTENT
func (contentDB *CONTENTDB) CopyBasicFieldsToCONTENT(content *models.CONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
}

// CopyBasicFieldsToCONTENT_WOP
func (contentDB *CONTENTDB) CopyBasicFieldsToCONTENT_WOP(content *models.CONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
}

// CopyBasicFieldsToCONTENTWOP
func (contentDB *CONTENTDB) CopyBasicFieldsToCONTENTWOP(content *CONTENTWOP) {
	content.ID = int(contentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	content.Name = contentDB.Name_Data.String
}

// Backup generates a json file from a slice of all CONTENTDB instances in the backrepo
func (backRepoCONTENT *BackRepoCONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CONTENTDB, 0)
	for _, contentDB := range backRepoCONTENT.Map_CONTENTDBID_CONTENTDB {
		forBackup = append(forBackup, contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all CONTENTDB instances in the backrepo
func (backRepoCONTENT *BackRepoCONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CONTENTDB, 0)
	for _, contentDB := range backRepoCONTENT.Map_CONTENTDBID_CONTENTDB {
		forBackup = append(forBackup, contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CONTENT_Fields, -1)
	for _, contentDB := range forBackup {

		var contentWOP CONTENTWOP
		contentDB.CopyBasicFieldsToCONTENTWOP(&contentWOP)

		row := sh.AddRow()
		row.WriteStruct(&contentWOP, -1)
	}
}

// RestoreXL from the "CONTENT" sheet all CONTENTDB instances
func (backRepoCONTENT *BackRepoCONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCONTENT.rowVisitorCONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCONTENT *BackRepoCONTENTStruct) rowVisitorCONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var contentWOP CONTENTWOP
		row.ReadStruct(&contentWOP)

		// add the unmarshalled struct to the stage
		contentDB := new(CONTENTDB)
		contentDB.CopyBasicFieldsFromCONTENTWOP(&contentWOP)

		contentDB_ID_atBackupTime := contentDB.ID
		contentDB.ID = 0
		query := backRepoCONTENT.db.Create(contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[contentDB.ID] = contentDB
		BackRepoCONTENTid_atBckpTime_newID[contentDB_ID_atBackupTime] = contentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CONTENTDB.json" in dirPath that stores an array
// of CONTENTDB and stores it in the database
// the map BackRepoCONTENTid_atBckpTime_newID is updated accordingly
func (backRepoCONTENT *BackRepoCONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CONTENTDBID_CONTENTDB
	for _, contentDB := range forRestore {

		contentDB_ID_atBackupTime := contentDB.ID
		contentDB.ID = 0
		query := backRepoCONTENT.db.Create(contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[contentDB.ID] = contentDB
		BackRepoCONTENTid_atBckpTime_newID[contentDB_ID_atBackupTime] = contentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoCONTENT *BackRepoCONTENTStruct) RestorePhaseTwo() {

	for _, contentDB := range backRepoCONTENT.Map_CONTENTDBID_CONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = contentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCONTENT.db.Model(contentDB).Updates(*contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCONTENT.ResetReversePointers commits all staged instances of CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCONTENT *BackRepoCONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, content := range backRepoCONTENT.Map_CONTENTDBID_CONTENTPtr {
		backRepoCONTENT.ResetReversePointersInstance(backRepo, idx, content)
	}

	return
}

func (backRepoCONTENT *BackRepoCONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, content *models.CONTENT) (Error error) {

	// fetch matching contentDB
	if contentDB, ok := backRepoCONTENT.Map_CONTENTDBID_CONTENTDB[idx]; ok {
		_ = contentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCONTENTid_atBckpTime_newID map[uint]uint
