// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XHTMLCONTENT_sql sql.NullBool
var dummy_XHTMLCONTENT_time time.Duration
var dummy_XHTMLCONTENT_sort sort.Float64Slice

// XHTMLCONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xhtmlcontentAPI
type XHTMLCONTENTAPI struct {
	gorm.Model

	models.XHTMLCONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XHTMLCONTENTPointersEncoding XHTMLCONTENTPointersEncoding
}

// XHTMLCONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XHTMLCONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// XHTMLCONTENTDB describes a xhtmlcontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xhtmlcontentDB
type XHTMLCONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xhtmlcontentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XHTMLCONTENTPointersEncoding
}

// XHTMLCONTENTDBs arrays xhtmlcontentDBs
// swagger:response xhtmlcontentDBsResponse
type XHTMLCONTENTDBs []XHTMLCONTENTDB

// XHTMLCONTENTDBResponse provides response
// swagger:response xhtmlcontentDBResponse
type XHTMLCONTENTDBResponse struct {
	XHTMLCONTENTDB
}

// XHTMLCONTENTWOP is a XHTMLCONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XHTMLCONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var XHTMLCONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoXHTMLCONTENTStruct struct {
	// stores XHTMLCONTENTDB according to their gorm ID
	Map_XHTMLCONTENTDBID_XHTMLCONTENTDB map[uint]*XHTMLCONTENTDB

	// stores XHTMLCONTENTDB ID according to XHTMLCONTENT address
	Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID map[*models.XHTMLCONTENT]uint

	// stores XHTMLCONTENT according to their gorm ID
	Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr map[uint]*models.XHTMLCONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoXHTMLCONTENT.stage
	return
}

func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) GetDB() *gorm.DB {
	return backRepoXHTMLCONTENT.db
}

// GetXHTMLCONTENTDBFromXHTMLCONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) GetXHTMLCONTENTDBFromXHTMLCONTENTPtr(xhtmlcontent *models.XHTMLCONTENT) (xhtmlcontentDB *XHTMLCONTENTDB) {
	id := backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]
	xhtmlcontentDB = backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[id]
	return
}

// BackRepoXHTMLCONTENT.CommitPhaseOne commits all staged instances of XHTMLCONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xhtmlcontent := range stage.XHTMLCONTENTs {
		backRepoXHTMLCONTENT.CommitPhaseOneInstance(xhtmlcontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xhtmlcontent := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr {
		if _, ok := stage.XHTMLCONTENTs[xhtmlcontent]; !ok {
			backRepoXHTMLCONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXHTMLCONTENT.CommitDeleteInstance commits deletion of XHTMLCONTENT to the BackRepo
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	xhtmlcontent := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[id]

	// xhtmlcontent is not staged anymore, remove xhtmlcontentDB
	xhtmlcontentDB := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[id]
	query := backRepoXHTMLCONTENT.db.Unscoped().Delete(&xhtmlcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID, xhtmlcontent)
	delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr, id)
	delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB, id)

	return
}

// BackRepoXHTMLCONTENT.CommitPhaseOneInstance commits xhtmlcontent staged instances of XHTMLCONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CommitPhaseOneInstance(xhtmlcontent *models.XHTMLCONTENT) (Error error) {

	// check if the xhtmlcontent is not commited yet
	if _, ok := backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]; ok {
		return
	}

	// initiate xhtmlcontent
	var xhtmlcontentDB XHTMLCONTENTDB
	xhtmlcontentDB.CopyBasicFieldsFromXHTMLCONTENT(xhtmlcontent)

	query := backRepoXHTMLCONTENT.db.Create(&xhtmlcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent] = xhtmlcontentDB.ID
	backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[xhtmlcontentDB.ID] = xhtmlcontent
	backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[xhtmlcontentDB.ID] = &xhtmlcontentDB

	return
}

// BackRepoXHTMLCONTENT.CommitPhaseTwo commits all staged instances of XHTMLCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xhtmlcontent := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr {
		backRepoXHTMLCONTENT.CommitPhaseTwoInstance(backRepo, idx, xhtmlcontent)
	}

	return
}

// BackRepoXHTMLCONTENT.CommitPhaseTwoInstance commits {{structname }} of models.XHTMLCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xhtmlcontent *models.XHTMLCONTENT) (Error error) {

	// fetch matching xhtmlcontentDB
	if xhtmlcontentDB, ok := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[idx]; ok {

		xhtmlcontentDB.CopyBasicFieldsFromXHTMLCONTENT(xhtmlcontent)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoXHTMLCONTENT.db.Save(&xhtmlcontentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XHTMLCONTENT intance %s", xhtmlcontent.Name))
		return err
	}

	return
}

// BackRepoXHTMLCONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CheckoutPhaseOne() (Error error) {

	xhtmlcontentDBArray := make([]XHTMLCONTENTDB, 0)
	query := backRepoXHTMLCONTENT.db.Find(&xhtmlcontentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xhtmlcontentInstancesToBeRemovedFromTheStage := make(map[*models.XHTMLCONTENT]any)
	for key, value := range backRepoXHTMLCONTENT.stage.XHTMLCONTENTs {
		xhtmlcontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xhtmlcontentDB := range xhtmlcontentDBArray {
		backRepoXHTMLCONTENT.CheckoutPhaseOneInstance(&xhtmlcontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xhtmlcontent, ok := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[xhtmlcontentDB.ID]
		if ok {
			delete(xhtmlcontentInstancesToBeRemovedFromTheStage, xhtmlcontent)
		}
	}

	// remove from stage and back repo's 3 maps all xhtmlcontents that are not in the checkout
	for xhtmlcontent := range xhtmlcontentInstancesToBeRemovedFromTheStage {
		xhtmlcontent.Unstage(backRepoXHTMLCONTENT.GetStage())

		// remove instance from the back repo 3 maps
		xhtmlcontentID := backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]
		delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID, xhtmlcontent)
		delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB, xhtmlcontentID)
		delete(backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr, xhtmlcontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xhtmlcontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the xhtmlcontentDB
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CheckoutPhaseOneInstance(xhtmlcontentDB *XHTMLCONTENTDB) (Error error) {

	xhtmlcontent, ok := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[xhtmlcontentDB.ID]
	if !ok {
		xhtmlcontent = new(models.XHTMLCONTENT)

		backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[xhtmlcontentDB.ID] = xhtmlcontent
		backRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent] = xhtmlcontentDB.ID

		// append model store with the new element
		xhtmlcontent.Name = xhtmlcontentDB.Name_Data.String
		xhtmlcontent.Stage(backRepoXHTMLCONTENT.GetStage())
	}
	xhtmlcontentDB.CopyBasicFieldsToXHTMLCONTENT(xhtmlcontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xhtmlcontent.Stage(backRepoXHTMLCONTENT.GetStage())

	// preserve pointer to xhtmlcontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XHTMLCONTENTDBID_XHTMLCONTENTDB)[xhtmlcontentDB hold variable pointers
	xhtmlcontentDB_Data := *xhtmlcontentDB
	preservedPtrToXHTMLCONTENT := &xhtmlcontentDB_Data
	backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[xhtmlcontentDB.ID] = preservedPtrToXHTMLCONTENT

	return
}

// BackRepoXHTMLCONTENT.CheckoutPhaseTwo Checkouts all staged instances of XHTMLCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xhtmlcontentDB := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB {
		backRepoXHTMLCONTENT.CheckoutPhaseTwoInstance(backRepo, xhtmlcontentDB)
	}
	return
}

// BackRepoXHTMLCONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of XHTMLCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xhtmlcontentDB *XHTMLCONTENTDB) (Error error) {

	xhtmlcontent := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr[xhtmlcontentDB.ID]

	xhtmlcontentDB.DecodePointers(backRepo, xhtmlcontent)

	return
}

func (xhtmlcontentDB *XHTMLCONTENTDB) DecodePointers(backRepo *BackRepoStruct, xhtmlcontent *models.XHTMLCONTENT) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitXHTMLCONTENT allows commit of a single xhtmlcontent (if already staged)
func (backRepo *BackRepoStruct) CommitXHTMLCONTENT(xhtmlcontent *models.XHTMLCONTENT) {
	backRepo.BackRepoXHTMLCONTENT.CommitPhaseOneInstance(xhtmlcontent)
	if id, ok := backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]; ok {
		backRepo.BackRepoXHTMLCONTENT.CommitPhaseTwoInstance(backRepo, id, xhtmlcontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXHTMLCONTENT allows checkout of a single xhtmlcontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXHTMLCONTENT(xhtmlcontent *models.XHTMLCONTENT) {
	// check if the xhtmlcontent is staged
	if _, ok := backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]; ok {

		if id, ok := backRepo.BackRepoXHTMLCONTENT.Map_XHTMLCONTENTPtr_XHTMLCONTENTDBID[xhtmlcontent]; ok {
			var xhtmlcontentDB XHTMLCONTENTDB
			xhtmlcontentDB.ID = id

			if err := backRepo.BackRepoXHTMLCONTENT.db.First(&xhtmlcontentDB, id).Error; err != nil {
				log.Fatalln("CheckoutXHTMLCONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXHTMLCONTENT.CheckoutPhaseOneInstance(&xhtmlcontentDB)
			backRepo.BackRepoXHTMLCONTENT.CheckoutPhaseTwoInstance(backRepo, &xhtmlcontentDB)
		}
	}
}

// CopyBasicFieldsFromXHTMLCONTENT
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsFromXHTMLCONTENT(xhtmlcontent *models.XHTMLCONTENT) {
	// insertion point for fields commit

	xhtmlcontentDB.Name_Data.String = xhtmlcontent.Name
	xhtmlcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromXHTMLCONTENT_WOP
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsFromXHTMLCONTENT_WOP(xhtmlcontent *models.XHTMLCONTENT_WOP) {
	// insertion point for fields commit

	xhtmlcontentDB.Name_Data.String = xhtmlcontent.Name
	xhtmlcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromXHTMLCONTENTWOP
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsFromXHTMLCONTENTWOP(xhtmlcontent *XHTMLCONTENTWOP) {
	// insertion point for fields commit

	xhtmlcontentDB.Name_Data.String = xhtmlcontent.Name
	xhtmlcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToXHTMLCONTENT
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsToXHTMLCONTENT(xhtmlcontent *models.XHTMLCONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	xhtmlcontent.Name = xhtmlcontentDB.Name_Data.String
}

// CopyBasicFieldsToXHTMLCONTENT_WOP
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsToXHTMLCONTENT_WOP(xhtmlcontent *models.XHTMLCONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xhtmlcontent.Name = xhtmlcontentDB.Name_Data.String
}

// CopyBasicFieldsToXHTMLCONTENTWOP
func (xhtmlcontentDB *XHTMLCONTENTDB) CopyBasicFieldsToXHTMLCONTENTWOP(xhtmlcontent *XHTMLCONTENTWOP) {
	xhtmlcontent.ID = int(xhtmlcontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xhtmlcontent.Name = xhtmlcontentDB.Name_Data.String
}

// Backup generates a json file from a slice of all XHTMLCONTENTDB instances in the backrepo
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XHTMLCONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XHTMLCONTENTDB, 0)
	for _, xhtmlcontentDB := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB {
		forBackup = append(forBackup, xhtmlcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json XHTMLCONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json XHTMLCONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all XHTMLCONTENTDB instances in the backrepo
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XHTMLCONTENTDB, 0)
	for _, xhtmlcontentDB := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB {
		forBackup = append(forBackup, xhtmlcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("XHTMLCONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&XHTMLCONTENT_Fields, -1)
	for _, xhtmlcontentDB := range forBackup {

		var xhtmlcontentWOP XHTMLCONTENTWOP
		xhtmlcontentDB.CopyBasicFieldsToXHTMLCONTENTWOP(&xhtmlcontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&xhtmlcontentWOP, -1)
	}
}

// RestoreXL from the "XHTMLCONTENT" sheet all XHTMLCONTENTDB instances
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXHTMLCONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["XHTMLCONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXHTMLCONTENT.rowVisitorXHTMLCONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) rowVisitorXHTMLCONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xhtmlcontentWOP XHTMLCONTENTWOP
		row.ReadStruct(&xhtmlcontentWOP)

		// add the unmarshalled struct to the stage
		xhtmlcontentDB := new(XHTMLCONTENTDB)
		xhtmlcontentDB.CopyBasicFieldsFromXHTMLCONTENTWOP(&xhtmlcontentWOP)

		xhtmlcontentDB_ID_atBackupTime := xhtmlcontentDB.ID
		xhtmlcontentDB.ID = 0
		query := backRepoXHTMLCONTENT.db.Create(xhtmlcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[xhtmlcontentDB.ID] = xhtmlcontentDB
		BackRepoXHTMLCONTENTid_atBckpTime_newID[xhtmlcontentDB_ID_atBackupTime] = xhtmlcontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XHTMLCONTENTDB.json" in dirPath that stores an array
// of XHTMLCONTENTDB and stores it in the database
// the map BackRepoXHTMLCONTENTid_atBckpTime_newID is updated accordingly
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXHTMLCONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XHTMLCONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json XHTMLCONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XHTMLCONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XHTMLCONTENTDBID_XHTMLCONTENTDB
	for _, xhtmlcontentDB := range forRestore {

		xhtmlcontentDB_ID_atBackupTime := xhtmlcontentDB.ID
		xhtmlcontentDB.ID = 0
		query := backRepoXHTMLCONTENT.db.Create(xhtmlcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[xhtmlcontentDB.ID] = xhtmlcontentDB
		BackRepoXHTMLCONTENTid_atBckpTime_newID[xhtmlcontentDB_ID_atBackupTime] = xhtmlcontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json XHTMLCONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<XHTMLCONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) RestorePhaseTwo() {

	for _, xhtmlcontentDB := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = xhtmlcontentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoXHTMLCONTENT.db.Model(xhtmlcontentDB).Updates(*xhtmlcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoXHTMLCONTENT.ResetReversePointers commits all staged instances of XHTMLCONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xhtmlcontent := range backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTPtr {
		backRepoXHTMLCONTENT.ResetReversePointersInstance(backRepo, idx, xhtmlcontent)
	}

	return
}

func (backRepoXHTMLCONTENT *BackRepoXHTMLCONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xhtmlcontent *models.XHTMLCONTENT) (Error error) {

	// fetch matching xhtmlcontentDB
	if xhtmlcontentDB, ok := backRepoXHTMLCONTENT.Map_XHTMLCONTENTDBID_XHTMLCONTENTDB[idx]; ok {
		_ = xhtmlcontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXHTMLCONTENTid_atBckpTime_newID map[uint]uint
