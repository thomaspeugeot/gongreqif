// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_OBJECT_sql sql.NullBool
var dummy_OBJECT_time time.Duration
var dummy_OBJECT_sort sort.Float64Slice

// OBJECTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model objectAPI
type OBJECTAPI struct {
	gorm.Model

	models.OBJECT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	OBJECTPointersEncoding OBJECTPointersEncoding
}

// OBJECTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OBJECTPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// OBJECTDB describes a object in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model objectDB
type OBJECTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field objectDB.Name
	Name_Data sql.NullString

	// Declation for basic field objectDB.SPECOBJECTREF
	SPECOBJECTREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	OBJECTPointersEncoding
}

// OBJECTDBs arrays objectDBs
// swagger:response objectDBsResponse
type OBJECTDBs []OBJECTDB

// OBJECTDBResponse provides response
// swagger:response objectDBResponse
type OBJECTDBResponse struct {
	OBJECTDB
}

// OBJECTWOP is a OBJECT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OBJECTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPECOBJECTREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var OBJECT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPECOBJECTREF",
}

type BackRepoOBJECTStruct struct {
	// stores OBJECTDB according to their gorm ID
	Map_OBJECTDBID_OBJECTDB map[uint]*OBJECTDB

	// stores OBJECTDB ID according to OBJECT address
	Map_OBJECTPtr_OBJECTDBID map[*models.OBJECT]uint

	// stores OBJECT according to their gorm ID
	Map_OBJECTDBID_OBJECTPtr map[uint]*models.OBJECT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOBJECT *BackRepoOBJECTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOBJECT.stage
	return
}

func (backRepoOBJECT *BackRepoOBJECTStruct) GetDB() *gorm.DB {
	return backRepoOBJECT.db
}

// GetOBJECTDBFromOBJECTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOBJECT *BackRepoOBJECTStruct) GetOBJECTDBFromOBJECTPtr(object *models.OBJECT) (objectDB *OBJECTDB) {
	id := backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]
	objectDB = backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[id]
	return
}

// BackRepoOBJECT.CommitPhaseOne commits all staged instances of OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOBJECT *BackRepoOBJECTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for object := range stage.OBJECTs {
		backRepoOBJECT.CommitPhaseOneInstance(object)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, object := range backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr {
		if _, ok := stage.OBJECTs[object]; !ok {
			backRepoOBJECT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOBJECT.CommitDeleteInstance commits deletion of OBJECT to the BackRepo
func (backRepoOBJECT *BackRepoOBJECTStruct) CommitDeleteInstance(id uint) (Error error) {

	object := backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[id]

	// object is not staged anymore, remove objectDB
	objectDB := backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[id]
	query := backRepoOBJECT.db.Unscoped().Delete(&objectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID, object)
	delete(backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr, id)
	delete(backRepoOBJECT.Map_OBJECTDBID_OBJECTDB, id)

	return
}

// BackRepoOBJECT.CommitPhaseOneInstance commits object staged instances of OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOBJECT *BackRepoOBJECTStruct) CommitPhaseOneInstance(object *models.OBJECT) (Error error) {

	// check if the object is not commited yet
	if _, ok := backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]; ok {
		return
	}

	// initiate object
	var objectDB OBJECTDB
	objectDB.CopyBasicFieldsFromOBJECT(object)

	query := backRepoOBJECT.db.Create(&objectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object] = objectDB.ID
	backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[objectDB.ID] = object
	backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[objectDB.ID] = &objectDB

	return
}

// BackRepoOBJECT.CommitPhaseTwo commits all staged instances of OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOBJECT *BackRepoOBJECTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, object := range backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr {
		backRepoOBJECT.CommitPhaseTwoInstance(backRepo, idx, object)
	}

	return
}

// BackRepoOBJECT.CommitPhaseTwoInstance commits {{structname }} of models.OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOBJECT *BackRepoOBJECTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, object *models.OBJECT) (Error error) {

	// fetch matching objectDB
	if objectDB, ok := backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[idx]; ok {

		objectDB.CopyBasicFieldsFromOBJECT(object)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOBJECT.db.Save(&objectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown OBJECT intance %s", object.Name))
		return err
	}

	return
}

// BackRepoOBJECT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOBJECT *BackRepoOBJECTStruct) CheckoutPhaseOne() (Error error) {

	objectDBArray := make([]OBJECTDB, 0)
	query := backRepoOBJECT.db.Find(&objectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	objectInstancesToBeRemovedFromTheStage := make(map[*models.OBJECT]any)
	for key, value := range backRepoOBJECT.stage.OBJECTs {
		objectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, objectDB := range objectDBArray {
		backRepoOBJECT.CheckoutPhaseOneInstance(&objectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		object, ok := backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[objectDB.ID]
		if ok {
			delete(objectInstancesToBeRemovedFromTheStage, object)
		}
	}

	// remove from stage and back repo's 3 maps all objects that are not in the checkout
	for object := range objectInstancesToBeRemovedFromTheStage {
		object.Unstage(backRepoOBJECT.GetStage())

		// remove instance from the back repo 3 maps
		objectID := backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]
		delete(backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID, object)
		delete(backRepoOBJECT.Map_OBJECTDBID_OBJECTDB, objectID)
		delete(backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr, objectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a objectDB that has been found in the DB, updates the backRepo and stages the
// models version of the objectDB
func (backRepoOBJECT *BackRepoOBJECTStruct) CheckoutPhaseOneInstance(objectDB *OBJECTDB) (Error error) {

	object, ok := backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[objectDB.ID]
	if !ok {
		object = new(models.OBJECT)

		backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[objectDB.ID] = object
		backRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object] = objectDB.ID

		// append model store with the new element
		object.Name = objectDB.Name_Data.String
		object.Stage(backRepoOBJECT.GetStage())
	}
	objectDB.CopyBasicFieldsToOBJECT(object)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	object.Stage(backRepoOBJECT.GetStage())

	// preserve pointer to objectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OBJECTDBID_OBJECTDB)[objectDB hold variable pointers
	objectDB_Data := *objectDB
	preservedPtrToOBJECT := &objectDB_Data
	backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[objectDB.ID] = preservedPtrToOBJECT

	return
}

// BackRepoOBJECT.CheckoutPhaseTwo Checkouts all staged instances of OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOBJECT *BackRepoOBJECTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, objectDB := range backRepoOBJECT.Map_OBJECTDBID_OBJECTDB {
		backRepoOBJECT.CheckoutPhaseTwoInstance(backRepo, objectDB)
	}
	return
}

// BackRepoOBJECT.CheckoutPhaseTwoInstance Checkouts staged instances of OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOBJECT *BackRepoOBJECTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, objectDB *OBJECTDB) (Error error) {

	object := backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr[objectDB.ID]

	objectDB.DecodePointers(backRepo, object)

	return
}

func (objectDB *OBJECTDB) DecodePointers(backRepo *BackRepoStruct, object *models.OBJECT) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOBJECT allows commit of a single object (if already staged)
func (backRepo *BackRepoStruct) CommitOBJECT(object *models.OBJECT) {
	backRepo.BackRepoOBJECT.CommitPhaseOneInstance(object)
	if id, ok := backRepo.BackRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]; ok {
		backRepo.BackRepoOBJECT.CommitPhaseTwoInstance(backRepo, id, object)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOBJECT allows checkout of a single object (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOBJECT(object *models.OBJECT) {
	// check if the object is staged
	if _, ok := backRepo.BackRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]; ok {

		if id, ok := backRepo.BackRepoOBJECT.Map_OBJECTPtr_OBJECTDBID[object]; ok {
			var objectDB OBJECTDB
			objectDB.ID = id

			if err := backRepo.BackRepoOBJECT.db.First(&objectDB, id).Error; err != nil {
				log.Fatalln("CheckoutOBJECT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOBJECT.CheckoutPhaseOneInstance(&objectDB)
			backRepo.BackRepoOBJECT.CheckoutPhaseTwoInstance(backRepo, &objectDB)
		}
	}
}

// CopyBasicFieldsFromOBJECT
func (objectDB *OBJECTDB) CopyBasicFieldsFromOBJECT(object *models.OBJECT) {
	// insertion point for fields commit

	objectDB.Name_Data.String = object.Name
	objectDB.Name_Data.Valid = true

	objectDB.SPECOBJECTREF_Data.String = object.SPECOBJECTREF
	objectDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsFromOBJECT_WOP
func (objectDB *OBJECTDB) CopyBasicFieldsFromOBJECT_WOP(object *models.OBJECT_WOP) {
	// insertion point for fields commit

	objectDB.Name_Data.String = object.Name
	objectDB.Name_Data.Valid = true

	objectDB.SPECOBJECTREF_Data.String = object.SPECOBJECTREF
	objectDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsFromOBJECTWOP
func (objectDB *OBJECTDB) CopyBasicFieldsFromOBJECTWOP(object *OBJECTWOP) {
	// insertion point for fields commit

	objectDB.Name_Data.String = object.Name
	objectDB.Name_Data.Valid = true

	objectDB.SPECOBJECTREF_Data.String = object.SPECOBJECTREF
	objectDB.SPECOBJECTREF_Data.Valid = true
}

// CopyBasicFieldsToOBJECT
func (objectDB *OBJECTDB) CopyBasicFieldsToOBJECT(object *models.OBJECT) {
	// insertion point for checkout of basic fields (back repo to stage)
	object.Name = objectDB.Name_Data.String
	object.SPECOBJECTREF = objectDB.SPECOBJECTREF_Data.String
}

// CopyBasicFieldsToOBJECT_WOP
func (objectDB *OBJECTDB) CopyBasicFieldsToOBJECT_WOP(object *models.OBJECT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	object.Name = objectDB.Name_Data.String
	object.SPECOBJECTREF = objectDB.SPECOBJECTREF_Data.String
}

// CopyBasicFieldsToOBJECTWOP
func (objectDB *OBJECTDB) CopyBasicFieldsToOBJECTWOP(object *OBJECTWOP) {
	object.ID = int(objectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	object.Name = objectDB.Name_Data.String
	object.SPECOBJECTREF = objectDB.SPECOBJECTREF_Data.String
}

// Backup generates a json file from a slice of all OBJECTDB instances in the backrepo
func (backRepoOBJECT *BackRepoOBJECTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OBJECTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OBJECTDB, 0)
	for _, objectDB := range backRepoOBJECT.Map_OBJECTDBID_OBJECTDB {
		forBackup = append(forBackup, objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json OBJECT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json OBJECT file", err.Error())
	}
}

// Backup generates a json file from a slice of all OBJECTDB instances in the backrepo
func (backRepoOBJECT *BackRepoOBJECTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OBJECTDB, 0)
	for _, objectDB := range backRepoOBJECT.Map_OBJECTDBID_OBJECTDB {
		forBackup = append(forBackup, objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("OBJECT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&OBJECT_Fields, -1)
	for _, objectDB := range forBackup {

		var objectWOP OBJECTWOP
		objectDB.CopyBasicFieldsToOBJECTWOP(&objectWOP)

		row := sh.AddRow()
		row.WriteStruct(&objectWOP, -1)
	}
}

// RestoreXL from the "OBJECT" sheet all OBJECTDB instances
func (backRepoOBJECT *BackRepoOBJECTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOBJECTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["OBJECT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOBJECT.rowVisitorOBJECT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOBJECT *BackRepoOBJECTStruct) rowVisitorOBJECT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var objectWOP OBJECTWOP
		row.ReadStruct(&objectWOP)

		// add the unmarshalled struct to the stage
		objectDB := new(OBJECTDB)
		objectDB.CopyBasicFieldsFromOBJECTWOP(&objectWOP)

		objectDB_ID_atBackupTime := objectDB.ID
		objectDB.ID = 0
		query := backRepoOBJECT.db.Create(objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[objectDB.ID] = objectDB
		BackRepoOBJECTid_atBckpTime_newID[objectDB_ID_atBackupTime] = objectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OBJECTDB.json" in dirPath that stores an array
// of OBJECTDB and stores it in the database
// the map BackRepoOBJECTid_atBckpTime_newID is updated accordingly
func (backRepoOBJECT *BackRepoOBJECTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOBJECTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OBJECTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json OBJECT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OBJECTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OBJECTDBID_OBJECTDB
	for _, objectDB := range forRestore {

		objectDB_ID_atBackupTime := objectDB.ID
		objectDB.ID = 0
		query := backRepoOBJECT.db.Create(objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[objectDB.ID] = objectDB
		BackRepoOBJECTid_atBckpTime_newID[objectDB_ID_atBackupTime] = objectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json OBJECT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<OBJECT>id_atBckpTime_newID
// to compute new index
func (backRepoOBJECT *BackRepoOBJECTStruct) RestorePhaseTwo() {

	for _, objectDB := range backRepoOBJECT.Map_OBJECTDBID_OBJECTDB {

		// next line of code is to avert unused variable compilation error
		_ = objectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOBJECT.db.Model(objectDB).Updates(*objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOBJECT.ResetReversePointers commits all staged instances of OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOBJECT *BackRepoOBJECTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, object := range backRepoOBJECT.Map_OBJECTDBID_OBJECTPtr {
		backRepoOBJECT.ResetReversePointersInstance(backRepo, idx, object)
	}

	return
}

func (backRepoOBJECT *BackRepoOBJECTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, object *models.OBJECT) (Error error) {

	// fetch matching objectDB
	if objectDB, ok := backRepoOBJECT.Map_OBJECTDBID_OBJECTDB[idx]; ok {
		_ = objectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOBJECTid_atBckpTime_newID map[uint]uint
