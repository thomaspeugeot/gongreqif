// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VALUES_sql sql.NullBool
var dummy_VALUES_time time.Duration
var dummy_VALUES_sort sort.Float64Slice

// VALUESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model valuesAPI
type VALUESAPI struct {
	gorm.Model

	models.VALUES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	VALUESPointersEncoding VALUESPointersEncoding
}

// VALUESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VALUESPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// VALUESDB describes a values in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model valuesDB
type VALUESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field valuesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	VALUESPointersEncoding
}

// VALUESDBs arrays valuesDBs
// swagger:response valuesDBsResponse
type VALUESDBs []VALUESDB

// VALUESDBResponse provides response
// swagger:response valuesDBResponse
type VALUESDBResponse struct {
	VALUESDB
}

// VALUESWOP is a VALUES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VALUESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var VALUES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoVALUESStruct struct {
	// stores VALUESDB according to their gorm ID
	Map_VALUESDBID_VALUESDB map[uint]*VALUESDB

	// stores VALUESDB ID according to VALUES address
	Map_VALUESPtr_VALUESDBID map[*models.VALUES]uint

	// stores VALUES according to their gorm ID
	Map_VALUESDBID_VALUESPtr map[uint]*models.VALUES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoVALUES *BackRepoVALUESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoVALUES.stage
	return
}

func (backRepoVALUES *BackRepoVALUESStruct) GetDB() *gorm.DB {
	return backRepoVALUES.db
}

// GetVALUESDBFromVALUESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVALUES *BackRepoVALUESStruct) GetVALUESDBFromVALUESPtr(values *models.VALUES) (valuesDB *VALUESDB) {
	id := backRepoVALUES.Map_VALUESPtr_VALUESDBID[values]
	valuesDB = backRepoVALUES.Map_VALUESDBID_VALUESDB[id]
	return
}

// BackRepoVALUES.CommitPhaseOne commits all staged instances of VALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVALUES *BackRepoVALUESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for values := range stage.VALUESs {
		backRepoVALUES.CommitPhaseOneInstance(values)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, values := range backRepoVALUES.Map_VALUESDBID_VALUESPtr {
		if _, ok := stage.VALUESs[values]; !ok {
			backRepoVALUES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVALUES.CommitDeleteInstance commits deletion of VALUES to the BackRepo
func (backRepoVALUES *BackRepoVALUESStruct) CommitDeleteInstance(id uint) (Error error) {

	values := backRepoVALUES.Map_VALUESDBID_VALUESPtr[id]

	// values is not staged anymore, remove valuesDB
	valuesDB := backRepoVALUES.Map_VALUESDBID_VALUESDB[id]
	query := backRepoVALUES.db.Unscoped().Delete(&valuesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoVALUES.Map_VALUESPtr_VALUESDBID, values)
	delete(backRepoVALUES.Map_VALUESDBID_VALUESPtr, id)
	delete(backRepoVALUES.Map_VALUESDBID_VALUESDB, id)

	return
}

// BackRepoVALUES.CommitPhaseOneInstance commits values staged instances of VALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVALUES *BackRepoVALUESStruct) CommitPhaseOneInstance(values *models.VALUES) (Error error) {

	// check if the values is not commited yet
	if _, ok := backRepoVALUES.Map_VALUESPtr_VALUESDBID[values]; ok {
		return
	}

	// initiate values
	var valuesDB VALUESDB
	valuesDB.CopyBasicFieldsFromVALUES(values)

	query := backRepoVALUES.db.Create(&valuesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoVALUES.Map_VALUESPtr_VALUESDBID[values] = valuesDB.ID
	backRepoVALUES.Map_VALUESDBID_VALUESPtr[valuesDB.ID] = values
	backRepoVALUES.Map_VALUESDBID_VALUESDB[valuesDB.ID] = &valuesDB

	return
}

// BackRepoVALUES.CommitPhaseTwo commits all staged instances of VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVALUES *BackRepoVALUESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, values := range backRepoVALUES.Map_VALUESDBID_VALUESPtr {
		backRepoVALUES.CommitPhaseTwoInstance(backRepo, idx, values)
	}

	return
}

// BackRepoVALUES.CommitPhaseTwoInstance commits {{structname }} of models.VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVALUES *BackRepoVALUESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, values *models.VALUES) (Error error) {

	// fetch matching valuesDB
	if valuesDB, ok := backRepoVALUES.Map_VALUESDBID_VALUESDB[idx]; ok {

		valuesDB.CopyBasicFieldsFromVALUES(values)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoVALUES.db.Save(&valuesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VALUES intance %s", values.Name))
		return err
	}

	return
}

// BackRepoVALUES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoVALUES *BackRepoVALUESStruct) CheckoutPhaseOne() (Error error) {

	valuesDBArray := make([]VALUESDB, 0)
	query := backRepoVALUES.db.Find(&valuesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	valuesInstancesToBeRemovedFromTheStage := make(map[*models.VALUES]any)
	for key, value := range backRepoVALUES.stage.VALUESs {
		valuesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, valuesDB := range valuesDBArray {
		backRepoVALUES.CheckoutPhaseOneInstance(&valuesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		values, ok := backRepoVALUES.Map_VALUESDBID_VALUESPtr[valuesDB.ID]
		if ok {
			delete(valuesInstancesToBeRemovedFromTheStage, values)
		}
	}

	// remove from stage and back repo's 3 maps all valuess that are not in the checkout
	for values := range valuesInstancesToBeRemovedFromTheStage {
		values.Unstage(backRepoVALUES.GetStage())

		// remove instance from the back repo 3 maps
		valuesID := backRepoVALUES.Map_VALUESPtr_VALUESDBID[values]
		delete(backRepoVALUES.Map_VALUESPtr_VALUESDBID, values)
		delete(backRepoVALUES.Map_VALUESDBID_VALUESDB, valuesID)
		delete(backRepoVALUES.Map_VALUESDBID_VALUESPtr, valuesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a valuesDB that has been found in the DB, updates the backRepo and stages the
// models version of the valuesDB
func (backRepoVALUES *BackRepoVALUESStruct) CheckoutPhaseOneInstance(valuesDB *VALUESDB) (Error error) {

	values, ok := backRepoVALUES.Map_VALUESDBID_VALUESPtr[valuesDB.ID]
	if !ok {
		values = new(models.VALUES)

		backRepoVALUES.Map_VALUESDBID_VALUESPtr[valuesDB.ID] = values
		backRepoVALUES.Map_VALUESPtr_VALUESDBID[values] = valuesDB.ID

		// append model store with the new element
		values.Name = valuesDB.Name_Data.String
		values.Stage(backRepoVALUES.GetStage())
	}
	valuesDB.CopyBasicFieldsToVALUES(values)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	values.Stage(backRepoVALUES.GetStage())

	// preserve pointer to valuesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VALUESDBID_VALUESDB)[valuesDB hold variable pointers
	valuesDB_Data := *valuesDB
	preservedPtrToVALUES := &valuesDB_Data
	backRepoVALUES.Map_VALUESDBID_VALUESDB[valuesDB.ID] = preservedPtrToVALUES

	return
}

// BackRepoVALUES.CheckoutPhaseTwo Checkouts all staged instances of VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVALUES *BackRepoVALUESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, valuesDB := range backRepoVALUES.Map_VALUESDBID_VALUESDB {
		backRepoVALUES.CheckoutPhaseTwoInstance(backRepo, valuesDB)
	}
	return
}

// BackRepoVALUES.CheckoutPhaseTwoInstance Checkouts staged instances of VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVALUES *BackRepoVALUESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, valuesDB *VALUESDB) (Error error) {

	values := backRepoVALUES.Map_VALUESDBID_VALUESPtr[valuesDB.ID]

	valuesDB.DecodePointers(backRepo, values)

	return
}

func (valuesDB *VALUESDB) DecodePointers(backRepo *BackRepoStruct, values *models.VALUES) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitVALUES allows commit of a single values (if already staged)
func (backRepo *BackRepoStruct) CommitVALUES(values *models.VALUES) {
	backRepo.BackRepoVALUES.CommitPhaseOneInstance(values)
	if id, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[values]; ok {
		backRepo.BackRepoVALUES.CommitPhaseTwoInstance(backRepo, id, values)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitVALUES allows checkout of a single values (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVALUES(values *models.VALUES) {
	// check if the values is staged
	if _, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[values]; ok {

		if id, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[values]; ok {
			var valuesDB VALUESDB
			valuesDB.ID = id

			if err := backRepo.BackRepoVALUES.db.First(&valuesDB, id).Error; err != nil {
				log.Fatalln("CheckoutVALUES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVALUES.CheckoutPhaseOneInstance(&valuesDB)
			backRepo.BackRepoVALUES.CheckoutPhaseTwoInstance(backRepo, &valuesDB)
		}
	}
}

// CopyBasicFieldsFromVALUES
func (valuesDB *VALUESDB) CopyBasicFieldsFromVALUES(values *models.VALUES) {
	// insertion point for fields commit

	valuesDB.Name_Data.String = values.Name
	valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromVALUES_WOP
func (valuesDB *VALUESDB) CopyBasicFieldsFromVALUES_WOP(values *models.VALUES_WOP) {
	// insertion point for fields commit

	valuesDB.Name_Data.String = values.Name
	valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromVALUESWOP
func (valuesDB *VALUESDB) CopyBasicFieldsFromVALUESWOP(values *VALUESWOP) {
	// insertion point for fields commit

	valuesDB.Name_Data.String = values.Name
	valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToVALUES
func (valuesDB *VALUESDB) CopyBasicFieldsToVALUES(values *models.VALUES) {
	// insertion point for checkout of basic fields (back repo to stage)
	values.Name = valuesDB.Name_Data.String
}

// CopyBasicFieldsToVALUES_WOP
func (valuesDB *VALUESDB) CopyBasicFieldsToVALUES_WOP(values *models.VALUES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	values.Name = valuesDB.Name_Data.String
}

// CopyBasicFieldsToVALUESWOP
func (valuesDB *VALUESDB) CopyBasicFieldsToVALUESWOP(values *VALUESWOP) {
	values.ID = int(valuesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	values.Name = valuesDB.Name_Data.String
}

// Backup generates a json file from a slice of all VALUESDB instances in the backrepo
func (backRepoVALUES *BackRepoVALUESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VALUESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VALUESDB, 0)
	for _, valuesDB := range backRepoVALUES.Map_VALUESDBID_VALUESDB {
		forBackup = append(forBackup, valuesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json VALUES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json VALUES file", err.Error())
	}
}

// Backup generates a json file from a slice of all VALUESDB instances in the backrepo
func (backRepoVALUES *BackRepoVALUESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VALUESDB, 0)
	for _, valuesDB := range backRepoVALUES.Map_VALUESDBID_VALUESDB {
		forBackup = append(forBackup, valuesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VALUES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VALUES_Fields, -1)
	for _, valuesDB := range forBackup {

		var valuesWOP VALUESWOP
		valuesDB.CopyBasicFieldsToVALUESWOP(&valuesWOP)

		row := sh.AddRow()
		row.WriteStruct(&valuesWOP, -1)
	}
}

// RestoreXL from the "VALUES" sheet all VALUESDB instances
func (backRepoVALUES *BackRepoVALUESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVALUESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["VALUES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVALUES.rowVisitorVALUES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoVALUES *BackRepoVALUESStruct) rowVisitorVALUES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var valuesWOP VALUESWOP
		row.ReadStruct(&valuesWOP)

		// add the unmarshalled struct to the stage
		valuesDB := new(VALUESDB)
		valuesDB.CopyBasicFieldsFromVALUESWOP(&valuesWOP)

		valuesDB_ID_atBackupTime := valuesDB.ID
		valuesDB.ID = 0
		query := backRepoVALUES.db.Create(valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVALUES.Map_VALUESDBID_VALUESDB[valuesDB.ID] = valuesDB
		BackRepoVALUESid_atBckpTime_newID[valuesDB_ID_atBackupTime] = valuesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "VALUESDB.json" in dirPath that stores an array
// of VALUESDB and stores it in the database
// the map BackRepoVALUESid_atBckpTime_newID is updated accordingly
func (backRepoVALUES *BackRepoVALUESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVALUESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VALUESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json VALUES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VALUESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VALUESDBID_VALUESDB
	for _, valuesDB := range forRestore {

		valuesDB_ID_atBackupTime := valuesDB.ID
		valuesDB.ID = 0
		query := backRepoVALUES.db.Create(valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVALUES.Map_VALUESDBID_VALUESDB[valuesDB.ID] = valuesDB
		BackRepoVALUESid_atBckpTime_newID[valuesDB_ID_atBackupTime] = valuesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json VALUES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VALUES>id_atBckpTime_newID
// to compute new index
func (backRepoVALUES *BackRepoVALUESStruct) RestorePhaseTwo() {

	for _, valuesDB := range backRepoVALUES.Map_VALUESDBID_VALUESDB {

		// next line of code is to avert unused variable compilation error
		_ = valuesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVALUES.db.Model(valuesDB).Updates(*valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoVALUES.ResetReversePointers commits all staged instances of VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVALUES *BackRepoVALUESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, values := range backRepoVALUES.Map_VALUESDBID_VALUESPtr {
		backRepoVALUES.ResetReversePointersInstance(backRepo, idx, values)
	}

	return
}

func (backRepoVALUES *BackRepoVALUESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, values *models.VALUES) (Error error) {

	// fetch matching valuesDB
	if valuesDB, ok := backRepoVALUES.Map_VALUESDBID_VALUESDB[idx]; ok {
		_ = valuesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVALUESid_atBckpTime_newID map[uint]uint
