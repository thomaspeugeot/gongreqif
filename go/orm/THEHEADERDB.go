// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_THEHEADER_sql sql.NullBool
var dummy_THEHEADER_time time.Duration
var dummy_THEHEADER_sort sort.Float64Slice

// THEHEADERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model theheaderAPI
type THEHEADERAPI struct {
	gorm.Model

	models.THEHEADER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	THEHEADERPointersEncoding THEHEADERPointersEncoding
}

// THEHEADERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type THEHEADERPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQIFHEADER is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	REQIFHEADERID sql.NullInt64
}

// THEHEADERDB describes a theheader in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model theheaderDB
type THEHEADERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field theheaderDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	THEHEADERPointersEncoding
}

// THEHEADERDBs arrays theheaderDBs
// swagger:response theheaderDBsResponse
type THEHEADERDBs []THEHEADERDB

// THEHEADERDBResponse provides response
// swagger:response theheaderDBResponse
type THEHEADERDBResponse struct {
	THEHEADERDB
}

// THEHEADERWOP is a THEHEADER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type THEHEADERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var THEHEADER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTHEHEADERStruct struct {
	// stores THEHEADERDB according to their gorm ID
	Map_THEHEADERDBID_THEHEADERDB map[uint]*THEHEADERDB

	// stores THEHEADERDB ID according to THEHEADER address
	Map_THEHEADERPtr_THEHEADERDBID map[*models.THEHEADER]uint

	// stores THEHEADER according to their gorm ID
	Map_THEHEADERDBID_THEHEADERPtr map[uint]*models.THEHEADER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTHEHEADER.stage
	return
}

func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) GetDB() *gorm.DB {
	return backRepoTHEHEADER.db
}

// GetTHEHEADERDBFromTHEHEADERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) GetTHEHEADERDBFromTHEHEADERPtr(theheader *models.THEHEADER) (theheaderDB *THEHEADERDB) {
	id := backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]
	theheaderDB = backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[id]
	return
}

// BackRepoTHEHEADER.CommitPhaseOne commits all staged instances of THEHEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for theheader := range stage.THEHEADERs {
		backRepoTHEHEADER.CommitPhaseOneInstance(theheader)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, theheader := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr {
		if _, ok := stage.THEHEADERs[theheader]; !ok {
			backRepoTHEHEADER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTHEHEADER.CommitDeleteInstance commits deletion of THEHEADER to the BackRepo
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CommitDeleteInstance(id uint) (Error error) {

	theheader := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[id]

	// theheader is not staged anymore, remove theheaderDB
	theheaderDB := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[id]
	query := backRepoTHEHEADER.db.Unscoped().Delete(&theheaderDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID, theheader)
	delete(backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr, id)
	delete(backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB, id)

	return
}

// BackRepoTHEHEADER.CommitPhaseOneInstance commits theheader staged instances of THEHEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CommitPhaseOneInstance(theheader *models.THEHEADER) (Error error) {

	// check if the theheader is not commited yet
	if _, ok := backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]; ok {
		return
	}

	// initiate theheader
	var theheaderDB THEHEADERDB
	theheaderDB.CopyBasicFieldsFromTHEHEADER(theheader)

	query := backRepoTHEHEADER.db.Create(&theheaderDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader] = theheaderDB.ID
	backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[theheaderDB.ID] = theheader
	backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[theheaderDB.ID] = &theheaderDB

	return
}

// BackRepoTHEHEADER.CommitPhaseTwo commits all staged instances of THEHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, theheader := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr {
		backRepoTHEHEADER.CommitPhaseTwoInstance(backRepo, idx, theheader)
	}

	return
}

// BackRepoTHEHEADER.CommitPhaseTwoInstance commits {{structname }} of models.THEHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, theheader *models.THEHEADER) (Error error) {

	// fetch matching theheaderDB
	if theheaderDB, ok := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[idx]; ok {

		theheaderDB.CopyBasicFieldsFromTHEHEADER(theheader)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value theheader.REQIFHEADER translates to updating the theheader.REQIFHEADERID
		theheaderDB.REQIFHEADERID.Valid = true // allow for a 0 value (nil association)
		if theheader.REQIFHEADER != nil {
			if REQIFHEADERId, ok := backRepo.BackRepoREQIFHEADER.Map_REQIFHEADERPtr_REQIFHEADERDBID[theheader.REQIFHEADER]; ok {
				theheaderDB.REQIFHEADERID.Int64 = int64(REQIFHEADERId)
				theheaderDB.REQIFHEADERID.Valid = true
			}
		} else {
			theheaderDB.REQIFHEADERID.Int64 = 0
			theheaderDB.REQIFHEADERID.Valid = true
		}

		query := backRepoTHEHEADER.db.Save(&theheaderDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown THEHEADER intance %s", theheader.Name))
		return err
	}

	return
}

// BackRepoTHEHEADER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CheckoutPhaseOne() (Error error) {

	theheaderDBArray := make([]THEHEADERDB, 0)
	query := backRepoTHEHEADER.db.Find(&theheaderDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	theheaderInstancesToBeRemovedFromTheStage := make(map[*models.THEHEADER]any)
	for key, value := range backRepoTHEHEADER.stage.THEHEADERs {
		theheaderInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, theheaderDB := range theheaderDBArray {
		backRepoTHEHEADER.CheckoutPhaseOneInstance(&theheaderDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		theheader, ok := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[theheaderDB.ID]
		if ok {
			delete(theheaderInstancesToBeRemovedFromTheStage, theheader)
		}
	}

	// remove from stage and back repo's 3 maps all theheaders that are not in the checkout
	for theheader := range theheaderInstancesToBeRemovedFromTheStage {
		theheader.Unstage(backRepoTHEHEADER.GetStage())

		// remove instance from the back repo 3 maps
		theheaderID := backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]
		delete(backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID, theheader)
		delete(backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB, theheaderID)
		delete(backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr, theheaderID)
	}

	return
}

// CheckoutPhaseOneInstance takes a theheaderDB that has been found in the DB, updates the backRepo and stages the
// models version of the theheaderDB
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CheckoutPhaseOneInstance(theheaderDB *THEHEADERDB) (Error error) {

	theheader, ok := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[theheaderDB.ID]
	if !ok {
		theheader = new(models.THEHEADER)

		backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[theheaderDB.ID] = theheader
		backRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader] = theheaderDB.ID

		// append model store with the new element
		theheader.Name = theheaderDB.Name_Data.String
		theheader.Stage(backRepoTHEHEADER.GetStage())
	}
	theheaderDB.CopyBasicFieldsToTHEHEADER(theheader)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	theheader.Stage(backRepoTHEHEADER.GetStage())

	// preserve pointer to theheaderDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_THEHEADERDBID_THEHEADERDB)[theheaderDB hold variable pointers
	theheaderDB_Data := *theheaderDB
	preservedPtrToTHEHEADER := &theheaderDB_Data
	backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[theheaderDB.ID] = preservedPtrToTHEHEADER

	return
}

// BackRepoTHEHEADER.CheckoutPhaseTwo Checkouts all staged instances of THEHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, theheaderDB := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB {
		backRepoTHEHEADER.CheckoutPhaseTwoInstance(backRepo, theheaderDB)
	}
	return
}

// BackRepoTHEHEADER.CheckoutPhaseTwoInstance Checkouts staged instances of THEHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, theheaderDB *THEHEADERDB) (Error error) {

	theheader := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr[theheaderDB.ID]

	theheaderDB.DecodePointers(backRepo, theheader)

	return
}

func (theheaderDB *THEHEADERDB) DecodePointers(backRepo *BackRepoStruct, theheader *models.THEHEADER) {

	// insertion point for checkout of pointer encoding
	// REQIFHEADER field
	theheader.REQIFHEADER = nil
	if theheaderDB.REQIFHEADERID.Int64 != 0 {
		theheader.REQIFHEADER = backRepo.BackRepoREQIFHEADER.Map_REQIFHEADERDBID_REQIFHEADERPtr[uint(theheaderDB.REQIFHEADERID.Int64)]
	}
	return
}

// CommitTHEHEADER allows commit of a single theheader (if already staged)
func (backRepo *BackRepoStruct) CommitTHEHEADER(theheader *models.THEHEADER) {
	backRepo.BackRepoTHEHEADER.CommitPhaseOneInstance(theheader)
	if id, ok := backRepo.BackRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]; ok {
		backRepo.BackRepoTHEHEADER.CommitPhaseTwoInstance(backRepo, id, theheader)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTHEHEADER allows checkout of a single theheader (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTHEHEADER(theheader *models.THEHEADER) {
	// check if the theheader is staged
	if _, ok := backRepo.BackRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]; ok {

		if id, ok := backRepo.BackRepoTHEHEADER.Map_THEHEADERPtr_THEHEADERDBID[theheader]; ok {
			var theheaderDB THEHEADERDB
			theheaderDB.ID = id

			if err := backRepo.BackRepoTHEHEADER.db.First(&theheaderDB, id).Error; err != nil {
				log.Fatalln("CheckoutTHEHEADER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTHEHEADER.CheckoutPhaseOneInstance(&theheaderDB)
			backRepo.BackRepoTHEHEADER.CheckoutPhaseTwoInstance(backRepo, &theheaderDB)
		}
	}
}

// CopyBasicFieldsFromTHEHEADER
func (theheaderDB *THEHEADERDB) CopyBasicFieldsFromTHEHEADER(theheader *models.THEHEADER) {
	// insertion point for fields commit

	theheaderDB.Name_Data.String = theheader.Name
	theheaderDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTHEHEADER_WOP
func (theheaderDB *THEHEADERDB) CopyBasicFieldsFromTHEHEADER_WOP(theheader *models.THEHEADER_WOP) {
	// insertion point for fields commit

	theheaderDB.Name_Data.String = theheader.Name
	theheaderDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTHEHEADERWOP
func (theheaderDB *THEHEADERDB) CopyBasicFieldsFromTHEHEADERWOP(theheader *THEHEADERWOP) {
	// insertion point for fields commit

	theheaderDB.Name_Data.String = theheader.Name
	theheaderDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTHEHEADER
func (theheaderDB *THEHEADERDB) CopyBasicFieldsToTHEHEADER(theheader *models.THEHEADER) {
	// insertion point for checkout of basic fields (back repo to stage)
	theheader.Name = theheaderDB.Name_Data.String
}

// CopyBasicFieldsToTHEHEADER_WOP
func (theheaderDB *THEHEADERDB) CopyBasicFieldsToTHEHEADER_WOP(theheader *models.THEHEADER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	theheader.Name = theheaderDB.Name_Data.String
}

// CopyBasicFieldsToTHEHEADERWOP
func (theheaderDB *THEHEADERDB) CopyBasicFieldsToTHEHEADERWOP(theheader *THEHEADERWOP) {
	theheader.ID = int(theheaderDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	theheader.Name = theheaderDB.Name_Data.String
}

// Backup generates a json file from a slice of all THEHEADERDB instances in the backrepo
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "THEHEADERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*THEHEADERDB, 0)
	for _, theheaderDB := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB {
		forBackup = append(forBackup, theheaderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json THEHEADER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json THEHEADER file", err.Error())
	}
}

// Backup generates a json file from a slice of all THEHEADERDB instances in the backrepo
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*THEHEADERDB, 0)
	for _, theheaderDB := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB {
		forBackup = append(forBackup, theheaderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("THEHEADER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&THEHEADER_Fields, -1)
	for _, theheaderDB := range forBackup {

		var theheaderWOP THEHEADERWOP
		theheaderDB.CopyBasicFieldsToTHEHEADERWOP(&theheaderWOP)

		row := sh.AddRow()
		row.WriteStruct(&theheaderWOP, -1)
	}
}

// RestoreXL from the "THEHEADER" sheet all THEHEADERDB instances
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTHEHEADERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["THEHEADER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTHEHEADER.rowVisitorTHEHEADER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) rowVisitorTHEHEADER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var theheaderWOP THEHEADERWOP
		row.ReadStruct(&theheaderWOP)

		// add the unmarshalled struct to the stage
		theheaderDB := new(THEHEADERDB)
		theheaderDB.CopyBasicFieldsFromTHEHEADERWOP(&theheaderWOP)

		theheaderDB_ID_atBackupTime := theheaderDB.ID
		theheaderDB.ID = 0
		query := backRepoTHEHEADER.db.Create(theheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[theheaderDB.ID] = theheaderDB
		BackRepoTHEHEADERid_atBckpTime_newID[theheaderDB_ID_atBackupTime] = theheaderDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "THEHEADERDB.json" in dirPath that stores an array
// of THEHEADERDB and stores it in the database
// the map BackRepoTHEHEADERid_atBckpTime_newID is updated accordingly
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTHEHEADERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "THEHEADERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json THEHEADER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*THEHEADERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_THEHEADERDBID_THEHEADERDB
	for _, theheaderDB := range forRestore {

		theheaderDB_ID_atBackupTime := theheaderDB.ID
		theheaderDB.ID = 0
		query := backRepoTHEHEADER.db.Create(theheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[theheaderDB.ID] = theheaderDB
		BackRepoTHEHEADERid_atBckpTime_newID[theheaderDB_ID_atBackupTime] = theheaderDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json THEHEADER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<THEHEADER>id_atBckpTime_newID
// to compute new index
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) RestorePhaseTwo() {

	for _, theheaderDB := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB {

		// next line of code is to avert unused variable compilation error
		_ = theheaderDB

		// insertion point for reindexing pointers encoding
		// reindexing REQIFHEADER field
		if theheaderDB.REQIFHEADERID.Int64 != 0 {
			theheaderDB.REQIFHEADERID.Int64 = int64(BackRepoREQIFHEADERid_atBckpTime_newID[uint(theheaderDB.REQIFHEADERID.Int64)])
			theheaderDB.REQIFHEADERID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTHEHEADER.db.Model(theheaderDB).Updates(*theheaderDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTHEHEADER.ResetReversePointers commits all staged instances of THEHEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, theheader := range backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERPtr {
		backRepoTHEHEADER.ResetReversePointersInstance(backRepo, idx, theheader)
	}

	return
}

func (backRepoTHEHEADER *BackRepoTHEHEADERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, theheader *models.THEHEADER) (Error error) {

	// fetch matching theheaderDB
	if theheaderDB, ok := backRepoTHEHEADER.Map_THEHEADERDBID_THEHEADERDB[idx]; ok {
		_ = theheaderDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTHEHEADERid_atBckpTime_newID map[uint]uint
