// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONENUMERATION_sql sql.NullBool
var dummy_DATATYPEDEFINITIONENUMERATION_time time.Duration
var dummy_DATATYPEDEFINITIONENUMERATION_sort sort.Float64Slice

// DATATYPEDEFINITIONENUMERATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionenumerationAPI
type DATATYPEDEFINITIONENUMERATIONAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONENUMERATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONENUMERATIONPointersEncoding DATATYPEDEFINITIONENUMERATIONPointersEncoding
}

// DATATYPEDEFINITIONENUMERATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONENUMERATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field SPECIFIEDVALUES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECIFIEDVALUESID sql.NullInt64
}

// DATATYPEDEFINITIONENUMERATIONDB describes a datatypedefinitionenumeration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionenumerationDB
type DATATYPEDEFINITIONENUMERATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionenumerationDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionenumerationDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionenumerationDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionenumerationDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionenumerationDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONENUMERATIONPointersEncoding
}

// DATATYPEDEFINITIONENUMERATIONDBs arrays datatypedefinitionenumerationDBs
// swagger:response datatypedefinitionenumerationDBsResponse
type DATATYPEDEFINITIONENUMERATIONDBs []DATATYPEDEFINITIONENUMERATIONDB

// DATATYPEDEFINITIONENUMERATIONDBResponse provides response
// swagger:response datatypedefinitionenumerationDBResponse
type DATATYPEDEFINITIONENUMERATIONDBResponse struct {
	DATATYPEDEFINITIONENUMERATIONDB
}

// DATATYPEDEFINITIONENUMERATIONWOP is a DATATYPEDEFINITIONENUMERATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONENUMERATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONENUMERATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoDATATYPEDEFINITIONENUMERATIONStruct struct {
	// stores DATATYPEDEFINITIONENUMERATIONDB according to their gorm ID
	Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB map[uint]*DATATYPEDEFINITIONENUMERATIONDB

	// stores DATATYPEDEFINITIONENUMERATIONDB ID according to DATATYPEDEFINITIONENUMERATION address
	Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID map[*models.DATATYPEDEFINITIONENUMERATION]uint

	// stores DATATYPEDEFINITIONENUMERATION according to their gorm ID
	Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr map[uint]*models.DATATYPEDEFINITIONENUMERATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONENUMERATION.stage
	return
}

func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONENUMERATION.db
}

// GetDATATYPEDEFINITIONENUMERATIONDBFromDATATYPEDEFINITIONENUMERATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) GetDATATYPEDEFINITIONENUMERATIONDBFromDATATYPEDEFINITIONENUMERATIONPtr(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) {
	id := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]
	datatypedefinitionenumerationDB = backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitionenumeration := range stage.DATATYPEDEFINITIONENUMERATIONs {
		backRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseOneInstance(datatypedefinitionenumeration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitionenumeration := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr {
		if _, ok := stage.DATATYPEDEFINITIONENUMERATIONs[datatypedefinitionenumeration]; !ok {
			backRepoDATATYPEDEFINITIONENUMERATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONENUMERATION to the BackRepo
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitionenumeration := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[id]

	// datatypedefinitionenumeration is not staged anymore, remove datatypedefinitionenumerationDB
	datatypedefinitionenumerationDB := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[id]
	query := backRepoDATATYPEDEFINITIONENUMERATION.db.Unscoped().Delete(&datatypedefinitionenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID, datatypedefinitionenumeration)
	delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr, id)
	delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseOneInstance commits datatypedefinitionenumeration staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CommitPhaseOneInstance(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) (Error error) {

	// check if the datatypedefinitionenumeration is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]; ok {
		return
	}

	// initiate datatypedefinitionenumeration
	var datatypedefinitionenumerationDB DATATYPEDEFINITIONENUMERATIONDB
	datatypedefinitionenumerationDB.CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration)

	query := backRepoDATATYPEDEFINITIONENUMERATION.db.Create(&datatypedefinitionenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration] = datatypedefinitionenumerationDB.ID
	backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[datatypedefinitionenumerationDB.ID] = datatypedefinitionenumeration
	backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[datatypedefinitionenumerationDB.ID] = &datatypedefinitionenumerationDB

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionenumeration := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr {
		backRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitionenumeration)
	}

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) (Error error) {

	// fetch matching datatypedefinitionenumerationDB
	if datatypedefinitionenumerationDB, ok := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[idx]; ok {

		datatypedefinitionenumerationDB.CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitionenumeration.ALTERNATIVEID translates to updating the datatypedefinitionenumeration.ALTERNATIVEIDID
		datatypedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionenumeration.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitionenumeration.ALTERNATIVEID]; ok {
				datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value datatypedefinitionenumeration.SPECIFIEDVALUES translates to updating the datatypedefinitionenumeration.SPECIFIEDVALUESID
		datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionenumeration.SPECIFIEDVALUES != nil {
			if SPECIFIEDVALUESId, ok := backRepo.BackRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[datatypedefinitionenumeration.SPECIFIEDVALUES]; ok {
				datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64 = int64(SPECIFIEDVALUESId)
				datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Valid = true
			}
		} else {
			datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64 = 0
			datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONENUMERATION.db.Save(&datatypedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONENUMERATION intance %s", datatypedefinitionenumeration.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionenumerationDBArray := make([]DATATYPEDEFINITIONENUMERATIONDB, 0)
	query := backRepoDATATYPEDEFINITIONENUMERATION.db.Find(&datatypedefinitionenumerationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionenumerationInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONENUMERATION]any)
	for key, value := range backRepoDATATYPEDEFINITIONENUMERATION.stage.DATATYPEDEFINITIONENUMERATIONs {
		datatypedefinitionenumerationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionenumerationDB := range datatypedefinitionenumerationDBArray {
		backRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseOneInstance(&datatypedefinitionenumerationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitionenumeration, ok := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[datatypedefinitionenumerationDB.ID]
		if ok {
			delete(datatypedefinitionenumerationInstancesToBeRemovedFromTheStage, datatypedefinitionenumeration)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionenumerations that are not in the checkout
	for datatypedefinitionenumeration := range datatypedefinitionenumerationInstancesToBeRemovedFromTheStage {
		datatypedefinitionenumeration.Unstage(backRepoDATATYPEDEFINITIONENUMERATION.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionenumerationID := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]
		delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID, datatypedefinitionenumeration)
		delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB, datatypedefinitionenumerationID)
		delete(backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr, datatypedefinitionenumerationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionenumerationDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionenumerationDB
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CheckoutPhaseOneInstance(datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) (Error error) {

	datatypedefinitionenumeration, ok := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[datatypedefinitionenumerationDB.ID]
	if !ok {
		datatypedefinitionenumeration = new(models.DATATYPEDEFINITIONENUMERATION)

		backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[datatypedefinitionenumerationDB.ID] = datatypedefinitionenumeration
		backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration] = datatypedefinitionenumerationDB.ID

		// append model store with the new element
		datatypedefinitionenumeration.Name = datatypedefinitionenumerationDB.Name_Data.String
		datatypedefinitionenumeration.Stage(backRepoDATATYPEDEFINITIONENUMERATION.GetStage())
	}
	datatypedefinitionenumerationDB.CopyBasicFieldsToDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitionenumeration.Stage(backRepoDATATYPEDEFINITIONENUMERATION.GetStage())

	// preserve pointer to datatypedefinitionenumerationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB)[datatypedefinitionenumerationDB hold variable pointers
	datatypedefinitionenumerationDB_Data := *datatypedefinitionenumerationDB
	preservedPtrToDATATYPEDEFINITIONENUMERATION := &datatypedefinitionenumerationDB_Data
	backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[datatypedefinitionenumerationDB.ID] = preservedPtrToDATATYPEDEFINITIONENUMERATION

	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionenumerationDB := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB {
		backRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionenumerationDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) (Error error) {

	datatypedefinitionenumeration := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr[datatypedefinitionenumerationDB.ID]

	datatypedefinitionenumerationDB.DecodePointers(backRepo, datatypedefinitionenumeration)

	return
}

func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitionenumeration.ALTERNATIVEID = nil
	if datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitionenumeration.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64)]
	}
	// SPECIFIEDVALUES field
	datatypedefinitionenumeration.SPECIFIEDVALUES = nil
	if datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64 != 0 {
		datatypedefinitionenumeration.SPECIFIEDVALUES = backRepo.BackRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[uint(datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONENUMERATION allows commit of a single datatypedefinitionenumeration (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) {
	backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseOneInstance(datatypedefinitionenumeration)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.CommitPhaseTwoInstance(backRepo, id, datatypedefinitionenumeration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONENUMERATION allows checkout of a single datatypedefinitionenumeration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) {
	// check if the datatypedefinitionenumeration is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONPtr_DATATYPEDEFINITIONENUMERATIONDBID[datatypedefinitionenumeration]; ok {
			var datatypedefinitionenumerationDB DATATYPEDEFINITIONENUMERATIONDB
			datatypedefinitionenumerationDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.db.First(&datatypedefinitionenumerationDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONENUMERATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseOneInstance(&datatypedefinitionenumerationDB)
			backRepo.BackRepoDATATYPEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionenumerationDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) {
	// insertion point for fields commit

	datatypedefinitionenumerationDB.Name_Data.String = datatypedefinitionenumeration.Name
	datatypedefinitionenumerationDB.Name_Data.Valid = true

	datatypedefinitionenumerationDB.DESCAttr_Data.String = datatypedefinitionenumeration.DESCAttr
	datatypedefinitionenumerationDB.DESCAttr_Data.Valid = true

	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String = datatypedefinitionenumeration.IDENTIFIERAttr
	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String = datatypedefinitionenumeration.LASTCHANGEAttr
	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String = datatypedefinitionenumeration.LONGNAMEAttr
	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION_WOP
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATION_WOP(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION_WOP) {
	// insertion point for fields commit

	datatypedefinitionenumerationDB.Name_Data.String = datatypedefinitionenumeration.Name
	datatypedefinitionenumerationDB.Name_Data.Valid = true

	datatypedefinitionenumerationDB.DESCAttr_Data.String = datatypedefinitionenumeration.DESCAttr
	datatypedefinitionenumerationDB.DESCAttr_Data.Valid = true

	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String = datatypedefinitionenumeration.IDENTIFIERAttr
	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String = datatypedefinitionenumeration.LASTCHANGEAttr
	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String = datatypedefinitionenumeration.LONGNAMEAttr
	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATIONWOP
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATIONWOP(datatypedefinitionenumeration *DATATYPEDEFINITIONENUMERATIONWOP) {
	// insertion point for fields commit

	datatypedefinitionenumerationDB.Name_Data.String = datatypedefinitionenumeration.Name
	datatypedefinitionenumerationDB.Name_Data.Valid = true

	datatypedefinitionenumerationDB.DESCAttr_Data.String = datatypedefinitionenumeration.DESCAttr
	datatypedefinitionenumerationDB.DESCAttr_Data.Valid = true

	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String = datatypedefinitionenumeration.IDENTIFIERAttr
	datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String = datatypedefinitionenumeration.LASTCHANGEAttr
	datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String = datatypedefinitionenumeration.LONGNAMEAttr
	datatypedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONENUMERATION
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsToDATATYPEDEFINITIONENUMERATION(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionenumeration.Name = datatypedefinitionenumerationDB.Name_Data.String
	datatypedefinitionenumeration.DESCAttr = datatypedefinitionenumerationDB.DESCAttr_Data.String
	datatypedefinitionenumeration.IDENTIFIERAttr = datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	datatypedefinitionenumeration.LASTCHANGEAttr = datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	datatypedefinitionenumeration.LONGNAMEAttr = datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONENUMERATION_WOP
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsToDATATYPEDEFINITIONENUMERATION_WOP(datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionenumeration.Name = datatypedefinitionenumerationDB.Name_Data.String
	datatypedefinitionenumeration.DESCAttr = datatypedefinitionenumerationDB.DESCAttr_Data.String
	datatypedefinitionenumeration.IDENTIFIERAttr = datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	datatypedefinitionenumeration.LASTCHANGEAttr = datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	datatypedefinitionenumeration.LONGNAMEAttr = datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONENUMERATIONWOP
func (datatypedefinitionenumerationDB *DATATYPEDEFINITIONENUMERATIONDB) CopyBasicFieldsToDATATYPEDEFINITIONENUMERATIONWOP(datatypedefinitionenumeration *DATATYPEDEFINITIONENUMERATIONWOP) {
	datatypedefinitionenumeration.ID = int(datatypedefinitionenumerationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionenumeration.Name = datatypedefinitionenumerationDB.Name_Data.String
	datatypedefinitionenumeration.DESCAttr = datatypedefinitionenumerationDB.DESCAttr_Data.String
	datatypedefinitionenumeration.IDENTIFIERAttr = datatypedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	datatypedefinitionenumeration.LASTCHANGEAttr = datatypedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	datatypedefinitionenumeration.LONGNAMEAttr = datatypedefinitionenumerationDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONENUMERATIONDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONENUMERATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONENUMERATIONDB, 0)
	for _, datatypedefinitionenumerationDB := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB {
		forBackup = append(forBackup, datatypedefinitionenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONENUMERATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONENUMERATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONENUMERATIONDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONENUMERATIONDB, 0)
	for _, datatypedefinitionenumerationDB := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB {
		forBackup = append(forBackup, datatypedefinitionenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONENUMERATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONENUMERATION_Fields, -1)
	for _, datatypedefinitionenumerationDB := range forBackup {

		var datatypedefinitionenumerationWOP DATATYPEDEFINITIONENUMERATIONWOP
		datatypedefinitionenumerationDB.CopyBasicFieldsToDATATYPEDEFINITIONENUMERATIONWOP(&datatypedefinitionenumerationWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionenumerationWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONENUMERATION" sheet all DATATYPEDEFINITIONENUMERATIONDB instances
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONENUMERATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONENUMERATION.rowVisitorDATATYPEDEFINITIONENUMERATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) rowVisitorDATATYPEDEFINITIONENUMERATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionenumerationWOP DATATYPEDEFINITIONENUMERATIONWOP
		row.ReadStruct(&datatypedefinitionenumerationWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionenumerationDB := new(DATATYPEDEFINITIONENUMERATIONDB)
		datatypedefinitionenumerationDB.CopyBasicFieldsFromDATATYPEDEFINITIONENUMERATIONWOP(&datatypedefinitionenumerationWOP)

		datatypedefinitionenumerationDB_ID_atBackupTime := datatypedefinitionenumerationDB.ID
		datatypedefinitionenumerationDB.ID = 0
		query := backRepoDATATYPEDEFINITIONENUMERATION.db.Create(datatypedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[datatypedefinitionenumerationDB.ID] = datatypedefinitionenumerationDB
		BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID[datatypedefinitionenumerationDB_ID_atBackupTime] = datatypedefinitionenumerationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONENUMERATIONDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONENUMERATIONDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONENUMERATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONENUMERATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONENUMERATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB
	for _, datatypedefinitionenumerationDB := range forRestore {

		datatypedefinitionenumerationDB_ID_atBackupTime := datatypedefinitionenumerationDB.ID
		datatypedefinitionenumerationDB.ID = 0
		query := backRepoDATATYPEDEFINITIONENUMERATION.db.Create(datatypedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[datatypedefinitionenumerationDB.ID] = datatypedefinitionenumerationDB
		BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID[datatypedefinitionenumerationDB_ID_atBackupTime] = datatypedefinitionenumerationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONENUMERATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONENUMERATION>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) RestorePhaseTwo() {

	for _, datatypedefinitionenumerationDB := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionenumerationDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionenumerationDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing SPECIFIEDVALUES field
		if datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64 != 0 {
			datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64 = int64(BackRepoSPECIFIEDVALUESid_atBckpTime_newID[uint(datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Int64)])
			datatypedefinitionenumerationDB.SPECIFIEDVALUESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONENUMERATION.db.Model(datatypedefinitionenumerationDB).Updates(*datatypedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONENUMERATION.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionenumeration := range backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONPtr {
		backRepoDATATYPEDEFINITIONENUMERATION.ResetReversePointersInstance(backRepo, idx, datatypedefinitionenumeration)
	}

	return
}

func (backRepoDATATYPEDEFINITIONENUMERATION *BackRepoDATATYPEDEFINITIONENUMERATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionenumeration *models.DATATYPEDEFINITIONENUMERATION) (Error error) {

	// fetch matching datatypedefinitionenumerationDB
	if datatypedefinitionenumerationDB, ok := backRepoDATATYPEDEFINITIONENUMERATION.Map_DATATYPEDEFINITIONENUMERATIONDBID_DATATYPEDEFINITIONENUMERATIONDB[idx]; ok {
		_ = datatypedefinitionenumerationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONENUMERATIONid_atBckpTime_newID map[uint]uint
