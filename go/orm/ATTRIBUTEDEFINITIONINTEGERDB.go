// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEDEFINITIONINTEGER_sql sql.NullBool
var dummy_ATTRIBUTEDEFINITIONINTEGER_time time.Duration
var dummy_ATTRIBUTEDEFINITIONINTEGER_sort sort.Float64Slice

// ATTRIBUTEDEFINITIONINTEGERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributedefinitionintegerAPI
type ATTRIBUTEDEFINITIONINTEGERAPI struct {
	gorm.Model

	models.ATTRIBUTEDEFINITIONINTEGER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEDEFINITIONINTEGERPointersEncoding ATTRIBUTEDEFINITIONINTEGERPointersEncoding
}

// ATTRIBUTEDEFINITIONINTEGERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEDEFINITIONINTEGERPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field DEFAULTVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFAULTVALUEID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// ATTRIBUTEDEFINITIONINTEGERDB describes a attributedefinitioninteger in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributedefinitionintegerDB
type ATTRIBUTEDEFINITIONINTEGERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributedefinitionintegerDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributedefinitionintegerDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field attributedefinitionintegerDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field attributedefinitionintegerDB.ISEDITABLEAttr
	// provide the sql storage for the boolan
	ISEDITABLEAttr_Data sql.NullBool

	// Declation for basic field attributedefinitionintegerDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field attributedefinitionintegerDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEDEFINITIONINTEGERPointersEncoding
}

// ATTRIBUTEDEFINITIONINTEGERDBs arrays attributedefinitionintegerDBs
// swagger:response attributedefinitionintegerDBsResponse
type ATTRIBUTEDEFINITIONINTEGERDBs []ATTRIBUTEDEFINITIONINTEGERDB

// ATTRIBUTEDEFINITIONINTEGERDBResponse provides response
// swagger:response attributedefinitionintegerDBResponse
type ATTRIBUTEDEFINITIONINTEGERDBResponse struct {
	ATTRIBUTEDEFINITIONINTEGERDB
}

// ATTRIBUTEDEFINITIONINTEGERWOP is a ATTRIBUTEDEFINITIONINTEGER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEDEFINITIONINTEGERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	ISEDITABLEAttr bool `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEDEFINITIONINTEGER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"ISEDITABLEAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoATTRIBUTEDEFINITIONINTEGERStruct struct {
	// stores ATTRIBUTEDEFINITIONINTEGERDB according to their gorm ID
	Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB map[uint]*ATTRIBUTEDEFINITIONINTEGERDB

	// stores ATTRIBUTEDEFINITIONINTEGERDB ID according to ATTRIBUTEDEFINITIONINTEGER address
	Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID map[*models.ATTRIBUTEDEFINITIONINTEGER]uint

	// stores ATTRIBUTEDEFINITIONINTEGER according to their gorm ID
	Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr map[uint]*models.ATTRIBUTEDEFINITIONINTEGER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEDEFINITIONINTEGER.stage
	return
}

func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEDEFINITIONINTEGER.db
}

// GetATTRIBUTEDEFINITIONINTEGERDBFromATTRIBUTEDEFINITIONINTEGERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) GetATTRIBUTEDEFINITIONINTEGERDBFromATTRIBUTEDEFINITIONINTEGERPtr(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) {
	id := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]
	attributedefinitionintegerDB = backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[id]
	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseOne commits all staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributedefinitioninteger := range stage.ATTRIBUTEDEFINITIONINTEGERs {
		backRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseOneInstance(attributedefinitioninteger)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributedefinitioninteger := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr {
		if _, ok := stage.ATTRIBUTEDEFINITIONINTEGERs[attributedefinitioninteger]; !ok {
			backRepoATTRIBUTEDEFINITIONINTEGER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CommitDeleteInstance commits deletion of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CommitDeleteInstance(id uint) (Error error) {

	attributedefinitioninteger := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[id]

	// attributedefinitioninteger is not staged anymore, remove attributedefinitionintegerDB
	attributedefinitionintegerDB := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[id]
	query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Unscoped().Delete(&attributedefinitionintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID, attributedefinitioninteger)
	delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr, id)
	delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB, id)

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseOneInstance commits attributedefinitioninteger staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CommitPhaseOneInstance(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) (Error error) {

	// check if the attributedefinitioninteger is not commited yet
	if _, ok := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]; ok {
		return
	}

	// initiate attributedefinitioninteger
	var attributedefinitionintegerDB ATTRIBUTEDEFINITIONINTEGERDB
	attributedefinitionintegerDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger)

	query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Create(&attributedefinitionintegerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger] = attributedefinitionintegerDB.ID
	backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[attributedefinitionintegerDB.ID] = attributedefinitioninteger
	backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[attributedefinitionintegerDB.ID] = &attributedefinitionintegerDB

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseTwo commits all staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitioninteger := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr {
		backRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseTwoInstance(backRepo, idx, attributedefinitioninteger)
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) (Error error) {

	// fetch matching attributedefinitionintegerDB
	if attributedefinitionintegerDB, ok := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[idx]; ok {

		attributedefinitionintegerDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributedefinitioninteger.ALTERNATIVEID translates to updating the attributedefinitioninteger.ALTERNATIVEIDID
		attributedefinitionintegerDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitioninteger.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[attributedefinitioninteger.ALTERNATIVEID]; ok {
				attributedefinitionintegerDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				attributedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			attributedefinitionintegerDB.ALTERNATIVEIDID.Int64 = 0
			attributedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value attributedefinitioninteger.DEFAULTVALUE translates to updating the attributedefinitioninteger.DEFAULTVALUEID
		attributedefinitionintegerDB.DEFAULTVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitioninteger.DEFAULTVALUE != nil {
			if DEFAULTVALUEId, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[attributedefinitioninteger.DEFAULTVALUE]; ok {
				attributedefinitionintegerDB.DEFAULTVALUEID.Int64 = int64(DEFAULTVALUEId)
				attributedefinitionintegerDB.DEFAULTVALUEID.Valid = true
			}
		} else {
			attributedefinitionintegerDB.DEFAULTVALUEID.Int64 = 0
			attributedefinitionintegerDB.DEFAULTVALUEID.Valid = true
		}

		// commit pointer value attributedefinitioninteger.TYPE translates to updating the attributedefinitioninteger.TYPEID
		attributedefinitionintegerDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitioninteger.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[attributedefinitioninteger.TYPE]; ok {
				attributedefinitionintegerDB.TYPEID.Int64 = int64(TYPEId)
				attributedefinitionintegerDB.TYPEID.Valid = true
			}
		} else {
			attributedefinitionintegerDB.TYPEID.Int64 = 0
			attributedefinitionintegerDB.TYPEID.Valid = true
		}

		query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Save(&attributedefinitionintegerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEDEFINITIONINTEGER intance %s", attributedefinitioninteger.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CheckoutPhaseOne() (Error error) {

	attributedefinitionintegerDBArray := make([]ATTRIBUTEDEFINITIONINTEGERDB, 0)
	query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Find(&attributedefinitionintegerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributedefinitionintegerInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEDEFINITIONINTEGER]any)
	for key, value := range backRepoATTRIBUTEDEFINITIONINTEGER.stage.ATTRIBUTEDEFINITIONINTEGERs {
		attributedefinitionintegerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributedefinitionintegerDB := range attributedefinitionintegerDBArray {
		backRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseOneInstance(&attributedefinitionintegerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributedefinitioninteger, ok := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[attributedefinitionintegerDB.ID]
		if ok {
			delete(attributedefinitionintegerInstancesToBeRemovedFromTheStage, attributedefinitioninteger)
		}
	}

	// remove from stage and back repo's 3 maps all attributedefinitionintegers that are not in the checkout
	for attributedefinitioninteger := range attributedefinitionintegerInstancesToBeRemovedFromTheStage {
		attributedefinitioninteger.Unstage(backRepoATTRIBUTEDEFINITIONINTEGER.GetStage())

		// remove instance from the back repo 3 maps
		attributedefinitionintegerID := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]
		delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID, attributedefinitioninteger)
		delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB, attributedefinitionintegerID)
		delete(backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr, attributedefinitionintegerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributedefinitionintegerDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributedefinitionintegerDB
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CheckoutPhaseOneInstance(attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) (Error error) {

	attributedefinitioninteger, ok := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[attributedefinitionintegerDB.ID]
	if !ok {
		attributedefinitioninteger = new(models.ATTRIBUTEDEFINITIONINTEGER)

		backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[attributedefinitionintegerDB.ID] = attributedefinitioninteger
		backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger] = attributedefinitionintegerDB.ID

		// append model store with the new element
		attributedefinitioninteger.Name = attributedefinitionintegerDB.Name_Data.String
		attributedefinitioninteger.Stage(backRepoATTRIBUTEDEFINITIONINTEGER.GetStage())
	}
	attributedefinitionintegerDB.CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributedefinitioninteger.Stage(backRepoATTRIBUTEDEFINITIONINTEGER.GetStage())

	// preserve pointer to attributedefinitionintegerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB)[attributedefinitionintegerDB hold variable pointers
	attributedefinitionintegerDB_Data := *attributedefinitionintegerDB
	preservedPtrToATTRIBUTEDEFINITIONINTEGER := &attributedefinitionintegerDB_Data
	backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[attributedefinitionintegerDB.ID] = preservedPtrToATTRIBUTEDEFINITIONINTEGER

	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributedefinitionintegerDB := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB {
		backRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseTwoInstance(backRepo, attributedefinitionintegerDB)
	}
	return
}

// BackRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) (Error error) {

	attributedefinitioninteger := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr[attributedefinitionintegerDB.ID]

	attributedefinitionintegerDB.DecodePointers(backRepo, attributedefinitioninteger)

	return
}

func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) DecodePointers(backRepo *BackRepoStruct, attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	attributedefinitioninteger.ALTERNATIVEID = nil
	if attributedefinitionintegerDB.ALTERNATIVEIDID.Int64 != 0 {
		attributedefinitioninteger.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(attributedefinitionintegerDB.ALTERNATIVEIDID.Int64)]
	}
	// DEFAULTVALUE field
	attributedefinitioninteger.DEFAULTVALUE = nil
	if attributedefinitionintegerDB.DEFAULTVALUEID.Int64 != 0 {
		attributedefinitioninteger.DEFAULTVALUE = backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[uint(attributedefinitionintegerDB.DEFAULTVALUEID.Int64)]
	}
	// TYPE field
	attributedefinitioninteger.TYPE = nil
	if attributedefinitionintegerDB.TYPEID.Int64 != 0 {
		attributedefinitioninteger.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(attributedefinitionintegerDB.TYPEID.Int64)]
	}
	return
}

// CommitATTRIBUTEDEFINITIONINTEGER allows commit of a single attributedefinitioninteger (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) {
	backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseOneInstance(attributedefinitioninteger)
	if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]; ok {
		backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.CommitPhaseTwoInstance(backRepo, id, attributedefinitioninteger)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEDEFINITIONINTEGER allows checkout of a single attributedefinitioninteger (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) {
	// check if the attributedefinitioninteger is staged
	if _, ok := backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERPtr_ATTRIBUTEDEFINITIONINTEGERDBID[attributedefinitioninteger]; ok {
			var attributedefinitionintegerDB ATTRIBUTEDEFINITIONINTEGERDB
			attributedefinitionintegerDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.db.First(&attributedefinitionintegerDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEDEFINITIONINTEGER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseOneInstance(&attributedefinitionintegerDB)
			backRepo.BackRepoATTRIBUTEDEFINITIONINTEGER.CheckoutPhaseTwoInstance(backRepo, &attributedefinitionintegerDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) {
	// insertion point for fields commit

	attributedefinitionintegerDB.Name_Data.String = attributedefinitioninteger.Name
	attributedefinitionintegerDB.Name_Data.Valid = true

	attributedefinitionintegerDB.DESCAttr_Data.String = attributedefinitioninteger.DESCAttr
	attributedefinitionintegerDB.DESCAttr_Data.Valid = true

	attributedefinitionintegerDB.IDENTIFIERAttr_Data.String = attributedefinitioninteger.IDENTIFIERAttr
	attributedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool = attributedefinitioninteger.ISEDITABLEAttr
	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionintegerDB.LASTCHANGEAttr_Data.String = attributedefinitioninteger.LASTCHANGEAttr
	attributedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionintegerDB.LONGNAMEAttr_Data.String = attributedefinitioninteger.LONGNAMEAttr
	attributedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER_WOP
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGER_WOP(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER_WOP) {
	// insertion point for fields commit

	attributedefinitionintegerDB.Name_Data.String = attributedefinitioninteger.Name
	attributedefinitionintegerDB.Name_Data.Valid = true

	attributedefinitionintegerDB.DESCAttr_Data.String = attributedefinitioninteger.DESCAttr
	attributedefinitionintegerDB.DESCAttr_Data.Valid = true

	attributedefinitionintegerDB.IDENTIFIERAttr_Data.String = attributedefinitioninteger.IDENTIFIERAttr
	attributedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool = attributedefinitioninteger.ISEDITABLEAttr
	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionintegerDB.LASTCHANGEAttr_Data.String = attributedefinitioninteger.LASTCHANGEAttr
	attributedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionintegerDB.LONGNAMEAttr_Data.String = attributedefinitioninteger.LONGNAMEAttr
	attributedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGERWOP
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGERWOP(attributedefinitioninteger *ATTRIBUTEDEFINITIONINTEGERWOP) {
	// insertion point for fields commit

	attributedefinitionintegerDB.Name_Data.String = attributedefinitioninteger.Name
	attributedefinitionintegerDB.Name_Data.Valid = true

	attributedefinitionintegerDB.DESCAttr_Data.String = attributedefinitioninteger.DESCAttr
	attributedefinitionintegerDB.DESCAttr_Data.Valid = true

	attributedefinitionintegerDB.IDENTIFIERAttr_Data.String = attributedefinitioninteger.IDENTIFIERAttr
	attributedefinitionintegerDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool = attributedefinitioninteger.ISEDITABLEAttr
	attributedefinitionintegerDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionintegerDB.LASTCHANGEAttr_Data.String = attributedefinitioninteger.LASTCHANGEAttr
	attributedefinitionintegerDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionintegerDB.LONGNAMEAttr_Data.String = attributedefinitioninteger.LONGNAMEAttr
	attributedefinitionintegerDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGER
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGER(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitioninteger.Name = attributedefinitionintegerDB.Name_Data.String
	attributedefinitioninteger.DESCAttr = attributedefinitionintegerDB.DESCAttr_Data.String
	attributedefinitioninteger.IDENTIFIERAttr = attributedefinitionintegerDB.IDENTIFIERAttr_Data.String
	attributedefinitioninteger.ISEDITABLEAttr = attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool
	attributedefinitioninteger.LASTCHANGEAttr = attributedefinitionintegerDB.LASTCHANGEAttr_Data.String
	attributedefinitioninteger.LONGNAMEAttr = attributedefinitionintegerDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGER_WOP
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGER_WOP(attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitioninteger.Name = attributedefinitionintegerDB.Name_Data.String
	attributedefinitioninteger.DESCAttr = attributedefinitionintegerDB.DESCAttr_Data.String
	attributedefinitioninteger.IDENTIFIERAttr = attributedefinitionintegerDB.IDENTIFIERAttr_Data.String
	attributedefinitioninteger.ISEDITABLEAttr = attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool
	attributedefinitioninteger.LASTCHANGEAttr = attributedefinitionintegerDB.LASTCHANGEAttr_Data.String
	attributedefinitioninteger.LONGNAMEAttr = attributedefinitionintegerDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGERWOP
func (attributedefinitionintegerDB *ATTRIBUTEDEFINITIONINTEGERDB) CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGERWOP(attributedefinitioninteger *ATTRIBUTEDEFINITIONINTEGERWOP) {
	attributedefinitioninteger.ID = int(attributedefinitionintegerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitioninteger.Name = attributedefinitionintegerDB.Name_Data.String
	attributedefinitioninteger.DESCAttr = attributedefinitionintegerDB.DESCAttr_Data.String
	attributedefinitioninteger.IDENTIFIERAttr = attributedefinitionintegerDB.IDENTIFIERAttr_Data.String
	attributedefinitioninteger.ISEDITABLEAttr = attributedefinitionintegerDB.ISEDITABLEAttr_Data.Bool
	attributedefinitioninteger.LASTCHANGEAttr = attributedefinitionintegerDB.LASTCHANGEAttr_Data.String
	attributedefinitioninteger.LONGNAMEAttr = attributedefinitionintegerDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONINTEGERDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONINTEGERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONINTEGERDB, 0)
	for _, attributedefinitionintegerDB := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB {
		forBackup = append(forBackup, attributedefinitionintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEDEFINITIONINTEGER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEDEFINITIONINTEGER file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONINTEGERDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONINTEGERDB, 0)
	for _, attributedefinitionintegerDB := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB {
		forBackup = append(forBackup, attributedefinitionintegerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEDEFINITIONINTEGER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEDEFINITIONINTEGER_Fields, -1)
	for _, attributedefinitionintegerDB := range forBackup {

		var attributedefinitionintegerWOP ATTRIBUTEDEFINITIONINTEGERWOP
		attributedefinitionintegerDB.CopyBasicFieldsToATTRIBUTEDEFINITIONINTEGERWOP(&attributedefinitionintegerWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributedefinitionintegerWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEDEFINITIONINTEGER" sheet all ATTRIBUTEDEFINITIONINTEGERDB instances
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEDEFINITIONINTEGER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEDEFINITIONINTEGER.rowVisitorATTRIBUTEDEFINITIONINTEGER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) rowVisitorATTRIBUTEDEFINITIONINTEGER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributedefinitionintegerWOP ATTRIBUTEDEFINITIONINTEGERWOP
		row.ReadStruct(&attributedefinitionintegerWOP)

		// add the unmarshalled struct to the stage
		attributedefinitionintegerDB := new(ATTRIBUTEDEFINITIONINTEGERDB)
		attributedefinitionintegerDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONINTEGERWOP(&attributedefinitionintegerWOP)

		attributedefinitionintegerDB_ID_atBackupTime := attributedefinitionintegerDB.ID
		attributedefinitionintegerDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Create(attributedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[attributedefinitionintegerDB.ID] = attributedefinitionintegerDB
		BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID[attributedefinitionintegerDB_ID_atBackupTime] = attributedefinitionintegerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEDEFINITIONINTEGERDB.json" in dirPath that stores an array
// of ATTRIBUTEDEFINITIONINTEGERDB and stores it in the database
// the map BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONINTEGERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEDEFINITIONINTEGER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEDEFINITIONINTEGERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB
	for _, attributedefinitionintegerDB := range forRestore {

		attributedefinitionintegerDB_ID_atBackupTime := attributedefinitionintegerDB.ID
		attributedefinitionintegerDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Create(attributedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[attributedefinitionintegerDB.ID] = attributedefinitionintegerDB
		BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID[attributedefinitionintegerDB_ID_atBackupTime] = attributedefinitionintegerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEDEFINITIONINTEGER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEDEFINITIONINTEGER>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) RestorePhaseTwo() {

	for _, attributedefinitionintegerDB := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB {

		// next line of code is to avert unused variable compilation error
		_ = attributedefinitionintegerDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if attributedefinitionintegerDB.ALTERNATIVEIDID.Int64 != 0 {
			attributedefinitionintegerDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(attributedefinitionintegerDB.ALTERNATIVEIDID.Int64)])
			attributedefinitionintegerDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing DEFAULTVALUE field
		if attributedefinitionintegerDB.DEFAULTVALUEID.Int64 != 0 {
			attributedefinitionintegerDB.DEFAULTVALUEID.Int64 = int64(BackRepoDEFAULTVALUEid_atBckpTime_newID[uint(attributedefinitionintegerDB.DEFAULTVALUEID.Int64)])
			attributedefinitionintegerDB.DEFAULTVALUEID.Valid = true
		}

		// reindexing TYPE field
		if attributedefinitionintegerDB.TYPEID.Int64 != 0 {
			attributedefinitionintegerDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(attributedefinitionintegerDB.TYPEID.Int64)])
			attributedefinitionintegerDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEDEFINITIONINTEGER.db.Model(attributedefinitionintegerDB).Updates(*attributedefinitionintegerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEDEFINITIONINTEGER.ResetReversePointers commits all staged instances of ATTRIBUTEDEFINITIONINTEGER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitioninteger := range backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERPtr {
		backRepoATTRIBUTEDEFINITIONINTEGER.ResetReversePointersInstance(backRepo, idx, attributedefinitioninteger)
	}

	return
}

func (backRepoATTRIBUTEDEFINITIONINTEGER *BackRepoATTRIBUTEDEFINITIONINTEGERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributedefinitioninteger *models.ATTRIBUTEDEFINITIONINTEGER) (Error error) {

	// fetch matching attributedefinitionintegerDB
	if attributedefinitionintegerDB, ok := backRepoATTRIBUTEDEFINITIONINTEGER.Map_ATTRIBUTEDEFINITIONINTEGERDBID_ATTRIBUTEDEFINITIONINTEGERDB[idx]; ok {
		_ = attributedefinitionintegerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEDEFINITIONINTEGERid_atBckpTime_newID map[uint]uint
