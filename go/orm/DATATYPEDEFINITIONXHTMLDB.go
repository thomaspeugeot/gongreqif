// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPEDEFINITIONXHTML_sql sql.NullBool
var dummy_DATATYPEDEFINITIONXHTML_time time.Duration
var dummy_DATATYPEDEFINITIONXHTML_sort sort.Float64Slice

// DATATYPEDEFINITIONXHTMLAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatypedefinitionxhtmlAPI
type DATATYPEDEFINITIONXHTMLAPI struct {
	gorm.Model

	models.DATATYPEDEFINITIONXHTML_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPEDEFINITIONXHTMLPointersEncoding DATATYPEDEFINITIONXHTMLPointersEncoding
}

// DATATYPEDEFINITIONXHTMLPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPEDEFINITIONXHTMLPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64
}

// DATATYPEDEFINITIONXHTMLDB describes a datatypedefinitionxhtml in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatypedefinitionxhtmlDB
type DATATYPEDEFINITIONXHTMLDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatypedefinitionxhtmlDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatypedefinitionxhtmlDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionxhtmlDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionxhtmlDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field datatypedefinitionxhtmlDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPEDEFINITIONXHTMLPointersEncoding
}

// DATATYPEDEFINITIONXHTMLDBs arrays datatypedefinitionxhtmlDBs
// swagger:response datatypedefinitionxhtmlDBsResponse
type DATATYPEDEFINITIONXHTMLDBs []DATATYPEDEFINITIONXHTMLDB

// DATATYPEDEFINITIONXHTMLDBResponse provides response
// swagger:response datatypedefinitionxhtmlDBResponse
type DATATYPEDEFINITIONXHTMLDBResponse struct {
	DATATYPEDEFINITIONXHTMLDB
}

// DATATYPEDEFINITIONXHTMLWOP is a DATATYPEDEFINITIONXHTML without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPEDEFINITIONXHTMLWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var DATATYPEDEFINITIONXHTML_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoDATATYPEDEFINITIONXHTMLStruct struct {
	// stores DATATYPEDEFINITIONXHTMLDB according to their gorm ID
	Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB map[uint]*DATATYPEDEFINITIONXHTMLDB

	// stores DATATYPEDEFINITIONXHTMLDB ID according to DATATYPEDEFINITIONXHTML address
	Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID map[*models.DATATYPEDEFINITIONXHTML]uint

	// stores DATATYPEDEFINITIONXHTML according to their gorm ID
	Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr map[uint]*models.DATATYPEDEFINITIONXHTML

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPEDEFINITIONXHTML.stage
	return
}

func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) GetDB() *gorm.DB {
	return backRepoDATATYPEDEFINITIONXHTML.db
}

// GetDATATYPEDEFINITIONXHTMLDBFromDATATYPEDEFINITIONXHTMLPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) GetDATATYPEDEFINITIONXHTMLDBFromDATATYPEDEFINITIONXHTMLPtr(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) {
	id := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]
	datatypedefinitionxhtmlDB = backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[id]
	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseOne commits all staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatypedefinitionxhtml := range stage.DATATYPEDEFINITIONXHTMLs {
		backRepoDATATYPEDEFINITIONXHTML.CommitPhaseOneInstance(datatypedefinitionxhtml)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatypedefinitionxhtml := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr {
		if _, ok := stage.DATATYPEDEFINITIONXHTMLs[datatypedefinitionxhtml]; !ok {
			backRepoDATATYPEDEFINITIONXHTML.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CommitDeleteInstance commits deletion of DATATYPEDEFINITIONXHTML to the BackRepo
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CommitDeleteInstance(id uint) (Error error) {

	datatypedefinitionxhtml := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[id]

	// datatypedefinitionxhtml is not staged anymore, remove datatypedefinitionxhtmlDB
	datatypedefinitionxhtmlDB := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[id]
	query := backRepoDATATYPEDEFINITIONXHTML.db.Unscoped().Delete(&datatypedefinitionxhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID, datatypedefinitionxhtml)
	delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr, id)
	delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB, id)

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseOneInstance commits datatypedefinitionxhtml staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CommitPhaseOneInstance(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) (Error error) {

	// check if the datatypedefinitionxhtml is not commited yet
	if _, ok := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]; ok {
		return
	}

	// initiate datatypedefinitionxhtml
	var datatypedefinitionxhtmlDB DATATYPEDEFINITIONXHTMLDB
	datatypedefinitionxhtmlDB.CopyBasicFieldsFromDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml)

	query := backRepoDATATYPEDEFINITIONXHTML.db.Create(&datatypedefinitionxhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml] = datatypedefinitionxhtmlDB.ID
	backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[datatypedefinitionxhtmlDB.ID] = datatypedefinitionxhtml
	backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[datatypedefinitionxhtmlDB.ID] = &datatypedefinitionxhtmlDB

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseTwo commits all staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionxhtml := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr {
		backRepoDATATYPEDEFINITIONXHTML.CommitPhaseTwoInstance(backRepo, idx, datatypedefinitionxhtml)
	}

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) (Error error) {

	// fetch matching datatypedefinitionxhtmlDB
	if datatypedefinitionxhtmlDB, ok := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[idx]; ok {

		datatypedefinitionxhtmlDB.CopyBasicFieldsFromDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value datatypedefinitionxhtml.ALTERNATIVEID translates to updating the datatypedefinitionxhtml.ALTERNATIVEIDID
		datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if datatypedefinitionxhtml.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[datatypedefinitionxhtml.ALTERNATIVEID]; ok {
				datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = 0
			datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
		}

		query := backRepoDATATYPEDEFINITIONXHTML.db.Save(&datatypedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPEDEFINITIONXHTML intance %s", datatypedefinitionxhtml.Name))
		return err
	}

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CheckoutPhaseOne() (Error error) {

	datatypedefinitionxhtmlDBArray := make([]DATATYPEDEFINITIONXHTMLDB, 0)
	query := backRepoDATATYPEDEFINITIONXHTML.db.Find(&datatypedefinitionxhtmlDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatypedefinitionxhtmlInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPEDEFINITIONXHTML]any)
	for key, value := range backRepoDATATYPEDEFINITIONXHTML.stage.DATATYPEDEFINITIONXHTMLs {
		datatypedefinitionxhtmlInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatypedefinitionxhtmlDB := range datatypedefinitionxhtmlDBArray {
		backRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseOneInstance(&datatypedefinitionxhtmlDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatypedefinitionxhtml, ok := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[datatypedefinitionxhtmlDB.ID]
		if ok {
			delete(datatypedefinitionxhtmlInstancesToBeRemovedFromTheStage, datatypedefinitionxhtml)
		}
	}

	// remove from stage and back repo's 3 maps all datatypedefinitionxhtmls that are not in the checkout
	for datatypedefinitionxhtml := range datatypedefinitionxhtmlInstancesToBeRemovedFromTheStage {
		datatypedefinitionxhtml.Unstage(backRepoDATATYPEDEFINITIONXHTML.GetStage())

		// remove instance from the back repo 3 maps
		datatypedefinitionxhtmlID := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]
		delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID, datatypedefinitionxhtml)
		delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB, datatypedefinitionxhtmlID)
		delete(backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr, datatypedefinitionxhtmlID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatypedefinitionxhtmlDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatypedefinitionxhtmlDB
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CheckoutPhaseOneInstance(datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) (Error error) {

	datatypedefinitionxhtml, ok := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[datatypedefinitionxhtmlDB.ID]
	if !ok {
		datatypedefinitionxhtml = new(models.DATATYPEDEFINITIONXHTML)

		backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[datatypedefinitionxhtmlDB.ID] = datatypedefinitionxhtml
		backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml] = datatypedefinitionxhtmlDB.ID

		// append model store with the new element
		datatypedefinitionxhtml.Name = datatypedefinitionxhtmlDB.Name_Data.String
		datatypedefinitionxhtml.Stage(backRepoDATATYPEDEFINITIONXHTML.GetStage())
	}
	datatypedefinitionxhtmlDB.CopyBasicFieldsToDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatypedefinitionxhtml.Stage(backRepoDATATYPEDEFINITIONXHTML.GetStage())

	// preserve pointer to datatypedefinitionxhtmlDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB)[datatypedefinitionxhtmlDB hold variable pointers
	datatypedefinitionxhtmlDB_Data := *datatypedefinitionxhtmlDB
	preservedPtrToDATATYPEDEFINITIONXHTML := &datatypedefinitionxhtmlDB_Data
	backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[datatypedefinitionxhtmlDB.ID] = preservedPtrToDATATYPEDEFINITIONXHTML

	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseTwo Checkouts all staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatypedefinitionxhtmlDB := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB {
		backRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseTwoInstance(backRepo, datatypedefinitionxhtmlDB)
	}
	return
}

// BackRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) (Error error) {

	datatypedefinitionxhtml := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr[datatypedefinitionxhtmlDB.ID]

	datatypedefinitionxhtmlDB.DecodePointers(backRepo, datatypedefinitionxhtml)

	return
}

func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) DecodePointers(backRepo *BackRepoStruct, datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	datatypedefinitionxhtml.ALTERNATIVEID = nil
	if datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 != 0 {
		datatypedefinitionxhtml.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64)]
	}
	return
}

// CommitDATATYPEDEFINITIONXHTML allows commit of a single datatypedefinitionxhtml (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) {
	backRepo.BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseOneInstance(datatypedefinitionxhtml)
	if id, ok := backRepo.BackRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]; ok {
		backRepo.BackRepoDATATYPEDEFINITIONXHTML.CommitPhaseTwoInstance(backRepo, id, datatypedefinitionxhtml)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPEDEFINITIONXHTML allows checkout of a single datatypedefinitionxhtml (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) {
	// check if the datatypedefinitionxhtml is staged
	if _, ok := backRepo.BackRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]; ok {

		if id, ok := backRepo.BackRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLPtr_DATATYPEDEFINITIONXHTMLDBID[datatypedefinitionxhtml]; ok {
			var datatypedefinitionxhtmlDB DATATYPEDEFINITIONXHTMLDB
			datatypedefinitionxhtmlDB.ID = id

			if err := backRepo.BackRepoDATATYPEDEFINITIONXHTML.db.First(&datatypedefinitionxhtmlDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPEDEFINITIONXHTML : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseOneInstance(&datatypedefinitionxhtmlDB)
			backRepo.BackRepoDATATYPEDEFINITIONXHTML.CheckoutPhaseTwoInstance(backRepo, &datatypedefinitionxhtmlDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPEDEFINITIONXHTML
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsFromDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) {
	// insertion point for fields commit

	datatypedefinitionxhtmlDB.Name_Data.String = datatypedefinitionxhtml.Name
	datatypedefinitionxhtmlDB.Name_Data.Valid = true

	datatypedefinitionxhtmlDB.DESCAttr_Data.String = datatypedefinitionxhtml.DESCAttr
	datatypedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = datatypedefinitionxhtml.IDENTIFIERAttr
	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = datatypedefinitionxhtml.LASTCHANGEAttr
	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String = datatypedefinitionxhtml.LONGNAMEAttr
	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONXHTML_WOP
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsFromDATATYPEDEFINITIONXHTML_WOP(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML_WOP) {
	// insertion point for fields commit

	datatypedefinitionxhtmlDB.Name_Data.String = datatypedefinitionxhtml.Name
	datatypedefinitionxhtmlDB.Name_Data.Valid = true

	datatypedefinitionxhtmlDB.DESCAttr_Data.String = datatypedefinitionxhtml.DESCAttr
	datatypedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = datatypedefinitionxhtml.IDENTIFIERAttr
	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = datatypedefinitionxhtml.LASTCHANGEAttr
	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String = datatypedefinitionxhtml.LONGNAMEAttr
	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPEDEFINITIONXHTMLWOP
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsFromDATATYPEDEFINITIONXHTMLWOP(datatypedefinitionxhtml *DATATYPEDEFINITIONXHTMLWOP) {
	// insertion point for fields commit

	datatypedefinitionxhtmlDB.Name_Data.String = datatypedefinitionxhtml.Name
	datatypedefinitionxhtmlDB.Name_Data.Valid = true

	datatypedefinitionxhtmlDB.DESCAttr_Data.String = datatypedefinitionxhtml.DESCAttr
	datatypedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = datatypedefinitionxhtml.IDENTIFIERAttr
	datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = datatypedefinitionxhtml.LASTCHANGEAttr
	datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String = datatypedefinitionxhtml.LONGNAMEAttr
	datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToDATATYPEDEFINITIONXHTML
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsToDATATYPEDEFINITIONXHTML(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionxhtml.Name = datatypedefinitionxhtmlDB.Name_Data.String
	datatypedefinitionxhtml.DESCAttr = datatypedefinitionxhtmlDB.DESCAttr_Data.String
	datatypedefinitionxhtml.IDENTIFIERAttr = datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	datatypedefinitionxhtml.LASTCHANGEAttr = datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	datatypedefinitionxhtml.LONGNAMEAttr = datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONXHTML_WOP
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsToDATATYPEDEFINITIONXHTML_WOP(datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionxhtml.Name = datatypedefinitionxhtmlDB.Name_Data.String
	datatypedefinitionxhtml.DESCAttr = datatypedefinitionxhtmlDB.DESCAttr_Data.String
	datatypedefinitionxhtml.IDENTIFIERAttr = datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	datatypedefinitionxhtml.LASTCHANGEAttr = datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	datatypedefinitionxhtml.LONGNAMEAttr = datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToDATATYPEDEFINITIONXHTMLWOP
func (datatypedefinitionxhtmlDB *DATATYPEDEFINITIONXHTMLDB) CopyBasicFieldsToDATATYPEDEFINITIONXHTMLWOP(datatypedefinitionxhtml *DATATYPEDEFINITIONXHTMLWOP) {
	datatypedefinitionxhtml.ID = int(datatypedefinitionxhtmlDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatypedefinitionxhtml.Name = datatypedefinitionxhtmlDB.Name_Data.String
	datatypedefinitionxhtml.DESCAttr = datatypedefinitionxhtmlDB.DESCAttr_Data.String
	datatypedefinitionxhtml.IDENTIFIERAttr = datatypedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	datatypedefinitionxhtml.LASTCHANGEAttr = datatypedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	datatypedefinitionxhtml.LONGNAMEAttr = datatypedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONXHTMLDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONXHTMLDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONXHTMLDB, 0)
	for _, datatypedefinitionxhtmlDB := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB {
		forBackup = append(forBackup, datatypedefinitionxhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPEDEFINITIONXHTML ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPEDEFINITIONXHTML file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPEDEFINITIONXHTMLDB instances in the backrepo
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPEDEFINITIONXHTMLDB, 0)
	for _, datatypedefinitionxhtmlDB := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB {
		forBackup = append(forBackup, datatypedefinitionxhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPEDEFINITIONXHTML")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPEDEFINITIONXHTML_Fields, -1)
	for _, datatypedefinitionxhtmlDB := range forBackup {

		var datatypedefinitionxhtmlWOP DATATYPEDEFINITIONXHTMLWOP
		datatypedefinitionxhtmlDB.CopyBasicFieldsToDATATYPEDEFINITIONXHTMLWOP(&datatypedefinitionxhtmlWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatypedefinitionxhtmlWOP, -1)
	}
}

// RestoreXL from the "DATATYPEDEFINITIONXHTML" sheet all DATATYPEDEFINITIONXHTMLDB instances
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPEDEFINITIONXHTML"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPEDEFINITIONXHTML.rowVisitorDATATYPEDEFINITIONXHTML)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) rowVisitorDATATYPEDEFINITIONXHTML(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatypedefinitionxhtmlWOP DATATYPEDEFINITIONXHTMLWOP
		row.ReadStruct(&datatypedefinitionxhtmlWOP)

		// add the unmarshalled struct to the stage
		datatypedefinitionxhtmlDB := new(DATATYPEDEFINITIONXHTMLDB)
		datatypedefinitionxhtmlDB.CopyBasicFieldsFromDATATYPEDEFINITIONXHTMLWOP(&datatypedefinitionxhtmlWOP)

		datatypedefinitionxhtmlDB_ID_atBackupTime := datatypedefinitionxhtmlDB.ID
		datatypedefinitionxhtmlDB.ID = 0
		query := backRepoDATATYPEDEFINITIONXHTML.db.Create(datatypedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[datatypedefinitionxhtmlDB.ID] = datatypedefinitionxhtmlDB
		BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID[datatypedefinitionxhtmlDB_ID_atBackupTime] = datatypedefinitionxhtmlDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPEDEFINITIONXHTMLDB.json" in dirPath that stores an array
// of DATATYPEDEFINITIONXHTMLDB and stores it in the database
// the map BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPEDEFINITIONXHTMLDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPEDEFINITIONXHTML file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPEDEFINITIONXHTMLDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB
	for _, datatypedefinitionxhtmlDB := range forRestore {

		datatypedefinitionxhtmlDB_ID_atBackupTime := datatypedefinitionxhtmlDB.ID
		datatypedefinitionxhtmlDB.ID = 0
		query := backRepoDATATYPEDEFINITIONXHTML.db.Create(datatypedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[datatypedefinitionxhtmlDB.ID] = datatypedefinitionxhtmlDB
		BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID[datatypedefinitionxhtmlDB_ID_atBackupTime] = datatypedefinitionxhtmlDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPEDEFINITIONXHTML file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPEDEFINITIONXHTML>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) RestorePhaseTwo() {

	for _, datatypedefinitionxhtmlDB := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB {

		// next line of code is to avert unused variable compilation error
		_ = datatypedefinitionxhtmlDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 != 0 {
			datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Int64)])
			datatypedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDATATYPEDEFINITIONXHTML.db.Model(datatypedefinitionxhtmlDB).Updates(*datatypedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPEDEFINITIONXHTML.ResetReversePointers commits all staged instances of DATATYPEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatypedefinitionxhtml := range backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLPtr {
		backRepoDATATYPEDEFINITIONXHTML.ResetReversePointersInstance(backRepo, idx, datatypedefinitionxhtml)
	}

	return
}

func (backRepoDATATYPEDEFINITIONXHTML *BackRepoDATATYPEDEFINITIONXHTMLStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatypedefinitionxhtml *models.DATATYPEDEFINITIONXHTML) (Error error) {

	// fetch matching datatypedefinitionxhtmlDB
	if datatypedefinitionxhtmlDB, ok := backRepoDATATYPEDEFINITIONXHTML.Map_DATATYPEDEFINITIONXHTMLDBID_DATATYPEDEFINITIONXHTMLDB[idx]; ok {
		_ = datatypedefinitionxhtmlDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPEDEFINITIONXHTMLid_atBckpTime_newID map[uint]uint
