// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQIFTYPE_sql sql.NullBool
var dummy_REQIFTYPE_time time.Duration
var dummy_REQIFTYPE_sort sort.Float64Slice

// REQIFTYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reqiftypeAPI
type REQIFTYPEAPI struct {
	gorm.Model

	models.REQIFTYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQIFTYPEPointersEncoding REQIFTYPEPointersEncoding
}

// REQIFTYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQIFTYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// REQIFTYPEDB describes a reqiftype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reqiftypeDB
type REQIFTYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field reqiftypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF
	DATATYPEDEFINITIONBOOLEANREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQIFTYPEPointersEncoding
}

// REQIFTYPEDBs arrays reqiftypeDBs
// swagger:response reqiftypeDBsResponse
type REQIFTYPEDBs []REQIFTYPEDB

// REQIFTYPEDBResponse provides response
// swagger:response reqiftypeDBResponse
type REQIFTYPEDBResponse struct {
	REQIFTYPEDB
}

// REQIFTYPEWOP is a REQIFTYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQIFTYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DATATYPEDEFINITIONBOOLEANREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var REQIFTYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DATATYPEDEFINITIONBOOLEANREF",
}

type BackRepoREQIFTYPEStruct struct {
	// stores REQIFTYPEDB according to their gorm ID
	Map_REQIFTYPEDBID_REQIFTYPEDB map[uint]*REQIFTYPEDB

	// stores REQIFTYPEDB ID according to REQIFTYPE address
	Map_REQIFTYPEPtr_REQIFTYPEDBID map[*models.REQIFTYPE]uint

	// stores REQIFTYPE according to their gorm ID
	Map_REQIFTYPEDBID_REQIFTYPEPtr map[uint]*models.REQIFTYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoREQIFTYPE.stage
	return
}

func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) GetDB() *gorm.DB {
	return backRepoREQIFTYPE.db
}

// GetREQIFTYPEDBFromREQIFTYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) GetREQIFTYPEDBFromREQIFTYPEPtr(reqiftype *models.REQIFTYPE) (reqiftypeDB *REQIFTYPEDB) {
	id := backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]
	reqiftypeDB = backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[id]
	return
}

// BackRepoREQIFTYPE.CommitPhaseOne commits all staged instances of REQIFTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for reqiftype := range stage.REQIFTYPEs {
		backRepoREQIFTYPE.CommitPhaseOneInstance(reqiftype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, reqiftype := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr {
		if _, ok := stage.REQIFTYPEs[reqiftype]; !ok {
			backRepoREQIFTYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQIFTYPE.CommitDeleteInstance commits deletion of REQIFTYPE to the BackRepo
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	reqiftype := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[id]

	// reqiftype is not staged anymore, remove reqiftypeDB
	reqiftypeDB := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[id]
	query := backRepoREQIFTYPE.db.Unscoped().Delete(&reqiftypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID, reqiftype)
	delete(backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr, id)
	delete(backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB, id)

	return
}

// BackRepoREQIFTYPE.CommitPhaseOneInstance commits reqiftype staged instances of REQIFTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CommitPhaseOneInstance(reqiftype *models.REQIFTYPE) (Error error) {

	// check if the reqiftype is not commited yet
	if _, ok := backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]; ok {
		return
	}

	// initiate reqiftype
	var reqiftypeDB REQIFTYPEDB
	reqiftypeDB.CopyBasicFieldsFromREQIFTYPE(reqiftype)

	query := backRepoREQIFTYPE.db.Create(&reqiftypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype] = reqiftypeDB.ID
	backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[reqiftypeDB.ID] = reqiftype
	backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[reqiftypeDB.ID] = &reqiftypeDB

	return
}

// BackRepoREQIFTYPE.CommitPhaseTwo commits all staged instances of REQIFTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, reqiftype := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr {
		backRepoREQIFTYPE.CommitPhaseTwoInstance(backRepo, idx, reqiftype)
	}

	return
}

// BackRepoREQIFTYPE.CommitPhaseTwoInstance commits {{structname }} of models.REQIFTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, reqiftype *models.REQIFTYPE) (Error error) {

	// fetch matching reqiftypeDB
	if reqiftypeDB, ok := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[idx]; ok {

		reqiftypeDB.CopyBasicFieldsFromREQIFTYPE(reqiftype)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoREQIFTYPE.db.Save(&reqiftypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQIFTYPE intance %s", reqiftype.Name))
		return err
	}

	return
}

// BackRepoREQIFTYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CheckoutPhaseOne() (Error error) {

	reqiftypeDBArray := make([]REQIFTYPEDB, 0)
	query := backRepoREQIFTYPE.db.Find(&reqiftypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reqiftypeInstancesToBeRemovedFromTheStage := make(map[*models.REQIFTYPE]any)
	for key, value := range backRepoREQIFTYPE.stage.REQIFTYPEs {
		reqiftypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reqiftypeDB := range reqiftypeDBArray {
		backRepoREQIFTYPE.CheckoutPhaseOneInstance(&reqiftypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		reqiftype, ok := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[reqiftypeDB.ID]
		if ok {
			delete(reqiftypeInstancesToBeRemovedFromTheStage, reqiftype)
		}
	}

	// remove from stage and back repo's 3 maps all reqiftypes that are not in the checkout
	for reqiftype := range reqiftypeInstancesToBeRemovedFromTheStage {
		reqiftype.Unstage(backRepoREQIFTYPE.GetStage())

		// remove instance from the back repo 3 maps
		reqiftypeID := backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]
		delete(backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID, reqiftype)
		delete(backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB, reqiftypeID)
		delete(backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr, reqiftypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reqiftypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the reqiftypeDB
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CheckoutPhaseOneInstance(reqiftypeDB *REQIFTYPEDB) (Error error) {

	reqiftype, ok := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[reqiftypeDB.ID]
	if !ok {
		reqiftype = new(models.REQIFTYPE)

		backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[reqiftypeDB.ID] = reqiftype
		backRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype] = reqiftypeDB.ID

		// append model store with the new element
		reqiftype.Name = reqiftypeDB.Name_Data.String
		reqiftype.Stage(backRepoREQIFTYPE.GetStage())
	}
	reqiftypeDB.CopyBasicFieldsToREQIFTYPE(reqiftype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	reqiftype.Stage(backRepoREQIFTYPE.GetStage())

	// preserve pointer to reqiftypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQIFTYPEDBID_REQIFTYPEDB)[reqiftypeDB hold variable pointers
	reqiftypeDB_Data := *reqiftypeDB
	preservedPtrToREQIFTYPE := &reqiftypeDB_Data
	backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[reqiftypeDB.ID] = preservedPtrToREQIFTYPE

	return
}

// BackRepoREQIFTYPE.CheckoutPhaseTwo Checkouts all staged instances of REQIFTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reqiftypeDB := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB {
		backRepoREQIFTYPE.CheckoutPhaseTwoInstance(backRepo, reqiftypeDB)
	}
	return
}

// BackRepoREQIFTYPE.CheckoutPhaseTwoInstance Checkouts staged instances of REQIFTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reqiftypeDB *REQIFTYPEDB) (Error error) {

	reqiftype := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[reqiftypeDB.ID]

	reqiftypeDB.DecodePointers(backRepo, reqiftype)

	return
}

func (reqiftypeDB *REQIFTYPEDB) DecodePointers(backRepo *BackRepoStruct, reqiftype *models.REQIFTYPE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitREQIFTYPE allows commit of a single reqiftype (if already staged)
func (backRepo *BackRepoStruct) CommitREQIFTYPE(reqiftype *models.REQIFTYPE) {
	backRepo.BackRepoREQIFTYPE.CommitPhaseOneInstance(reqiftype)
	if id, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]; ok {
		backRepo.BackRepoREQIFTYPE.CommitPhaseTwoInstance(backRepo, id, reqiftype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQIFTYPE allows checkout of a single reqiftype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQIFTYPE(reqiftype *models.REQIFTYPE) {
	// check if the reqiftype is staged
	if _, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]; ok {

		if id, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[reqiftype]; ok {
			var reqiftypeDB REQIFTYPEDB
			reqiftypeDB.ID = id

			if err := backRepo.BackRepoREQIFTYPE.db.First(&reqiftypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutREQIFTYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQIFTYPE.CheckoutPhaseOneInstance(&reqiftypeDB)
			backRepo.BackRepoREQIFTYPE.CheckoutPhaseTwoInstance(backRepo, &reqiftypeDB)
		}
	}
}

// CopyBasicFieldsFromREQIFTYPE
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsFromREQIFTYPE(reqiftype *models.REQIFTYPE) {
	// insertion point for fields commit

	reqiftypeDB.Name_Data.String = reqiftype.Name
	reqiftypeDB.Name_Data.Valid = true

	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqiftype.DATATYPEDEFINITIONBOOLEANREF
	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromREQIFTYPE_WOP
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsFromREQIFTYPE_WOP(reqiftype *models.REQIFTYPE_WOP) {
	// insertion point for fields commit

	reqiftypeDB.Name_Data.String = reqiftype.Name
	reqiftypeDB.Name_Data.Valid = true

	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqiftype.DATATYPEDEFINITIONBOOLEANREF
	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsFromREQIFTYPEWOP
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsFromREQIFTYPEWOP(reqiftype *REQIFTYPEWOP) {
	// insertion point for fields commit

	reqiftypeDB.Name_Data.String = reqiftype.Name
	reqiftypeDB.Name_Data.Valid = true

	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String = reqiftype.DATATYPEDEFINITIONBOOLEANREF
	reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.Valid = true
}

// CopyBasicFieldsToREQIFTYPE
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsToREQIFTYPE(reqiftype *models.REQIFTYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftype.Name = reqiftypeDB.Name_Data.String
	reqiftype.DATATYPEDEFINITIONBOOLEANREF = reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToREQIFTYPE_WOP
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsToREQIFTYPE_WOP(reqiftype *models.REQIFTYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftype.Name = reqiftypeDB.Name_Data.String
	reqiftype.DATATYPEDEFINITIONBOOLEANREF = reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// CopyBasicFieldsToREQIFTYPEWOP
func (reqiftypeDB *REQIFTYPEDB) CopyBasicFieldsToREQIFTYPEWOP(reqiftype *REQIFTYPEWOP) {
	reqiftype.ID = int(reqiftypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	reqiftype.Name = reqiftypeDB.Name_Data.String
	reqiftype.DATATYPEDEFINITIONBOOLEANREF = reqiftypeDB.DATATYPEDEFINITIONBOOLEANREF_Data.String
}

// Backup generates a json file from a slice of all REQIFTYPEDB instances in the backrepo
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQIFTYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFTYPEDB, 0)
	for _, reqiftypeDB := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB {
		forBackup = append(forBackup, reqiftypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQIFTYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQIFTYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQIFTYPEDB instances in the backrepo
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQIFTYPEDB, 0)
	for _, reqiftypeDB := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB {
		forBackup = append(forBackup, reqiftypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQIFTYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQIFTYPE_Fields, -1)
	for _, reqiftypeDB := range forBackup {

		var reqiftypeWOP REQIFTYPEWOP
		reqiftypeDB.CopyBasicFieldsToREQIFTYPEWOP(&reqiftypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&reqiftypeWOP, -1)
	}
}

// RestoreXL from the "REQIFTYPE" sheet all REQIFTYPEDB instances
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQIFTYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQIFTYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQIFTYPE.rowVisitorREQIFTYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) rowVisitorREQIFTYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var reqiftypeWOP REQIFTYPEWOP
		row.ReadStruct(&reqiftypeWOP)

		// add the unmarshalled struct to the stage
		reqiftypeDB := new(REQIFTYPEDB)
		reqiftypeDB.CopyBasicFieldsFromREQIFTYPEWOP(&reqiftypeWOP)

		reqiftypeDB_ID_atBackupTime := reqiftypeDB.ID
		reqiftypeDB.ID = 0
		query := backRepoREQIFTYPE.db.Create(reqiftypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[reqiftypeDB.ID] = reqiftypeDB
		BackRepoREQIFTYPEid_atBckpTime_newID[reqiftypeDB_ID_atBackupTime] = reqiftypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQIFTYPEDB.json" in dirPath that stores an array
// of REQIFTYPEDB and stores it in the database
// the map BackRepoREQIFTYPEid_atBckpTime_newID is updated accordingly
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQIFTYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQIFTYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQIFTYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQIFTYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQIFTYPEDBID_REQIFTYPEDB
	for _, reqiftypeDB := range forRestore {

		reqiftypeDB_ID_atBackupTime := reqiftypeDB.ID
		reqiftypeDB.ID = 0
		query := backRepoREQIFTYPE.db.Create(reqiftypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[reqiftypeDB.ID] = reqiftypeDB
		BackRepoREQIFTYPEid_atBckpTime_newID[reqiftypeDB_ID_atBackupTime] = reqiftypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQIFTYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQIFTYPE>id_atBckpTime_newID
// to compute new index
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) RestorePhaseTwo() {

	for _, reqiftypeDB := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = reqiftypeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoREQIFTYPE.db.Model(reqiftypeDB).Updates(*reqiftypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoREQIFTYPE.ResetReversePointers commits all staged instances of REQIFTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, reqiftype := range backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr {
		backRepoREQIFTYPE.ResetReversePointersInstance(backRepo, idx, reqiftype)
	}

	return
}

func (backRepoREQIFTYPE *BackRepoREQIFTYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, reqiftype *models.REQIFTYPE) (Error error) {

	// fetch matching reqiftypeDB
	if reqiftypeDB, ok := backRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEDB[idx]; ok {
		_ = reqiftypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQIFTYPEid_atBckpTime_newID map[uint]uint
