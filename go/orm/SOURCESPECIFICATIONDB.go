// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SOURCESPECIFICATION_sql sql.NullBool
var dummy_SOURCESPECIFICATION_time time.Duration
var dummy_SOURCESPECIFICATION_sort sort.Float64Slice

// SOURCESPECIFICATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model sourcespecificationAPI
type SOURCESPECIFICATIONAPI struct {
	gorm.Model

	models.SOURCESPECIFICATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SOURCESPECIFICATIONPointersEncoding SOURCESPECIFICATIONPointersEncoding
}

// SOURCESPECIFICATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SOURCESPECIFICATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SOURCESPECIFICATIONDB describes a sourcespecification in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model sourcespecificationDB
type SOURCESPECIFICATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field sourcespecificationDB.Name
	Name_Data sql.NullString

	// Declation for basic field sourcespecificationDB.SPECIFICATIONREF
	SPECIFICATIONREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SOURCESPECIFICATIONPointersEncoding
}

// SOURCESPECIFICATIONDBs arrays sourcespecificationDBs
// swagger:response sourcespecificationDBsResponse
type SOURCESPECIFICATIONDBs []SOURCESPECIFICATIONDB

// SOURCESPECIFICATIONDBResponse provides response
// swagger:response sourcespecificationDBResponse
type SOURCESPECIFICATIONDBResponse struct {
	SOURCESPECIFICATIONDB
}

// SOURCESPECIFICATIONWOP is a SOURCESPECIFICATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SOURCESPECIFICATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPECIFICATIONREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SOURCESPECIFICATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPECIFICATIONREF",
}

type BackRepoSOURCESPECIFICATIONStruct struct {
	// stores SOURCESPECIFICATIONDB according to their gorm ID
	Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB map[uint]*SOURCESPECIFICATIONDB

	// stores SOURCESPECIFICATIONDB ID according to SOURCESPECIFICATION address
	Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID map[*models.SOURCESPECIFICATION]uint

	// stores SOURCESPECIFICATION according to their gorm ID
	Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr map[uint]*models.SOURCESPECIFICATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSOURCESPECIFICATION.stage
	return
}

func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) GetDB() *gorm.DB {
	return backRepoSOURCESPECIFICATION.db
}

// GetSOURCESPECIFICATIONDBFromSOURCESPECIFICATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) GetSOURCESPECIFICATIONDBFromSOURCESPECIFICATIONPtr(sourcespecification *models.SOURCESPECIFICATION) (sourcespecificationDB *SOURCESPECIFICATIONDB) {
	id := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]
	sourcespecificationDB = backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[id]
	return
}

// BackRepoSOURCESPECIFICATION.CommitPhaseOne commits all staged instances of SOURCESPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for sourcespecification := range stage.SOURCESPECIFICATIONs {
		backRepoSOURCESPECIFICATION.CommitPhaseOneInstance(sourcespecification)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, sourcespecification := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr {
		if _, ok := stage.SOURCESPECIFICATIONs[sourcespecification]; !ok {
			backRepoSOURCESPECIFICATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSOURCESPECIFICATION.CommitDeleteInstance commits deletion of SOURCESPECIFICATION to the BackRepo
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	sourcespecification := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[id]

	// sourcespecification is not staged anymore, remove sourcespecificationDB
	sourcespecificationDB := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[id]
	query := backRepoSOURCESPECIFICATION.db.Unscoped().Delete(&sourcespecificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID, sourcespecification)
	delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr, id)
	delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB, id)

	return
}

// BackRepoSOURCESPECIFICATION.CommitPhaseOneInstance commits sourcespecification staged instances of SOURCESPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CommitPhaseOneInstance(sourcespecification *models.SOURCESPECIFICATION) (Error error) {

	// check if the sourcespecification is not commited yet
	if _, ok := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]; ok {
		return
	}

	// initiate sourcespecification
	var sourcespecificationDB SOURCESPECIFICATIONDB
	sourcespecificationDB.CopyBasicFieldsFromSOURCESPECIFICATION(sourcespecification)

	query := backRepoSOURCESPECIFICATION.db.Create(&sourcespecificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification] = sourcespecificationDB.ID
	backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[sourcespecificationDB.ID] = sourcespecification
	backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[sourcespecificationDB.ID] = &sourcespecificationDB

	return
}

// BackRepoSOURCESPECIFICATION.CommitPhaseTwo commits all staged instances of SOURCESPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, sourcespecification := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr {
		backRepoSOURCESPECIFICATION.CommitPhaseTwoInstance(backRepo, idx, sourcespecification)
	}

	return
}

// BackRepoSOURCESPECIFICATION.CommitPhaseTwoInstance commits {{structname }} of models.SOURCESPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, sourcespecification *models.SOURCESPECIFICATION) (Error error) {

	// fetch matching sourcespecificationDB
	if sourcespecificationDB, ok := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[idx]; ok {

		sourcespecificationDB.CopyBasicFieldsFromSOURCESPECIFICATION(sourcespecification)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSOURCESPECIFICATION.db.Save(&sourcespecificationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SOURCESPECIFICATION intance %s", sourcespecification.Name))
		return err
	}

	return
}

// BackRepoSOURCESPECIFICATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CheckoutPhaseOne() (Error error) {

	sourcespecificationDBArray := make([]SOURCESPECIFICATIONDB, 0)
	query := backRepoSOURCESPECIFICATION.db.Find(&sourcespecificationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	sourcespecificationInstancesToBeRemovedFromTheStage := make(map[*models.SOURCESPECIFICATION]any)
	for key, value := range backRepoSOURCESPECIFICATION.stage.SOURCESPECIFICATIONs {
		sourcespecificationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, sourcespecificationDB := range sourcespecificationDBArray {
		backRepoSOURCESPECIFICATION.CheckoutPhaseOneInstance(&sourcespecificationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		sourcespecification, ok := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[sourcespecificationDB.ID]
		if ok {
			delete(sourcespecificationInstancesToBeRemovedFromTheStage, sourcespecification)
		}
	}

	// remove from stage and back repo's 3 maps all sourcespecifications that are not in the checkout
	for sourcespecification := range sourcespecificationInstancesToBeRemovedFromTheStage {
		sourcespecification.Unstage(backRepoSOURCESPECIFICATION.GetStage())

		// remove instance from the back repo 3 maps
		sourcespecificationID := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]
		delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID, sourcespecification)
		delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB, sourcespecificationID)
		delete(backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr, sourcespecificationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a sourcespecificationDB that has been found in the DB, updates the backRepo and stages the
// models version of the sourcespecificationDB
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CheckoutPhaseOneInstance(sourcespecificationDB *SOURCESPECIFICATIONDB) (Error error) {

	sourcespecification, ok := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[sourcespecificationDB.ID]
	if !ok {
		sourcespecification = new(models.SOURCESPECIFICATION)

		backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[sourcespecificationDB.ID] = sourcespecification
		backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification] = sourcespecificationDB.ID

		// append model store with the new element
		sourcespecification.Name = sourcespecificationDB.Name_Data.String
		sourcespecification.Stage(backRepoSOURCESPECIFICATION.GetStage())
	}
	sourcespecificationDB.CopyBasicFieldsToSOURCESPECIFICATION(sourcespecification)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	sourcespecification.Stage(backRepoSOURCESPECIFICATION.GetStage())

	// preserve pointer to sourcespecificationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB)[sourcespecificationDB hold variable pointers
	sourcespecificationDB_Data := *sourcespecificationDB
	preservedPtrToSOURCESPECIFICATION := &sourcespecificationDB_Data
	backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[sourcespecificationDB.ID] = preservedPtrToSOURCESPECIFICATION

	return
}

// BackRepoSOURCESPECIFICATION.CheckoutPhaseTwo Checkouts all staged instances of SOURCESPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, sourcespecificationDB := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB {
		backRepoSOURCESPECIFICATION.CheckoutPhaseTwoInstance(backRepo, sourcespecificationDB)
	}
	return
}

// BackRepoSOURCESPECIFICATION.CheckoutPhaseTwoInstance Checkouts staged instances of SOURCESPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, sourcespecificationDB *SOURCESPECIFICATIONDB) (Error error) {

	sourcespecification := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr[sourcespecificationDB.ID]

	sourcespecificationDB.DecodePointers(backRepo, sourcespecification)

	return
}

func (sourcespecificationDB *SOURCESPECIFICATIONDB) DecodePointers(backRepo *BackRepoStruct, sourcespecification *models.SOURCESPECIFICATION) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSOURCESPECIFICATION allows commit of a single sourcespecification (if already staged)
func (backRepo *BackRepoStruct) CommitSOURCESPECIFICATION(sourcespecification *models.SOURCESPECIFICATION) {
	backRepo.BackRepoSOURCESPECIFICATION.CommitPhaseOneInstance(sourcespecification)
	if id, ok := backRepo.BackRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]; ok {
		backRepo.BackRepoSOURCESPECIFICATION.CommitPhaseTwoInstance(backRepo, id, sourcespecification)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSOURCESPECIFICATION allows checkout of a single sourcespecification (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSOURCESPECIFICATION(sourcespecification *models.SOURCESPECIFICATION) {
	// check if the sourcespecification is staged
	if _, ok := backRepo.BackRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]; ok {

		if id, ok := backRepo.BackRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONPtr_SOURCESPECIFICATIONDBID[sourcespecification]; ok {
			var sourcespecificationDB SOURCESPECIFICATIONDB
			sourcespecificationDB.ID = id

			if err := backRepo.BackRepoSOURCESPECIFICATION.db.First(&sourcespecificationDB, id).Error; err != nil {
				log.Fatalln("CheckoutSOURCESPECIFICATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSOURCESPECIFICATION.CheckoutPhaseOneInstance(&sourcespecificationDB)
			backRepo.BackRepoSOURCESPECIFICATION.CheckoutPhaseTwoInstance(backRepo, &sourcespecificationDB)
		}
	}
}

// CopyBasicFieldsFromSOURCESPECIFICATION
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsFromSOURCESPECIFICATION(sourcespecification *models.SOURCESPECIFICATION) {
	// insertion point for fields commit

	sourcespecificationDB.Name_Data.String = sourcespecification.Name
	sourcespecificationDB.Name_Data.Valid = true

	sourcespecificationDB.SPECIFICATIONREF_Data.String = sourcespecification.SPECIFICATIONREF
	sourcespecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsFromSOURCESPECIFICATION_WOP
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsFromSOURCESPECIFICATION_WOP(sourcespecification *models.SOURCESPECIFICATION_WOP) {
	// insertion point for fields commit

	sourcespecificationDB.Name_Data.String = sourcespecification.Name
	sourcespecificationDB.Name_Data.Valid = true

	sourcespecificationDB.SPECIFICATIONREF_Data.String = sourcespecification.SPECIFICATIONREF
	sourcespecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsFromSOURCESPECIFICATIONWOP
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsFromSOURCESPECIFICATIONWOP(sourcespecification *SOURCESPECIFICATIONWOP) {
	// insertion point for fields commit

	sourcespecificationDB.Name_Data.String = sourcespecification.Name
	sourcespecificationDB.Name_Data.Valid = true

	sourcespecificationDB.SPECIFICATIONREF_Data.String = sourcespecification.SPECIFICATIONREF
	sourcespecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsToSOURCESPECIFICATION
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsToSOURCESPECIFICATION(sourcespecification *models.SOURCESPECIFICATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	sourcespecification.Name = sourcespecificationDB.Name_Data.String
	sourcespecification.SPECIFICATIONREF = sourcespecificationDB.SPECIFICATIONREF_Data.String
}

// CopyBasicFieldsToSOURCESPECIFICATION_WOP
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsToSOURCESPECIFICATION_WOP(sourcespecification *models.SOURCESPECIFICATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	sourcespecification.Name = sourcespecificationDB.Name_Data.String
	sourcespecification.SPECIFICATIONREF = sourcespecificationDB.SPECIFICATIONREF_Data.String
}

// CopyBasicFieldsToSOURCESPECIFICATIONWOP
func (sourcespecificationDB *SOURCESPECIFICATIONDB) CopyBasicFieldsToSOURCESPECIFICATIONWOP(sourcespecification *SOURCESPECIFICATIONWOP) {
	sourcespecification.ID = int(sourcespecificationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	sourcespecification.Name = sourcespecificationDB.Name_Data.String
	sourcespecification.SPECIFICATIONREF = sourcespecificationDB.SPECIFICATIONREF_Data.String
}

// Backup generates a json file from a slice of all SOURCESPECIFICATIONDB instances in the backrepo
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SOURCESPECIFICATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SOURCESPECIFICATIONDB, 0)
	for _, sourcespecificationDB := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB {
		forBackup = append(forBackup, sourcespecificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SOURCESPECIFICATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SOURCESPECIFICATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all SOURCESPECIFICATIONDB instances in the backrepo
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SOURCESPECIFICATIONDB, 0)
	for _, sourcespecificationDB := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB {
		forBackup = append(forBackup, sourcespecificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SOURCESPECIFICATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SOURCESPECIFICATION_Fields, -1)
	for _, sourcespecificationDB := range forBackup {

		var sourcespecificationWOP SOURCESPECIFICATIONWOP
		sourcespecificationDB.CopyBasicFieldsToSOURCESPECIFICATIONWOP(&sourcespecificationWOP)

		row := sh.AddRow()
		row.WriteStruct(&sourcespecificationWOP, -1)
	}
}

// RestoreXL from the "SOURCESPECIFICATION" sheet all SOURCESPECIFICATIONDB instances
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSOURCESPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SOURCESPECIFICATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSOURCESPECIFICATION.rowVisitorSOURCESPECIFICATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) rowVisitorSOURCESPECIFICATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var sourcespecificationWOP SOURCESPECIFICATIONWOP
		row.ReadStruct(&sourcespecificationWOP)

		// add the unmarshalled struct to the stage
		sourcespecificationDB := new(SOURCESPECIFICATIONDB)
		sourcespecificationDB.CopyBasicFieldsFromSOURCESPECIFICATIONWOP(&sourcespecificationWOP)

		sourcespecificationDB_ID_atBackupTime := sourcespecificationDB.ID
		sourcespecificationDB.ID = 0
		query := backRepoSOURCESPECIFICATION.db.Create(sourcespecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[sourcespecificationDB.ID] = sourcespecificationDB
		BackRepoSOURCESPECIFICATIONid_atBckpTime_newID[sourcespecificationDB_ID_atBackupTime] = sourcespecificationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SOURCESPECIFICATIONDB.json" in dirPath that stores an array
// of SOURCESPECIFICATIONDB and stores it in the database
// the map BackRepoSOURCESPECIFICATIONid_atBckpTime_newID is updated accordingly
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSOURCESPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SOURCESPECIFICATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SOURCESPECIFICATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SOURCESPECIFICATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB
	for _, sourcespecificationDB := range forRestore {

		sourcespecificationDB_ID_atBackupTime := sourcespecificationDB.ID
		sourcespecificationDB.ID = 0
		query := backRepoSOURCESPECIFICATION.db.Create(sourcespecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[sourcespecificationDB.ID] = sourcespecificationDB
		BackRepoSOURCESPECIFICATIONid_atBckpTime_newID[sourcespecificationDB_ID_atBackupTime] = sourcespecificationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SOURCESPECIFICATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SOURCESPECIFICATION>id_atBckpTime_newID
// to compute new index
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) RestorePhaseTwo() {

	for _, sourcespecificationDB := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = sourcespecificationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSOURCESPECIFICATION.db.Model(sourcespecificationDB).Updates(*sourcespecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSOURCESPECIFICATION.ResetReversePointers commits all staged instances of SOURCESPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, sourcespecification := range backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONPtr {
		backRepoSOURCESPECIFICATION.ResetReversePointersInstance(backRepo, idx, sourcespecification)
	}

	return
}

func (backRepoSOURCESPECIFICATION *BackRepoSOURCESPECIFICATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, sourcespecification *models.SOURCESPECIFICATION) (Error error) {

	// fetch matching sourcespecificationDB
	if sourcespecificationDB, ok := backRepoSOURCESPECIFICATION.Map_SOURCESPECIFICATIONDBID_SOURCESPECIFICATIONDB[idx]; ok {
		_ = sourcespecificationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSOURCESPECIFICATIONid_atBckpTime_newID map[uint]uint
