// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TARGETSPECIFICATION_sql sql.NullBool
var dummy_TARGETSPECIFICATION_time time.Duration
var dummy_TARGETSPECIFICATION_sort sort.Float64Slice

// TARGETSPECIFICATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model targetspecificationAPI
type TARGETSPECIFICATIONAPI struct {
	gorm.Model

	models.TARGETSPECIFICATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TARGETSPECIFICATIONPointersEncoding TARGETSPECIFICATIONPointersEncoding
}

// TARGETSPECIFICATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TARGETSPECIFICATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TARGETSPECIFICATIONDB describes a targetspecification in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model targetspecificationDB
type TARGETSPECIFICATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field targetspecificationDB.Name
	Name_Data sql.NullString

	// Declation for basic field targetspecificationDB.SPECIFICATIONREF
	SPECIFICATIONREF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TARGETSPECIFICATIONPointersEncoding
}

// TARGETSPECIFICATIONDBs arrays targetspecificationDBs
// swagger:response targetspecificationDBsResponse
type TARGETSPECIFICATIONDBs []TARGETSPECIFICATIONDB

// TARGETSPECIFICATIONDBResponse provides response
// swagger:response targetspecificationDBResponse
type TARGETSPECIFICATIONDBResponse struct {
	TARGETSPECIFICATIONDB
}

// TARGETSPECIFICATIONWOP is a TARGETSPECIFICATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TARGETSPECIFICATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPECIFICATIONREF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TARGETSPECIFICATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPECIFICATIONREF",
}

type BackRepoTARGETSPECIFICATIONStruct struct {
	// stores TARGETSPECIFICATIONDB according to their gorm ID
	Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB map[uint]*TARGETSPECIFICATIONDB

	// stores TARGETSPECIFICATIONDB ID according to TARGETSPECIFICATION address
	Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID map[*models.TARGETSPECIFICATION]uint

	// stores TARGETSPECIFICATION according to their gorm ID
	Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr map[uint]*models.TARGETSPECIFICATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTARGETSPECIFICATION.stage
	return
}

func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) GetDB() *gorm.DB {
	return backRepoTARGETSPECIFICATION.db
}

// GetTARGETSPECIFICATIONDBFromTARGETSPECIFICATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) GetTARGETSPECIFICATIONDBFromTARGETSPECIFICATIONPtr(targetspecification *models.TARGETSPECIFICATION) (targetspecificationDB *TARGETSPECIFICATIONDB) {
	id := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]
	targetspecificationDB = backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[id]
	return
}

// BackRepoTARGETSPECIFICATION.CommitPhaseOne commits all staged instances of TARGETSPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for targetspecification := range stage.TARGETSPECIFICATIONs {
		backRepoTARGETSPECIFICATION.CommitPhaseOneInstance(targetspecification)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, targetspecification := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr {
		if _, ok := stage.TARGETSPECIFICATIONs[targetspecification]; !ok {
			backRepoTARGETSPECIFICATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTARGETSPECIFICATION.CommitDeleteInstance commits deletion of TARGETSPECIFICATION to the BackRepo
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	targetspecification := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[id]

	// targetspecification is not staged anymore, remove targetspecificationDB
	targetspecificationDB := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[id]
	query := backRepoTARGETSPECIFICATION.db.Unscoped().Delete(&targetspecificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID, targetspecification)
	delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr, id)
	delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB, id)

	return
}

// BackRepoTARGETSPECIFICATION.CommitPhaseOneInstance commits targetspecification staged instances of TARGETSPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CommitPhaseOneInstance(targetspecification *models.TARGETSPECIFICATION) (Error error) {

	// check if the targetspecification is not commited yet
	if _, ok := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]; ok {
		return
	}

	// initiate targetspecification
	var targetspecificationDB TARGETSPECIFICATIONDB
	targetspecificationDB.CopyBasicFieldsFromTARGETSPECIFICATION(targetspecification)

	query := backRepoTARGETSPECIFICATION.db.Create(&targetspecificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification] = targetspecificationDB.ID
	backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[targetspecificationDB.ID] = targetspecification
	backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[targetspecificationDB.ID] = &targetspecificationDB

	return
}

// BackRepoTARGETSPECIFICATION.CommitPhaseTwo commits all staged instances of TARGETSPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, targetspecification := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr {
		backRepoTARGETSPECIFICATION.CommitPhaseTwoInstance(backRepo, idx, targetspecification)
	}

	return
}

// BackRepoTARGETSPECIFICATION.CommitPhaseTwoInstance commits {{structname }} of models.TARGETSPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, targetspecification *models.TARGETSPECIFICATION) (Error error) {

	// fetch matching targetspecificationDB
	if targetspecificationDB, ok := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[idx]; ok {

		targetspecificationDB.CopyBasicFieldsFromTARGETSPECIFICATION(targetspecification)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTARGETSPECIFICATION.db.Save(&targetspecificationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TARGETSPECIFICATION intance %s", targetspecification.Name))
		return err
	}

	return
}

// BackRepoTARGETSPECIFICATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CheckoutPhaseOne() (Error error) {

	targetspecificationDBArray := make([]TARGETSPECIFICATIONDB, 0)
	query := backRepoTARGETSPECIFICATION.db.Find(&targetspecificationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	targetspecificationInstancesToBeRemovedFromTheStage := make(map[*models.TARGETSPECIFICATION]any)
	for key, value := range backRepoTARGETSPECIFICATION.stage.TARGETSPECIFICATIONs {
		targetspecificationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, targetspecificationDB := range targetspecificationDBArray {
		backRepoTARGETSPECIFICATION.CheckoutPhaseOneInstance(&targetspecificationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		targetspecification, ok := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[targetspecificationDB.ID]
		if ok {
			delete(targetspecificationInstancesToBeRemovedFromTheStage, targetspecification)
		}
	}

	// remove from stage and back repo's 3 maps all targetspecifications that are not in the checkout
	for targetspecification := range targetspecificationInstancesToBeRemovedFromTheStage {
		targetspecification.Unstage(backRepoTARGETSPECIFICATION.GetStage())

		// remove instance from the back repo 3 maps
		targetspecificationID := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]
		delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID, targetspecification)
		delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB, targetspecificationID)
		delete(backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr, targetspecificationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a targetspecificationDB that has been found in the DB, updates the backRepo and stages the
// models version of the targetspecificationDB
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CheckoutPhaseOneInstance(targetspecificationDB *TARGETSPECIFICATIONDB) (Error error) {

	targetspecification, ok := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[targetspecificationDB.ID]
	if !ok {
		targetspecification = new(models.TARGETSPECIFICATION)

		backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[targetspecificationDB.ID] = targetspecification
		backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification] = targetspecificationDB.ID

		// append model store with the new element
		targetspecification.Name = targetspecificationDB.Name_Data.String
		targetspecification.Stage(backRepoTARGETSPECIFICATION.GetStage())
	}
	targetspecificationDB.CopyBasicFieldsToTARGETSPECIFICATION(targetspecification)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	targetspecification.Stage(backRepoTARGETSPECIFICATION.GetStage())

	// preserve pointer to targetspecificationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB)[targetspecificationDB hold variable pointers
	targetspecificationDB_Data := *targetspecificationDB
	preservedPtrToTARGETSPECIFICATION := &targetspecificationDB_Data
	backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[targetspecificationDB.ID] = preservedPtrToTARGETSPECIFICATION

	return
}

// BackRepoTARGETSPECIFICATION.CheckoutPhaseTwo Checkouts all staged instances of TARGETSPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, targetspecificationDB := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB {
		backRepoTARGETSPECIFICATION.CheckoutPhaseTwoInstance(backRepo, targetspecificationDB)
	}
	return
}

// BackRepoTARGETSPECIFICATION.CheckoutPhaseTwoInstance Checkouts staged instances of TARGETSPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, targetspecificationDB *TARGETSPECIFICATIONDB) (Error error) {

	targetspecification := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr[targetspecificationDB.ID]

	targetspecificationDB.DecodePointers(backRepo, targetspecification)

	return
}

func (targetspecificationDB *TARGETSPECIFICATIONDB) DecodePointers(backRepo *BackRepoStruct, targetspecification *models.TARGETSPECIFICATION) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTARGETSPECIFICATION allows commit of a single targetspecification (if already staged)
func (backRepo *BackRepoStruct) CommitTARGETSPECIFICATION(targetspecification *models.TARGETSPECIFICATION) {
	backRepo.BackRepoTARGETSPECIFICATION.CommitPhaseOneInstance(targetspecification)
	if id, ok := backRepo.BackRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]; ok {
		backRepo.BackRepoTARGETSPECIFICATION.CommitPhaseTwoInstance(backRepo, id, targetspecification)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTARGETSPECIFICATION allows checkout of a single targetspecification (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTARGETSPECIFICATION(targetspecification *models.TARGETSPECIFICATION) {
	// check if the targetspecification is staged
	if _, ok := backRepo.BackRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]; ok {

		if id, ok := backRepo.BackRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONPtr_TARGETSPECIFICATIONDBID[targetspecification]; ok {
			var targetspecificationDB TARGETSPECIFICATIONDB
			targetspecificationDB.ID = id

			if err := backRepo.BackRepoTARGETSPECIFICATION.db.First(&targetspecificationDB, id).Error; err != nil {
				log.Fatalln("CheckoutTARGETSPECIFICATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTARGETSPECIFICATION.CheckoutPhaseOneInstance(&targetspecificationDB)
			backRepo.BackRepoTARGETSPECIFICATION.CheckoutPhaseTwoInstance(backRepo, &targetspecificationDB)
		}
	}
}

// CopyBasicFieldsFromTARGETSPECIFICATION
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsFromTARGETSPECIFICATION(targetspecification *models.TARGETSPECIFICATION) {
	// insertion point for fields commit

	targetspecificationDB.Name_Data.String = targetspecification.Name
	targetspecificationDB.Name_Data.Valid = true

	targetspecificationDB.SPECIFICATIONREF_Data.String = targetspecification.SPECIFICATIONREF
	targetspecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsFromTARGETSPECIFICATION_WOP
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsFromTARGETSPECIFICATION_WOP(targetspecification *models.TARGETSPECIFICATION_WOP) {
	// insertion point for fields commit

	targetspecificationDB.Name_Data.String = targetspecification.Name
	targetspecificationDB.Name_Data.Valid = true

	targetspecificationDB.SPECIFICATIONREF_Data.String = targetspecification.SPECIFICATIONREF
	targetspecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsFromTARGETSPECIFICATIONWOP
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsFromTARGETSPECIFICATIONWOP(targetspecification *TARGETSPECIFICATIONWOP) {
	// insertion point for fields commit

	targetspecificationDB.Name_Data.String = targetspecification.Name
	targetspecificationDB.Name_Data.Valid = true

	targetspecificationDB.SPECIFICATIONREF_Data.String = targetspecification.SPECIFICATIONREF
	targetspecificationDB.SPECIFICATIONREF_Data.Valid = true
}

// CopyBasicFieldsToTARGETSPECIFICATION
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsToTARGETSPECIFICATION(targetspecification *models.TARGETSPECIFICATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	targetspecification.Name = targetspecificationDB.Name_Data.String
	targetspecification.SPECIFICATIONREF = targetspecificationDB.SPECIFICATIONREF_Data.String
}

// CopyBasicFieldsToTARGETSPECIFICATION_WOP
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsToTARGETSPECIFICATION_WOP(targetspecification *models.TARGETSPECIFICATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	targetspecification.Name = targetspecificationDB.Name_Data.String
	targetspecification.SPECIFICATIONREF = targetspecificationDB.SPECIFICATIONREF_Data.String
}

// CopyBasicFieldsToTARGETSPECIFICATIONWOP
func (targetspecificationDB *TARGETSPECIFICATIONDB) CopyBasicFieldsToTARGETSPECIFICATIONWOP(targetspecification *TARGETSPECIFICATIONWOP) {
	targetspecification.ID = int(targetspecificationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	targetspecification.Name = targetspecificationDB.Name_Data.String
	targetspecification.SPECIFICATIONREF = targetspecificationDB.SPECIFICATIONREF_Data.String
}

// Backup generates a json file from a slice of all TARGETSPECIFICATIONDB instances in the backrepo
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TARGETSPECIFICATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TARGETSPECIFICATIONDB, 0)
	for _, targetspecificationDB := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB {
		forBackup = append(forBackup, targetspecificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TARGETSPECIFICATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TARGETSPECIFICATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all TARGETSPECIFICATIONDB instances in the backrepo
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TARGETSPECIFICATIONDB, 0)
	for _, targetspecificationDB := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB {
		forBackup = append(forBackup, targetspecificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TARGETSPECIFICATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TARGETSPECIFICATION_Fields, -1)
	for _, targetspecificationDB := range forBackup {

		var targetspecificationWOP TARGETSPECIFICATIONWOP
		targetspecificationDB.CopyBasicFieldsToTARGETSPECIFICATIONWOP(&targetspecificationWOP)

		row := sh.AddRow()
		row.WriteStruct(&targetspecificationWOP, -1)
	}
}

// RestoreXL from the "TARGETSPECIFICATION" sheet all TARGETSPECIFICATIONDB instances
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTARGETSPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TARGETSPECIFICATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTARGETSPECIFICATION.rowVisitorTARGETSPECIFICATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) rowVisitorTARGETSPECIFICATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var targetspecificationWOP TARGETSPECIFICATIONWOP
		row.ReadStruct(&targetspecificationWOP)

		// add the unmarshalled struct to the stage
		targetspecificationDB := new(TARGETSPECIFICATIONDB)
		targetspecificationDB.CopyBasicFieldsFromTARGETSPECIFICATIONWOP(&targetspecificationWOP)

		targetspecificationDB_ID_atBackupTime := targetspecificationDB.ID
		targetspecificationDB.ID = 0
		query := backRepoTARGETSPECIFICATION.db.Create(targetspecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[targetspecificationDB.ID] = targetspecificationDB
		BackRepoTARGETSPECIFICATIONid_atBckpTime_newID[targetspecificationDB_ID_atBackupTime] = targetspecificationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TARGETSPECIFICATIONDB.json" in dirPath that stores an array
// of TARGETSPECIFICATIONDB and stores it in the database
// the map BackRepoTARGETSPECIFICATIONid_atBckpTime_newID is updated accordingly
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTARGETSPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TARGETSPECIFICATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TARGETSPECIFICATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TARGETSPECIFICATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB
	for _, targetspecificationDB := range forRestore {

		targetspecificationDB_ID_atBackupTime := targetspecificationDB.ID
		targetspecificationDB.ID = 0
		query := backRepoTARGETSPECIFICATION.db.Create(targetspecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[targetspecificationDB.ID] = targetspecificationDB
		BackRepoTARGETSPECIFICATIONid_atBckpTime_newID[targetspecificationDB_ID_atBackupTime] = targetspecificationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TARGETSPECIFICATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TARGETSPECIFICATION>id_atBckpTime_newID
// to compute new index
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) RestorePhaseTwo() {

	for _, targetspecificationDB := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = targetspecificationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTARGETSPECIFICATION.db.Model(targetspecificationDB).Updates(*targetspecificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTARGETSPECIFICATION.ResetReversePointers commits all staged instances of TARGETSPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, targetspecification := range backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONPtr {
		backRepoTARGETSPECIFICATION.ResetReversePointersInstance(backRepo, idx, targetspecification)
	}

	return
}

func (backRepoTARGETSPECIFICATION *BackRepoTARGETSPECIFICATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, targetspecification *models.TARGETSPECIFICATION) (Error error) {

	// fetch matching targetspecificationDB
	if targetspecificationDB, ok := backRepoTARGETSPECIFICATION.Map_TARGETSPECIFICATIONDBID_TARGETSPECIFICATIONDB[idx]; ok {
		_ = targetspecificationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTARGETSPECIFICATIONid_atBckpTime_newID map[uint]uint
