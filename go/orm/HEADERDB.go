// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_HEADER_sql sql.NullBool
var dummy_HEADER_time time.Duration
var dummy_HEADER_sort sort.Float64Slice

// HEADERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model headerAPI
type HEADERAPI struct {
	gorm.Model

	models.HEADER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HEADERPointersEncoding HEADERPointersEncoding
}

// HEADERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HEADERPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// HEADERDB describes a header in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model headerDB
type HEADERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field headerDB.Name
	Name_Data sql.NullString

	// Declation for basic field headerDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field headerDB.COMMENT
	COMMENT_Data sql.NullString

	// Declation for basic field headerDB.CREATIONTIME
	CREATIONTIME_Data sql.NullString

	// Declation for basic field headerDB.REPOSITORYID
	REPOSITORYID_Data sql.NullString

	// Declation for basic field headerDB.REQIFTOOLID
	REQIFTOOLID_Data sql.NullString

	// Declation for basic field headerDB.REQIFVERSION
	REQIFVERSION_Data sql.NullString

	// Declation for basic field headerDB.SOURCETOOLID
	SOURCETOOLID_Data sql.NullString

	// Declation for basic field headerDB.TITLE
	TITLE_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HEADERPointersEncoding
}

// HEADERDBs arrays headerDBs
// swagger:response headerDBsResponse
type HEADERDBs []HEADERDB

// HEADERDBResponse provides response
// swagger:response headerDBResponse
type HEADERDBResponse struct {
	HEADERDB
}

// HEADERWOP is a HEADER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HEADERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IDENTIFIERAttr string `xlsx:"2"`

	COMMENT string `xlsx:"3"`

	CREATIONTIME string `xlsx:"4"`

	REPOSITORYID string `xlsx:"5"`

	REQIFTOOLID string `xlsx:"6"`

	REQIFVERSION string `xlsx:"7"`

	SOURCETOOLID string `xlsx:"8"`

	TITLE string `xlsx:"9"`
	// insertion for WOP pointer fields
}

var HEADER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IDENTIFIERAttr",
	"COMMENT",
	"CREATIONTIME",
	"REPOSITORYID",
	"REQIFTOOLID",
	"REQIFVERSION",
	"SOURCETOOLID",
	"TITLE",
}

type BackRepoHEADERStruct struct {
	// stores HEADERDB according to their gorm ID
	Map_HEADERDBID_HEADERDB map[uint]*HEADERDB

	// stores HEADERDB ID according to HEADER address
	Map_HEADERPtr_HEADERDBID map[*models.HEADER]uint

	// stores HEADER according to their gorm ID
	Map_HEADERDBID_HEADERPtr map[uint]*models.HEADER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHEADER *BackRepoHEADERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHEADER.stage
	return
}

func (backRepoHEADER *BackRepoHEADERStruct) GetDB() *gorm.DB {
	return backRepoHEADER.db
}

// GetHEADERDBFromHEADERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHEADER *BackRepoHEADERStruct) GetHEADERDBFromHEADERPtr(header *models.HEADER) (headerDB *HEADERDB) {
	id := backRepoHEADER.Map_HEADERPtr_HEADERDBID[header]
	headerDB = backRepoHEADER.Map_HEADERDBID_HEADERDB[id]
	return
}

// BackRepoHEADER.CommitPhaseOne commits all staged instances of HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHEADER *BackRepoHEADERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for header := range stage.HEADERs {
		backRepoHEADER.CommitPhaseOneInstance(header)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, header := range backRepoHEADER.Map_HEADERDBID_HEADERPtr {
		if _, ok := stage.HEADERs[header]; !ok {
			backRepoHEADER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHEADER.CommitDeleteInstance commits deletion of HEADER to the BackRepo
func (backRepoHEADER *BackRepoHEADERStruct) CommitDeleteInstance(id uint) (Error error) {

	header := backRepoHEADER.Map_HEADERDBID_HEADERPtr[id]

	// header is not staged anymore, remove headerDB
	headerDB := backRepoHEADER.Map_HEADERDBID_HEADERDB[id]
	query := backRepoHEADER.db.Unscoped().Delete(&headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHEADER.Map_HEADERPtr_HEADERDBID, header)
	delete(backRepoHEADER.Map_HEADERDBID_HEADERPtr, id)
	delete(backRepoHEADER.Map_HEADERDBID_HEADERDB, id)

	return
}

// BackRepoHEADER.CommitPhaseOneInstance commits header staged instances of HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHEADER *BackRepoHEADERStruct) CommitPhaseOneInstance(header *models.HEADER) (Error error) {

	// check if the header is not commited yet
	if _, ok := backRepoHEADER.Map_HEADERPtr_HEADERDBID[header]; ok {
		return
	}

	// initiate header
	var headerDB HEADERDB
	headerDB.CopyBasicFieldsFromHEADER(header)

	query := backRepoHEADER.db.Create(&headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHEADER.Map_HEADERPtr_HEADERDBID[header] = headerDB.ID
	backRepoHEADER.Map_HEADERDBID_HEADERPtr[headerDB.ID] = header
	backRepoHEADER.Map_HEADERDBID_HEADERDB[headerDB.ID] = &headerDB

	return
}

// BackRepoHEADER.CommitPhaseTwo commits all staged instances of HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHEADER *BackRepoHEADERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, header := range backRepoHEADER.Map_HEADERDBID_HEADERPtr {
		backRepoHEADER.CommitPhaseTwoInstance(backRepo, idx, header)
	}

	return
}

// BackRepoHEADER.CommitPhaseTwoInstance commits {{structname }} of models.HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHEADER *BackRepoHEADERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, header *models.HEADER) (Error error) {

	// fetch matching headerDB
	if headerDB, ok := backRepoHEADER.Map_HEADERDBID_HEADERDB[idx]; ok {

		headerDB.CopyBasicFieldsFromHEADER(header)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHEADER.db.Save(&headerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown HEADER intance %s", header.Name))
		return err
	}

	return
}

// BackRepoHEADER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHEADER *BackRepoHEADERStruct) CheckoutPhaseOne() (Error error) {

	headerDBArray := make([]HEADERDB, 0)
	query := backRepoHEADER.db.Find(&headerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	headerInstancesToBeRemovedFromTheStage := make(map[*models.HEADER]any)
	for key, value := range backRepoHEADER.stage.HEADERs {
		headerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, headerDB := range headerDBArray {
		backRepoHEADER.CheckoutPhaseOneInstance(&headerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		header, ok := backRepoHEADER.Map_HEADERDBID_HEADERPtr[headerDB.ID]
		if ok {
			delete(headerInstancesToBeRemovedFromTheStage, header)
		}
	}

	// remove from stage and back repo's 3 maps all headers that are not in the checkout
	for header := range headerInstancesToBeRemovedFromTheStage {
		header.Unstage(backRepoHEADER.GetStage())

		// remove instance from the back repo 3 maps
		headerID := backRepoHEADER.Map_HEADERPtr_HEADERDBID[header]
		delete(backRepoHEADER.Map_HEADERPtr_HEADERDBID, header)
		delete(backRepoHEADER.Map_HEADERDBID_HEADERDB, headerID)
		delete(backRepoHEADER.Map_HEADERDBID_HEADERPtr, headerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a headerDB that has been found in the DB, updates the backRepo and stages the
// models version of the headerDB
func (backRepoHEADER *BackRepoHEADERStruct) CheckoutPhaseOneInstance(headerDB *HEADERDB) (Error error) {

	header, ok := backRepoHEADER.Map_HEADERDBID_HEADERPtr[headerDB.ID]
	if !ok {
		header = new(models.HEADER)

		backRepoHEADER.Map_HEADERDBID_HEADERPtr[headerDB.ID] = header
		backRepoHEADER.Map_HEADERPtr_HEADERDBID[header] = headerDB.ID

		// append model store with the new element
		header.Name = headerDB.Name_Data.String
		header.Stage(backRepoHEADER.GetStage())
	}
	headerDB.CopyBasicFieldsToHEADER(header)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	header.Stage(backRepoHEADER.GetStage())

	// preserve pointer to headerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HEADERDBID_HEADERDB)[headerDB hold variable pointers
	headerDB_Data := *headerDB
	preservedPtrToHEADER := &headerDB_Data
	backRepoHEADER.Map_HEADERDBID_HEADERDB[headerDB.ID] = preservedPtrToHEADER

	return
}

// BackRepoHEADER.CheckoutPhaseTwo Checkouts all staged instances of HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHEADER *BackRepoHEADERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, headerDB := range backRepoHEADER.Map_HEADERDBID_HEADERDB {
		backRepoHEADER.CheckoutPhaseTwoInstance(backRepo, headerDB)
	}
	return
}

// BackRepoHEADER.CheckoutPhaseTwoInstance Checkouts staged instances of HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHEADER *BackRepoHEADERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, headerDB *HEADERDB) (Error error) {

	header := backRepoHEADER.Map_HEADERDBID_HEADERPtr[headerDB.ID]

	headerDB.DecodePointers(backRepo, header)

	return
}

func (headerDB *HEADERDB) DecodePointers(backRepo *BackRepoStruct, header *models.HEADER) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHEADER allows commit of a single header (if already staged)
func (backRepo *BackRepoStruct) CommitHEADER(header *models.HEADER) {
	backRepo.BackRepoHEADER.CommitPhaseOneInstance(header)
	if id, ok := backRepo.BackRepoHEADER.Map_HEADERPtr_HEADERDBID[header]; ok {
		backRepo.BackRepoHEADER.CommitPhaseTwoInstance(backRepo, id, header)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHEADER allows checkout of a single header (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHEADER(header *models.HEADER) {
	// check if the header is staged
	if _, ok := backRepo.BackRepoHEADER.Map_HEADERPtr_HEADERDBID[header]; ok {

		if id, ok := backRepo.BackRepoHEADER.Map_HEADERPtr_HEADERDBID[header]; ok {
			var headerDB HEADERDB
			headerDB.ID = id

			if err := backRepo.BackRepoHEADER.db.First(&headerDB, id).Error; err != nil {
				log.Fatalln("CheckoutHEADER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHEADER.CheckoutPhaseOneInstance(&headerDB)
			backRepo.BackRepoHEADER.CheckoutPhaseTwoInstance(backRepo, &headerDB)
		}
	}
}

// CopyBasicFieldsFromHEADER
func (headerDB *HEADERDB) CopyBasicFieldsFromHEADER(header *models.HEADER) {
	// insertion point for fields commit

	headerDB.Name_Data.String = header.Name
	headerDB.Name_Data.Valid = true

	headerDB.IDENTIFIERAttr_Data.String = header.IDENTIFIERAttr
	headerDB.IDENTIFIERAttr_Data.Valid = true

	headerDB.COMMENT_Data.String = header.COMMENT
	headerDB.COMMENT_Data.Valid = true

	headerDB.CREATIONTIME_Data.String = header.CREATIONTIME
	headerDB.CREATIONTIME_Data.Valid = true

	headerDB.REPOSITORYID_Data.String = header.REPOSITORYID
	headerDB.REPOSITORYID_Data.Valid = true

	headerDB.REQIFTOOLID_Data.String = header.REQIFTOOLID
	headerDB.REQIFTOOLID_Data.Valid = true

	headerDB.REQIFVERSION_Data.String = header.REQIFVERSION
	headerDB.REQIFVERSION_Data.Valid = true

	headerDB.SOURCETOOLID_Data.String = header.SOURCETOOLID
	headerDB.SOURCETOOLID_Data.Valid = true

	headerDB.TITLE_Data.String = header.TITLE
	headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromHEADER_WOP
func (headerDB *HEADERDB) CopyBasicFieldsFromHEADER_WOP(header *models.HEADER_WOP) {
	// insertion point for fields commit

	headerDB.Name_Data.String = header.Name
	headerDB.Name_Data.Valid = true

	headerDB.IDENTIFIERAttr_Data.String = header.IDENTIFIERAttr
	headerDB.IDENTIFIERAttr_Data.Valid = true

	headerDB.COMMENT_Data.String = header.COMMENT
	headerDB.COMMENT_Data.Valid = true

	headerDB.CREATIONTIME_Data.String = header.CREATIONTIME
	headerDB.CREATIONTIME_Data.Valid = true

	headerDB.REPOSITORYID_Data.String = header.REPOSITORYID
	headerDB.REPOSITORYID_Data.Valid = true

	headerDB.REQIFTOOLID_Data.String = header.REQIFTOOLID
	headerDB.REQIFTOOLID_Data.Valid = true

	headerDB.REQIFVERSION_Data.String = header.REQIFVERSION
	headerDB.REQIFVERSION_Data.Valid = true

	headerDB.SOURCETOOLID_Data.String = header.SOURCETOOLID
	headerDB.SOURCETOOLID_Data.Valid = true

	headerDB.TITLE_Data.String = header.TITLE
	headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsFromHEADERWOP
func (headerDB *HEADERDB) CopyBasicFieldsFromHEADERWOP(header *HEADERWOP) {
	// insertion point for fields commit

	headerDB.Name_Data.String = header.Name
	headerDB.Name_Data.Valid = true

	headerDB.IDENTIFIERAttr_Data.String = header.IDENTIFIERAttr
	headerDB.IDENTIFIERAttr_Data.Valid = true

	headerDB.COMMENT_Data.String = header.COMMENT
	headerDB.COMMENT_Data.Valid = true

	headerDB.CREATIONTIME_Data.String = header.CREATIONTIME
	headerDB.CREATIONTIME_Data.Valid = true

	headerDB.REPOSITORYID_Data.String = header.REPOSITORYID
	headerDB.REPOSITORYID_Data.Valid = true

	headerDB.REQIFTOOLID_Data.String = header.REQIFTOOLID
	headerDB.REQIFTOOLID_Data.Valid = true

	headerDB.REQIFVERSION_Data.String = header.REQIFVERSION
	headerDB.REQIFVERSION_Data.Valid = true

	headerDB.SOURCETOOLID_Data.String = header.SOURCETOOLID
	headerDB.SOURCETOOLID_Data.Valid = true

	headerDB.TITLE_Data.String = header.TITLE
	headerDB.TITLE_Data.Valid = true
}

// CopyBasicFieldsToHEADER
func (headerDB *HEADERDB) CopyBasicFieldsToHEADER(header *models.HEADER) {
	// insertion point for checkout of basic fields (back repo to stage)
	header.Name = headerDB.Name_Data.String
	header.IDENTIFIERAttr = headerDB.IDENTIFIERAttr_Data.String
	header.COMMENT = headerDB.COMMENT_Data.String
	header.CREATIONTIME = headerDB.CREATIONTIME_Data.String
	header.REPOSITORYID = headerDB.REPOSITORYID_Data.String
	header.REQIFTOOLID = headerDB.REQIFTOOLID_Data.String
	header.REQIFVERSION = headerDB.REQIFVERSION_Data.String
	header.SOURCETOOLID = headerDB.SOURCETOOLID_Data.String
	header.TITLE = headerDB.TITLE_Data.String
}

// CopyBasicFieldsToHEADER_WOP
func (headerDB *HEADERDB) CopyBasicFieldsToHEADER_WOP(header *models.HEADER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	header.Name = headerDB.Name_Data.String
	header.IDENTIFIERAttr = headerDB.IDENTIFIERAttr_Data.String
	header.COMMENT = headerDB.COMMENT_Data.String
	header.CREATIONTIME = headerDB.CREATIONTIME_Data.String
	header.REPOSITORYID = headerDB.REPOSITORYID_Data.String
	header.REQIFTOOLID = headerDB.REQIFTOOLID_Data.String
	header.REQIFVERSION = headerDB.REQIFVERSION_Data.String
	header.SOURCETOOLID = headerDB.SOURCETOOLID_Data.String
	header.TITLE = headerDB.TITLE_Data.String
}

// CopyBasicFieldsToHEADERWOP
func (headerDB *HEADERDB) CopyBasicFieldsToHEADERWOP(header *HEADERWOP) {
	header.ID = int(headerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	header.Name = headerDB.Name_Data.String
	header.IDENTIFIERAttr = headerDB.IDENTIFIERAttr_Data.String
	header.COMMENT = headerDB.COMMENT_Data.String
	header.CREATIONTIME = headerDB.CREATIONTIME_Data.String
	header.REPOSITORYID = headerDB.REPOSITORYID_Data.String
	header.REQIFTOOLID = headerDB.REQIFTOOLID_Data.String
	header.REQIFVERSION = headerDB.REQIFVERSION_Data.String
	header.SOURCETOOLID = headerDB.SOURCETOOLID_Data.String
	header.TITLE = headerDB.TITLE_Data.String
}

// Backup generates a json file from a slice of all HEADERDB instances in the backrepo
func (backRepoHEADER *BackRepoHEADERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HEADERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HEADERDB, 0)
	for _, headerDB := range backRepoHEADER.Map_HEADERDBID_HEADERDB {
		forBackup = append(forBackup, headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json HEADER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json HEADER file", err.Error())
	}
}

// Backup generates a json file from a slice of all HEADERDB instances in the backrepo
func (backRepoHEADER *BackRepoHEADERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HEADERDB, 0)
	for _, headerDB := range backRepoHEADER.Map_HEADERDBID_HEADERDB {
		forBackup = append(forBackup, headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("HEADER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&HEADER_Fields, -1)
	for _, headerDB := range forBackup {

		var headerWOP HEADERWOP
		headerDB.CopyBasicFieldsToHEADERWOP(&headerWOP)

		row := sh.AddRow()
		row.WriteStruct(&headerWOP, -1)
	}
}

// RestoreXL from the "HEADER" sheet all HEADERDB instances
func (backRepoHEADER *BackRepoHEADERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHEADERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["HEADER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHEADER.rowVisitorHEADER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHEADER *BackRepoHEADERStruct) rowVisitorHEADER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var headerWOP HEADERWOP
		row.ReadStruct(&headerWOP)

		// add the unmarshalled struct to the stage
		headerDB := new(HEADERDB)
		headerDB.CopyBasicFieldsFromHEADERWOP(&headerWOP)

		headerDB_ID_atBackupTime := headerDB.ID
		headerDB.ID = 0
		query := backRepoHEADER.db.Create(headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHEADER.Map_HEADERDBID_HEADERDB[headerDB.ID] = headerDB
		BackRepoHEADERid_atBckpTime_newID[headerDB_ID_atBackupTime] = headerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HEADERDB.json" in dirPath that stores an array
// of HEADERDB and stores it in the database
// the map BackRepoHEADERid_atBckpTime_newID is updated accordingly
func (backRepoHEADER *BackRepoHEADERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHEADERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HEADERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json HEADER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HEADERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HEADERDBID_HEADERDB
	for _, headerDB := range forRestore {

		headerDB_ID_atBackupTime := headerDB.ID
		headerDB.ID = 0
		query := backRepoHEADER.db.Create(headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHEADER.Map_HEADERDBID_HEADERDB[headerDB.ID] = headerDB
		BackRepoHEADERid_atBckpTime_newID[headerDB_ID_atBackupTime] = headerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json HEADER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<HEADER>id_atBckpTime_newID
// to compute new index
func (backRepoHEADER *BackRepoHEADERStruct) RestorePhaseTwo() {

	for _, headerDB := range backRepoHEADER.Map_HEADERDBID_HEADERDB {

		// next line of code is to avert unused variable compilation error
		_ = headerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHEADER.db.Model(headerDB).Updates(*headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHEADER.ResetReversePointers commits all staged instances of HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHEADER *BackRepoHEADERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, header := range backRepoHEADER.Map_HEADERDBID_HEADERPtr {
		backRepoHEADER.ResetReversePointersInstance(backRepo, idx, header)
	}

	return
}

func (backRepoHEADER *BackRepoHEADERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, header *models.HEADER) (Error error) {

	// fetch matching headerDB
	if headerDB, ok := backRepoHEADER.Map_HEADERDBID_HEADERDB[idx]; ok {
		_ = headerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHEADERid_atBckpTime_newID map[uint]uint
