// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECRELATION_sql sql.NullBool
var dummy_SPECRELATION_time time.Duration
var dummy_SPECRELATION_sort sort.Float64Slice

// SPECRELATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specrelationAPI
type SPECRELATIONAPI struct {
	gorm.Model

	models.SPECRELATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECRELATIONPointersEncoding SPECRELATIONPointersEncoding
}

// SPECRELATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECRELATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field VALUES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VALUESID sql.NullInt64

	// field SOURCE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SOURCEID sql.NullInt64

	// field TARGET is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TARGETID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// SPECRELATIONDB describes a specrelation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specrelationDB
type SPECRELATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specrelationDB.Name
	Name_Data sql.NullString

	// Declation for basic field specrelationDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field specrelationDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field specrelationDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field specrelationDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECRELATIONPointersEncoding
}

// SPECRELATIONDBs arrays specrelationDBs
// swagger:response specrelationDBsResponse
type SPECRELATIONDBs []SPECRELATIONDB

// SPECRELATIONDBResponse provides response
// swagger:response specrelationDBResponse
type SPECRELATIONDBResponse struct {
	SPECRELATIONDB
}

// SPECRELATIONWOP is a SPECRELATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECRELATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPECRELATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoSPECRELATIONStruct struct {
	// stores SPECRELATIONDB according to their gorm ID
	Map_SPECRELATIONDBID_SPECRELATIONDB map[uint]*SPECRELATIONDB

	// stores SPECRELATIONDB ID according to SPECRELATION address
	Map_SPECRELATIONPtr_SPECRELATIONDBID map[*models.SPECRELATION]uint

	// stores SPECRELATION according to their gorm ID
	Map_SPECRELATIONDBID_SPECRELATIONPtr map[uint]*models.SPECRELATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECRELATION.stage
	return
}

func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) GetDB() *gorm.DB {
	return backRepoSPECRELATION.db
}

// GetSPECRELATIONDBFromSPECRELATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) GetSPECRELATIONDBFromSPECRELATIONPtr(specrelation *models.SPECRELATION) (specrelationDB *SPECRELATIONDB) {
	id := backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]
	specrelationDB = backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[id]
	return
}

// BackRepoSPECRELATION.CommitPhaseOne commits all staged instances of SPECRELATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specrelation := range stage.SPECRELATIONs {
		backRepoSPECRELATION.CommitPhaseOneInstance(specrelation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specrelation := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr {
		if _, ok := stage.SPECRELATIONs[specrelation]; !ok {
			backRepoSPECRELATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECRELATION.CommitDeleteInstance commits deletion of SPECRELATION to the BackRepo
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	specrelation := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[id]

	// specrelation is not staged anymore, remove specrelationDB
	specrelationDB := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[id]
	query := backRepoSPECRELATION.db.Unscoped().Delete(&specrelationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID, specrelation)
	delete(backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr, id)
	delete(backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB, id)

	return
}

// BackRepoSPECRELATION.CommitPhaseOneInstance commits specrelation staged instances of SPECRELATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CommitPhaseOneInstance(specrelation *models.SPECRELATION) (Error error) {

	// check if the specrelation is not commited yet
	if _, ok := backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]; ok {
		return
	}

	// initiate specrelation
	var specrelationDB SPECRELATIONDB
	specrelationDB.CopyBasicFieldsFromSPECRELATION(specrelation)

	query := backRepoSPECRELATION.db.Create(&specrelationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation] = specrelationDB.ID
	backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[specrelationDB.ID] = specrelation
	backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[specrelationDB.ID] = &specrelationDB

	return
}

// BackRepoSPECRELATION.CommitPhaseTwo commits all staged instances of SPECRELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelation := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr {
		backRepoSPECRELATION.CommitPhaseTwoInstance(backRepo, idx, specrelation)
	}

	return
}

// BackRepoSPECRELATION.CommitPhaseTwoInstance commits {{structname }} of models.SPECRELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specrelation *models.SPECRELATION) (Error error) {

	// fetch matching specrelationDB
	if specrelationDB, ok := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[idx]; ok {

		specrelationDB.CopyBasicFieldsFromSPECRELATION(specrelation)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value specrelation.ALTERNATIVEID translates to updating the specrelation.ALTERNATIVEIDID
		specrelationDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if specrelation.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[specrelation.ALTERNATIVEID]; ok {
				specrelationDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				specrelationDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			specrelationDB.ALTERNATIVEIDID.Int64 = 0
			specrelationDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value specrelation.VALUES translates to updating the specrelation.VALUESID
		specrelationDB.VALUESID.Valid = true // allow for a 0 value (nil association)
		if specrelation.VALUES != nil {
			if VALUESId, ok := backRepo.BackRepoVALUES.Map_VALUESPtr_VALUESDBID[specrelation.VALUES]; ok {
				specrelationDB.VALUESID.Int64 = int64(VALUESId)
				specrelationDB.VALUESID.Valid = true
			}
		} else {
			specrelationDB.VALUESID.Int64 = 0
			specrelationDB.VALUESID.Valid = true
		}

		// commit pointer value specrelation.SOURCE translates to updating the specrelation.SOURCEID
		specrelationDB.SOURCEID.Valid = true // allow for a 0 value (nil association)
		if specrelation.SOURCE != nil {
			if SOURCEId, ok := backRepo.BackRepoSOURCE.Map_SOURCEPtr_SOURCEDBID[specrelation.SOURCE]; ok {
				specrelationDB.SOURCEID.Int64 = int64(SOURCEId)
				specrelationDB.SOURCEID.Valid = true
			}
		} else {
			specrelationDB.SOURCEID.Int64 = 0
			specrelationDB.SOURCEID.Valid = true
		}

		// commit pointer value specrelation.TARGET translates to updating the specrelation.TARGETID
		specrelationDB.TARGETID.Valid = true // allow for a 0 value (nil association)
		if specrelation.TARGET != nil {
			if TARGETId, ok := backRepo.BackRepoTARGET.Map_TARGETPtr_TARGETDBID[specrelation.TARGET]; ok {
				specrelationDB.TARGETID.Int64 = int64(TARGETId)
				specrelationDB.TARGETID.Valid = true
			}
		} else {
			specrelationDB.TARGETID.Int64 = 0
			specrelationDB.TARGETID.Valid = true
		}

		// commit pointer value specrelation.TYPE translates to updating the specrelation.TYPEID
		specrelationDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if specrelation.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[specrelation.TYPE]; ok {
				specrelationDB.TYPEID.Int64 = int64(TYPEId)
				specrelationDB.TYPEID.Valid = true
			}
		} else {
			specrelationDB.TYPEID.Int64 = 0
			specrelationDB.TYPEID.Valid = true
		}

		query := backRepoSPECRELATION.db.Save(&specrelationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECRELATION intance %s", specrelation.Name))
		return err
	}

	return
}

// BackRepoSPECRELATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CheckoutPhaseOne() (Error error) {

	specrelationDBArray := make([]SPECRELATIONDB, 0)
	query := backRepoSPECRELATION.db.Find(&specrelationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specrelationInstancesToBeRemovedFromTheStage := make(map[*models.SPECRELATION]any)
	for key, value := range backRepoSPECRELATION.stage.SPECRELATIONs {
		specrelationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specrelationDB := range specrelationDBArray {
		backRepoSPECRELATION.CheckoutPhaseOneInstance(&specrelationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specrelation, ok := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[specrelationDB.ID]
		if ok {
			delete(specrelationInstancesToBeRemovedFromTheStage, specrelation)
		}
	}

	// remove from stage and back repo's 3 maps all specrelations that are not in the checkout
	for specrelation := range specrelationInstancesToBeRemovedFromTheStage {
		specrelation.Unstage(backRepoSPECRELATION.GetStage())

		// remove instance from the back repo 3 maps
		specrelationID := backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]
		delete(backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID, specrelation)
		delete(backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB, specrelationID)
		delete(backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr, specrelationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specrelationDB that has been found in the DB, updates the backRepo and stages the
// models version of the specrelationDB
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CheckoutPhaseOneInstance(specrelationDB *SPECRELATIONDB) (Error error) {

	specrelation, ok := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[specrelationDB.ID]
	if !ok {
		specrelation = new(models.SPECRELATION)

		backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[specrelationDB.ID] = specrelation
		backRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation] = specrelationDB.ID

		// append model store with the new element
		specrelation.Name = specrelationDB.Name_Data.String
		specrelation.Stage(backRepoSPECRELATION.GetStage())
	}
	specrelationDB.CopyBasicFieldsToSPECRELATION(specrelation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specrelation.Stage(backRepoSPECRELATION.GetStage())

	// preserve pointer to specrelationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECRELATIONDBID_SPECRELATIONDB)[specrelationDB hold variable pointers
	specrelationDB_Data := *specrelationDB
	preservedPtrToSPECRELATION := &specrelationDB_Data
	backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[specrelationDB.ID] = preservedPtrToSPECRELATION

	return
}

// BackRepoSPECRELATION.CheckoutPhaseTwo Checkouts all staged instances of SPECRELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specrelationDB := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB {
		backRepoSPECRELATION.CheckoutPhaseTwoInstance(backRepo, specrelationDB)
	}
	return
}

// BackRepoSPECRELATION.CheckoutPhaseTwoInstance Checkouts staged instances of SPECRELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specrelationDB *SPECRELATIONDB) (Error error) {

	specrelation := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr[specrelationDB.ID]

	specrelationDB.DecodePointers(backRepo, specrelation)

	return
}

func (specrelationDB *SPECRELATIONDB) DecodePointers(backRepo *BackRepoStruct, specrelation *models.SPECRELATION) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	specrelation.ALTERNATIVEID = nil
	if specrelationDB.ALTERNATIVEIDID.Int64 != 0 {
		specrelation.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(specrelationDB.ALTERNATIVEIDID.Int64)]
	}
	// VALUES field
	specrelation.VALUES = nil
	if specrelationDB.VALUESID.Int64 != 0 {
		specrelation.VALUES = backRepo.BackRepoVALUES.Map_VALUESDBID_VALUESPtr[uint(specrelationDB.VALUESID.Int64)]
	}
	// SOURCE field
	specrelation.SOURCE = nil
	if specrelationDB.SOURCEID.Int64 != 0 {
		specrelation.SOURCE = backRepo.BackRepoSOURCE.Map_SOURCEDBID_SOURCEPtr[uint(specrelationDB.SOURCEID.Int64)]
	}
	// TARGET field
	specrelation.TARGET = nil
	if specrelationDB.TARGETID.Int64 != 0 {
		specrelation.TARGET = backRepo.BackRepoTARGET.Map_TARGETDBID_TARGETPtr[uint(specrelationDB.TARGETID.Int64)]
	}
	// TYPE field
	specrelation.TYPE = nil
	if specrelationDB.TYPEID.Int64 != 0 {
		specrelation.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(specrelationDB.TYPEID.Int64)]
	}
	return
}

// CommitSPECRELATION allows commit of a single specrelation (if already staged)
func (backRepo *BackRepoStruct) CommitSPECRELATION(specrelation *models.SPECRELATION) {
	backRepo.BackRepoSPECRELATION.CommitPhaseOneInstance(specrelation)
	if id, ok := backRepo.BackRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]; ok {
		backRepo.BackRepoSPECRELATION.CommitPhaseTwoInstance(backRepo, id, specrelation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECRELATION allows checkout of a single specrelation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECRELATION(specrelation *models.SPECRELATION) {
	// check if the specrelation is staged
	if _, ok := backRepo.BackRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]; ok {

		if id, ok := backRepo.BackRepoSPECRELATION.Map_SPECRELATIONPtr_SPECRELATIONDBID[specrelation]; ok {
			var specrelationDB SPECRELATIONDB
			specrelationDB.ID = id

			if err := backRepo.BackRepoSPECRELATION.db.First(&specrelationDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECRELATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECRELATION.CheckoutPhaseOneInstance(&specrelationDB)
			backRepo.BackRepoSPECRELATION.CheckoutPhaseTwoInstance(backRepo, &specrelationDB)
		}
	}
}

// CopyBasicFieldsFromSPECRELATION
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsFromSPECRELATION(specrelation *models.SPECRELATION) {
	// insertion point for fields commit

	specrelationDB.Name_Data.String = specrelation.Name
	specrelationDB.Name_Data.Valid = true

	specrelationDB.DESCAttr_Data.String = specrelation.DESCAttr
	specrelationDB.DESCAttr_Data.Valid = true

	specrelationDB.IDENTIFIERAttr_Data.String = specrelation.IDENTIFIERAttr
	specrelationDB.IDENTIFIERAttr_Data.Valid = true

	specrelationDB.LASTCHANGEAttr_Data.String = specrelation.LASTCHANGEAttr
	specrelationDB.LASTCHANGEAttr_Data.Valid = true

	specrelationDB.LONGNAMEAttr_Data.String = specrelation.LONGNAMEAttr
	specrelationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATION_WOP
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsFromSPECRELATION_WOP(specrelation *models.SPECRELATION_WOP) {
	// insertion point for fields commit

	specrelationDB.Name_Data.String = specrelation.Name
	specrelationDB.Name_Data.Valid = true

	specrelationDB.DESCAttr_Data.String = specrelation.DESCAttr
	specrelationDB.DESCAttr_Data.Valid = true

	specrelationDB.IDENTIFIERAttr_Data.String = specrelation.IDENTIFIERAttr
	specrelationDB.IDENTIFIERAttr_Data.Valid = true

	specrelationDB.LASTCHANGEAttr_Data.String = specrelation.LASTCHANGEAttr
	specrelationDB.LASTCHANGEAttr_Data.Valid = true

	specrelationDB.LONGNAMEAttr_Data.String = specrelation.LONGNAMEAttr
	specrelationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromSPECRELATIONWOP
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsFromSPECRELATIONWOP(specrelation *SPECRELATIONWOP) {
	// insertion point for fields commit

	specrelationDB.Name_Data.String = specrelation.Name
	specrelationDB.Name_Data.Valid = true

	specrelationDB.DESCAttr_Data.String = specrelation.DESCAttr
	specrelationDB.DESCAttr_Data.Valid = true

	specrelationDB.IDENTIFIERAttr_Data.String = specrelation.IDENTIFIERAttr
	specrelationDB.IDENTIFIERAttr_Data.Valid = true

	specrelationDB.LASTCHANGEAttr_Data.String = specrelation.LASTCHANGEAttr
	specrelationDB.LASTCHANGEAttr_Data.Valid = true

	specrelationDB.LONGNAMEAttr_Data.String = specrelation.LONGNAMEAttr
	specrelationDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToSPECRELATION
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsToSPECRELATION(specrelation *models.SPECRELATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelation.Name = specrelationDB.Name_Data.String
	specrelation.DESCAttr = specrelationDB.DESCAttr_Data.String
	specrelation.IDENTIFIERAttr = specrelationDB.IDENTIFIERAttr_Data.String
	specrelation.LASTCHANGEAttr = specrelationDB.LASTCHANGEAttr_Data.String
	specrelation.LONGNAMEAttr = specrelationDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECRELATION_WOP
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsToSPECRELATION_WOP(specrelation *models.SPECRELATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specrelation.Name = specrelationDB.Name_Data.String
	specrelation.DESCAttr = specrelationDB.DESCAttr_Data.String
	specrelation.IDENTIFIERAttr = specrelationDB.IDENTIFIERAttr_Data.String
	specrelation.LASTCHANGEAttr = specrelationDB.LASTCHANGEAttr_Data.String
	specrelation.LONGNAMEAttr = specrelationDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToSPECRELATIONWOP
func (specrelationDB *SPECRELATIONDB) CopyBasicFieldsToSPECRELATIONWOP(specrelation *SPECRELATIONWOP) {
	specrelation.ID = int(specrelationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specrelation.Name = specrelationDB.Name_Data.String
	specrelation.DESCAttr = specrelationDB.DESCAttr_Data.String
	specrelation.IDENTIFIERAttr = specrelationDB.IDENTIFIERAttr_Data.String
	specrelation.LASTCHANGEAttr = specrelationDB.LASTCHANGEAttr_Data.String
	specrelation.LONGNAMEAttr = specrelationDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all SPECRELATIONDB instances in the backrepo
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECRELATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONDB, 0)
	for _, specrelationDB := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB {
		forBackup = append(forBackup, specrelationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECRELATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECRELATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECRELATIONDB instances in the backrepo
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECRELATIONDB, 0)
	for _, specrelationDB := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB {
		forBackup = append(forBackup, specrelationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECRELATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECRELATION_Fields, -1)
	for _, specrelationDB := range forBackup {

		var specrelationWOP SPECRELATIONWOP
		specrelationDB.CopyBasicFieldsToSPECRELATIONWOP(&specrelationWOP)

		row := sh.AddRow()
		row.WriteStruct(&specrelationWOP, -1)
	}
}

// RestoreXL from the "SPECRELATION" sheet all SPECRELATIONDB instances
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECRELATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECRELATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECRELATION.rowVisitorSPECRELATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) rowVisitorSPECRELATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specrelationWOP SPECRELATIONWOP
		row.ReadStruct(&specrelationWOP)

		// add the unmarshalled struct to the stage
		specrelationDB := new(SPECRELATIONDB)
		specrelationDB.CopyBasicFieldsFromSPECRELATIONWOP(&specrelationWOP)

		specrelationDB_ID_atBackupTime := specrelationDB.ID
		specrelationDB.ID = 0
		query := backRepoSPECRELATION.db.Create(specrelationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[specrelationDB.ID] = specrelationDB
		BackRepoSPECRELATIONid_atBckpTime_newID[specrelationDB_ID_atBackupTime] = specrelationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECRELATIONDB.json" in dirPath that stores an array
// of SPECRELATIONDB and stores it in the database
// the map BackRepoSPECRELATIONid_atBckpTime_newID is updated accordingly
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECRELATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECRELATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECRELATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECRELATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECRELATIONDBID_SPECRELATIONDB
	for _, specrelationDB := range forRestore {

		specrelationDB_ID_atBackupTime := specrelationDB.ID
		specrelationDB.ID = 0
		query := backRepoSPECRELATION.db.Create(specrelationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[specrelationDB.ID] = specrelationDB
		BackRepoSPECRELATIONid_atBckpTime_newID[specrelationDB_ID_atBackupTime] = specrelationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECRELATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECRELATION>id_atBckpTime_newID
// to compute new index
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) RestorePhaseTwo() {

	for _, specrelationDB := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = specrelationDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if specrelationDB.ALTERNATIVEIDID.Int64 != 0 {
			specrelationDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(specrelationDB.ALTERNATIVEIDID.Int64)])
			specrelationDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing VALUES field
		if specrelationDB.VALUESID.Int64 != 0 {
			specrelationDB.VALUESID.Int64 = int64(BackRepoVALUESid_atBckpTime_newID[uint(specrelationDB.VALUESID.Int64)])
			specrelationDB.VALUESID.Valid = true
		}

		// reindexing SOURCE field
		if specrelationDB.SOURCEID.Int64 != 0 {
			specrelationDB.SOURCEID.Int64 = int64(BackRepoSOURCEid_atBckpTime_newID[uint(specrelationDB.SOURCEID.Int64)])
			specrelationDB.SOURCEID.Valid = true
		}

		// reindexing TARGET field
		if specrelationDB.TARGETID.Int64 != 0 {
			specrelationDB.TARGETID.Int64 = int64(BackRepoTARGETid_atBckpTime_newID[uint(specrelationDB.TARGETID.Int64)])
			specrelationDB.TARGETID.Valid = true
		}

		// reindexing TYPE field
		if specrelationDB.TYPEID.Int64 != 0 {
			specrelationDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(specrelationDB.TYPEID.Int64)])
			specrelationDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSPECRELATION.db.Model(specrelationDB).Updates(*specrelationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECRELATION.ResetReversePointers commits all staged instances of SPECRELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specrelation := range backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONPtr {
		backRepoSPECRELATION.ResetReversePointersInstance(backRepo, idx, specrelation)
	}

	return
}

func (backRepoSPECRELATION *BackRepoSPECRELATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specrelation *models.SPECRELATION) (Error error) {

	// fetch matching specrelationDB
	if specrelationDB, ok := backRepoSPECRELATION.Map_SPECRELATIONDBID_SPECRELATIONDB[idx]; ok {
		_ = specrelationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECRELATIONid_atBckpTime_newID map[uint]uint
