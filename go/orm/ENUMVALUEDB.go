// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ENUMVALUE_sql sql.NullBool
var dummy_ENUMVALUE_time time.Duration
var dummy_ENUMVALUE_sort sort.Float64Slice

// ENUMVALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model enumvalueAPI
type ENUMVALUEAPI struct {
	gorm.Model

	models.ENUMVALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ENUMVALUEPointersEncoding ENUMVALUEPointersEncoding
}

// ENUMVALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ENUMVALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field PROPERTIES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PROPERTIESID sql.NullInt64
}

// ENUMVALUEDB describes a enumvalue in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model enumvalueDB
type ENUMVALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field enumvalueDB.Name
	Name_Data sql.NullString

	// Declation for basic field enumvalueDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field enumvalueDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field enumvalueDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field enumvalueDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ENUMVALUEPointersEncoding
}

// ENUMVALUEDBs arrays enumvalueDBs
// swagger:response enumvalueDBsResponse
type ENUMVALUEDBs []ENUMVALUEDB

// ENUMVALUEDBResponse provides response
// swagger:response enumvalueDBResponse
type ENUMVALUEDBResponse struct {
	ENUMVALUEDB
}

// ENUMVALUEWOP is a ENUMVALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ENUMVALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var ENUMVALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoENUMVALUEStruct struct {
	// stores ENUMVALUEDB according to their gorm ID
	Map_ENUMVALUEDBID_ENUMVALUEDB map[uint]*ENUMVALUEDB

	// stores ENUMVALUEDB ID according to ENUMVALUE address
	Map_ENUMVALUEPtr_ENUMVALUEDBID map[*models.ENUMVALUE]uint

	// stores ENUMVALUE according to their gorm ID
	Map_ENUMVALUEDBID_ENUMVALUEPtr map[uint]*models.ENUMVALUE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoENUMVALUE.stage
	return
}

func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) GetDB() *gorm.DB {
	return backRepoENUMVALUE.db
}

// GetENUMVALUEDBFromENUMVALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) GetENUMVALUEDBFromENUMVALUEPtr(enumvalue *models.ENUMVALUE) (enumvalueDB *ENUMVALUEDB) {
	id := backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]
	enumvalueDB = backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[id]
	return
}

// BackRepoENUMVALUE.CommitPhaseOne commits all staged instances of ENUMVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for enumvalue := range stage.ENUMVALUEs {
		backRepoENUMVALUE.CommitPhaseOneInstance(enumvalue)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, enumvalue := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr {
		if _, ok := stage.ENUMVALUEs[enumvalue]; !ok {
			backRepoENUMVALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoENUMVALUE.CommitDeleteInstance commits deletion of ENUMVALUE to the BackRepo
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	enumvalue := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[id]

	// enumvalue is not staged anymore, remove enumvalueDB
	enumvalueDB := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[id]
	query := backRepoENUMVALUE.db.Unscoped().Delete(&enumvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID, enumvalue)
	delete(backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr, id)
	delete(backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB, id)

	return
}

// BackRepoENUMVALUE.CommitPhaseOneInstance commits enumvalue staged instances of ENUMVALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CommitPhaseOneInstance(enumvalue *models.ENUMVALUE) (Error error) {

	// check if the enumvalue is not commited yet
	if _, ok := backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]; ok {
		return
	}

	// initiate enumvalue
	var enumvalueDB ENUMVALUEDB
	enumvalueDB.CopyBasicFieldsFromENUMVALUE(enumvalue)

	query := backRepoENUMVALUE.db.Create(&enumvalueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue] = enumvalueDB.ID
	backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[enumvalueDB.ID] = enumvalue
	backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[enumvalueDB.ID] = &enumvalueDB

	return
}

// BackRepoENUMVALUE.CommitPhaseTwo commits all staged instances of ENUMVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, enumvalue := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr {
		backRepoENUMVALUE.CommitPhaseTwoInstance(backRepo, idx, enumvalue)
	}

	return
}

// BackRepoENUMVALUE.CommitPhaseTwoInstance commits {{structname }} of models.ENUMVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, enumvalue *models.ENUMVALUE) (Error error) {

	// fetch matching enumvalueDB
	if enumvalueDB, ok := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[idx]; ok {

		enumvalueDB.CopyBasicFieldsFromENUMVALUE(enumvalue)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value enumvalue.ALTERNATIVEID translates to updating the enumvalue.ALTERNATIVEIDID
		enumvalueDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if enumvalue.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[enumvalue.ALTERNATIVEID]; ok {
				enumvalueDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				enumvalueDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			enumvalueDB.ALTERNATIVEIDID.Int64 = 0
			enumvalueDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value enumvalue.PROPERTIES translates to updating the enumvalue.PROPERTIESID
		enumvalueDB.PROPERTIESID.Valid = true // allow for a 0 value (nil association)
		if enumvalue.PROPERTIES != nil {
			if PROPERTIESId, ok := backRepo.BackRepoPROPERTIES.Map_PROPERTIESPtr_PROPERTIESDBID[enumvalue.PROPERTIES]; ok {
				enumvalueDB.PROPERTIESID.Int64 = int64(PROPERTIESId)
				enumvalueDB.PROPERTIESID.Valid = true
			}
		} else {
			enumvalueDB.PROPERTIESID.Int64 = 0
			enumvalueDB.PROPERTIESID.Valid = true
		}

		query := backRepoENUMVALUE.db.Save(&enumvalueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ENUMVALUE intance %s", enumvalue.Name))
		return err
	}

	return
}

// BackRepoENUMVALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CheckoutPhaseOne() (Error error) {

	enumvalueDBArray := make([]ENUMVALUEDB, 0)
	query := backRepoENUMVALUE.db.Find(&enumvalueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	enumvalueInstancesToBeRemovedFromTheStage := make(map[*models.ENUMVALUE]any)
	for key, value := range backRepoENUMVALUE.stage.ENUMVALUEs {
		enumvalueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, enumvalueDB := range enumvalueDBArray {
		backRepoENUMVALUE.CheckoutPhaseOneInstance(&enumvalueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		enumvalue, ok := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[enumvalueDB.ID]
		if ok {
			delete(enumvalueInstancesToBeRemovedFromTheStage, enumvalue)
		}
	}

	// remove from stage and back repo's 3 maps all enumvalues that are not in the checkout
	for enumvalue := range enumvalueInstancesToBeRemovedFromTheStage {
		enumvalue.Unstage(backRepoENUMVALUE.GetStage())

		// remove instance from the back repo 3 maps
		enumvalueID := backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]
		delete(backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID, enumvalue)
		delete(backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB, enumvalueID)
		delete(backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr, enumvalueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a enumvalueDB that has been found in the DB, updates the backRepo and stages the
// models version of the enumvalueDB
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CheckoutPhaseOneInstance(enumvalueDB *ENUMVALUEDB) (Error error) {

	enumvalue, ok := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[enumvalueDB.ID]
	if !ok {
		enumvalue = new(models.ENUMVALUE)

		backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[enumvalueDB.ID] = enumvalue
		backRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue] = enumvalueDB.ID

		// append model store with the new element
		enumvalue.Name = enumvalueDB.Name_Data.String
		enumvalue.Stage(backRepoENUMVALUE.GetStage())
	}
	enumvalueDB.CopyBasicFieldsToENUMVALUE(enumvalue)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	enumvalue.Stage(backRepoENUMVALUE.GetStage())

	// preserve pointer to enumvalueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ENUMVALUEDBID_ENUMVALUEDB)[enumvalueDB hold variable pointers
	enumvalueDB_Data := *enumvalueDB
	preservedPtrToENUMVALUE := &enumvalueDB_Data
	backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[enumvalueDB.ID] = preservedPtrToENUMVALUE

	return
}

// BackRepoENUMVALUE.CheckoutPhaseTwo Checkouts all staged instances of ENUMVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, enumvalueDB := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB {
		backRepoENUMVALUE.CheckoutPhaseTwoInstance(backRepo, enumvalueDB)
	}
	return
}

// BackRepoENUMVALUE.CheckoutPhaseTwoInstance Checkouts staged instances of ENUMVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, enumvalueDB *ENUMVALUEDB) (Error error) {

	enumvalue := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[enumvalueDB.ID]

	enumvalueDB.DecodePointers(backRepo, enumvalue)

	return
}

func (enumvalueDB *ENUMVALUEDB) DecodePointers(backRepo *BackRepoStruct, enumvalue *models.ENUMVALUE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	enumvalue.ALTERNATIVEID = nil
	if enumvalueDB.ALTERNATIVEIDID.Int64 != 0 {
		enumvalue.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(enumvalueDB.ALTERNATIVEIDID.Int64)]
	}
	// PROPERTIES field
	enumvalue.PROPERTIES = nil
	if enumvalueDB.PROPERTIESID.Int64 != 0 {
		enumvalue.PROPERTIES = backRepo.BackRepoPROPERTIES.Map_PROPERTIESDBID_PROPERTIESPtr[uint(enumvalueDB.PROPERTIESID.Int64)]
	}
	return
}

// CommitENUMVALUE allows commit of a single enumvalue (if already staged)
func (backRepo *BackRepoStruct) CommitENUMVALUE(enumvalue *models.ENUMVALUE) {
	backRepo.BackRepoENUMVALUE.CommitPhaseOneInstance(enumvalue)
	if id, ok := backRepo.BackRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]; ok {
		backRepo.BackRepoENUMVALUE.CommitPhaseTwoInstance(backRepo, id, enumvalue)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitENUMVALUE allows checkout of a single enumvalue (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutENUMVALUE(enumvalue *models.ENUMVALUE) {
	// check if the enumvalue is staged
	if _, ok := backRepo.BackRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]; ok {

		if id, ok := backRepo.BackRepoENUMVALUE.Map_ENUMVALUEPtr_ENUMVALUEDBID[enumvalue]; ok {
			var enumvalueDB ENUMVALUEDB
			enumvalueDB.ID = id

			if err := backRepo.BackRepoENUMVALUE.db.First(&enumvalueDB, id).Error; err != nil {
				log.Fatalln("CheckoutENUMVALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoENUMVALUE.CheckoutPhaseOneInstance(&enumvalueDB)
			backRepo.BackRepoENUMVALUE.CheckoutPhaseTwoInstance(backRepo, &enumvalueDB)
		}
	}
}

// CopyBasicFieldsFromENUMVALUE
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsFromENUMVALUE(enumvalue *models.ENUMVALUE) {
	// insertion point for fields commit

	enumvalueDB.Name_Data.String = enumvalue.Name
	enumvalueDB.Name_Data.Valid = true

	enumvalueDB.DESCAttr_Data.String = enumvalue.DESCAttr
	enumvalueDB.DESCAttr_Data.Valid = true

	enumvalueDB.IDENTIFIERAttr_Data.String = enumvalue.IDENTIFIERAttr
	enumvalueDB.IDENTIFIERAttr_Data.Valid = true

	enumvalueDB.LASTCHANGEAttr_Data.String = enumvalue.LASTCHANGEAttr
	enumvalueDB.LASTCHANGEAttr_Data.Valid = true

	enumvalueDB.LONGNAMEAttr_Data.String = enumvalue.LONGNAMEAttr
	enumvalueDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromENUMVALUE_WOP
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsFromENUMVALUE_WOP(enumvalue *models.ENUMVALUE_WOP) {
	// insertion point for fields commit

	enumvalueDB.Name_Data.String = enumvalue.Name
	enumvalueDB.Name_Data.Valid = true

	enumvalueDB.DESCAttr_Data.String = enumvalue.DESCAttr
	enumvalueDB.DESCAttr_Data.Valid = true

	enumvalueDB.IDENTIFIERAttr_Data.String = enumvalue.IDENTIFIERAttr
	enumvalueDB.IDENTIFIERAttr_Data.Valid = true

	enumvalueDB.LASTCHANGEAttr_Data.String = enumvalue.LASTCHANGEAttr
	enumvalueDB.LASTCHANGEAttr_Data.Valid = true

	enumvalueDB.LONGNAMEAttr_Data.String = enumvalue.LONGNAMEAttr
	enumvalueDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromENUMVALUEWOP
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsFromENUMVALUEWOP(enumvalue *ENUMVALUEWOP) {
	// insertion point for fields commit

	enumvalueDB.Name_Data.String = enumvalue.Name
	enumvalueDB.Name_Data.Valid = true

	enumvalueDB.DESCAttr_Data.String = enumvalue.DESCAttr
	enumvalueDB.DESCAttr_Data.Valid = true

	enumvalueDB.IDENTIFIERAttr_Data.String = enumvalue.IDENTIFIERAttr
	enumvalueDB.IDENTIFIERAttr_Data.Valid = true

	enumvalueDB.LASTCHANGEAttr_Data.String = enumvalue.LASTCHANGEAttr
	enumvalueDB.LASTCHANGEAttr_Data.Valid = true

	enumvalueDB.LONGNAMEAttr_Data.String = enumvalue.LONGNAMEAttr
	enumvalueDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToENUMVALUE
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsToENUMVALUE(enumvalue *models.ENUMVALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	enumvalue.Name = enumvalueDB.Name_Data.String
	enumvalue.DESCAttr = enumvalueDB.DESCAttr_Data.String
	enumvalue.IDENTIFIERAttr = enumvalueDB.IDENTIFIERAttr_Data.String
	enumvalue.LASTCHANGEAttr = enumvalueDB.LASTCHANGEAttr_Data.String
	enumvalue.LONGNAMEAttr = enumvalueDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToENUMVALUE_WOP
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsToENUMVALUE_WOP(enumvalue *models.ENUMVALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	enumvalue.Name = enumvalueDB.Name_Data.String
	enumvalue.DESCAttr = enumvalueDB.DESCAttr_Data.String
	enumvalue.IDENTIFIERAttr = enumvalueDB.IDENTIFIERAttr_Data.String
	enumvalue.LASTCHANGEAttr = enumvalueDB.LASTCHANGEAttr_Data.String
	enumvalue.LONGNAMEAttr = enumvalueDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToENUMVALUEWOP
func (enumvalueDB *ENUMVALUEDB) CopyBasicFieldsToENUMVALUEWOP(enumvalue *ENUMVALUEWOP) {
	enumvalue.ID = int(enumvalueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	enumvalue.Name = enumvalueDB.Name_Data.String
	enumvalue.DESCAttr = enumvalueDB.DESCAttr_Data.String
	enumvalue.IDENTIFIERAttr = enumvalueDB.IDENTIFIERAttr_Data.String
	enumvalue.LASTCHANGEAttr = enumvalueDB.LASTCHANGEAttr_Data.String
	enumvalue.LONGNAMEAttr = enumvalueDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all ENUMVALUEDB instances in the backrepo
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ENUMVALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ENUMVALUEDB, 0)
	for _, enumvalueDB := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB {
		forBackup = append(forBackup, enumvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ENUMVALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ENUMVALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all ENUMVALUEDB instances in the backrepo
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ENUMVALUEDB, 0)
	for _, enumvalueDB := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB {
		forBackup = append(forBackup, enumvalueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ENUMVALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ENUMVALUE_Fields, -1)
	for _, enumvalueDB := range forBackup {

		var enumvalueWOP ENUMVALUEWOP
		enumvalueDB.CopyBasicFieldsToENUMVALUEWOP(&enumvalueWOP)

		row := sh.AddRow()
		row.WriteStruct(&enumvalueWOP, -1)
	}
}

// RestoreXL from the "ENUMVALUE" sheet all ENUMVALUEDB instances
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoENUMVALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ENUMVALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoENUMVALUE.rowVisitorENUMVALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) rowVisitorENUMVALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var enumvalueWOP ENUMVALUEWOP
		row.ReadStruct(&enumvalueWOP)

		// add the unmarshalled struct to the stage
		enumvalueDB := new(ENUMVALUEDB)
		enumvalueDB.CopyBasicFieldsFromENUMVALUEWOP(&enumvalueWOP)

		enumvalueDB_ID_atBackupTime := enumvalueDB.ID
		enumvalueDB.ID = 0
		query := backRepoENUMVALUE.db.Create(enumvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[enumvalueDB.ID] = enumvalueDB
		BackRepoENUMVALUEid_atBckpTime_newID[enumvalueDB_ID_atBackupTime] = enumvalueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ENUMVALUEDB.json" in dirPath that stores an array
// of ENUMVALUEDB and stores it in the database
// the map BackRepoENUMVALUEid_atBckpTime_newID is updated accordingly
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoENUMVALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ENUMVALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ENUMVALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ENUMVALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ENUMVALUEDBID_ENUMVALUEDB
	for _, enumvalueDB := range forRestore {

		enumvalueDB_ID_atBackupTime := enumvalueDB.ID
		enumvalueDB.ID = 0
		query := backRepoENUMVALUE.db.Create(enumvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[enumvalueDB.ID] = enumvalueDB
		BackRepoENUMVALUEid_atBckpTime_newID[enumvalueDB_ID_atBackupTime] = enumvalueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ENUMVALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ENUMVALUE>id_atBckpTime_newID
// to compute new index
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) RestorePhaseTwo() {

	for _, enumvalueDB := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = enumvalueDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if enumvalueDB.ALTERNATIVEIDID.Int64 != 0 {
			enumvalueDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(enumvalueDB.ALTERNATIVEIDID.Int64)])
			enumvalueDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing PROPERTIES field
		if enumvalueDB.PROPERTIESID.Int64 != 0 {
			enumvalueDB.PROPERTIESID.Int64 = int64(BackRepoPROPERTIESid_atBckpTime_newID[uint(enumvalueDB.PROPERTIESID.Int64)])
			enumvalueDB.PROPERTIESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoENUMVALUE.db.Model(enumvalueDB).Updates(*enumvalueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoENUMVALUE.ResetReversePointers commits all staged instances of ENUMVALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, enumvalue := range backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr {
		backRepoENUMVALUE.ResetReversePointersInstance(backRepo, idx, enumvalue)
	}

	return
}

func (backRepoENUMVALUE *BackRepoENUMVALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, enumvalue *models.ENUMVALUE) (Error error) {

	// fetch matching enumvalueDB
	if enumvalueDB, ok := backRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEDB[idx]; ok {
		_ = enumvalueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoENUMVALUEid_atBckpTime_newID map[uint]uint
