// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEDEFINITIONXHTML_sql sql.NullBool
var dummy_ATTRIBUTEDEFINITIONXHTML_time time.Duration
var dummy_ATTRIBUTEDEFINITIONXHTML_sort sort.Float64Slice

// ATTRIBUTEDEFINITIONXHTMLAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributedefinitionxhtmlAPI
type ATTRIBUTEDEFINITIONXHTMLAPI struct {
	gorm.Model

	models.ATTRIBUTEDEFINITIONXHTML_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEDEFINITIONXHTMLPointersEncoding ATTRIBUTEDEFINITIONXHTMLPointersEncoding
}

// ATTRIBUTEDEFINITIONXHTMLPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEDEFINITIONXHTMLPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field DEFAULTVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFAULTVALUEID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// ATTRIBUTEDEFINITIONXHTMLDB describes a attributedefinitionxhtml in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributedefinitionxhtmlDB
type ATTRIBUTEDEFINITIONXHTMLDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributedefinitionxhtmlDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributedefinitionxhtmlDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field attributedefinitionxhtmlDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field attributedefinitionxhtmlDB.ISEDITABLEAttr
	// provide the sql storage for the boolan
	ISEDITABLEAttr_Data sql.NullBool

	// Declation for basic field attributedefinitionxhtmlDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field attributedefinitionxhtmlDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEDEFINITIONXHTMLPointersEncoding
}

// ATTRIBUTEDEFINITIONXHTMLDBs arrays attributedefinitionxhtmlDBs
// swagger:response attributedefinitionxhtmlDBsResponse
type ATTRIBUTEDEFINITIONXHTMLDBs []ATTRIBUTEDEFINITIONXHTMLDB

// ATTRIBUTEDEFINITIONXHTMLDBResponse provides response
// swagger:response attributedefinitionxhtmlDBResponse
type ATTRIBUTEDEFINITIONXHTMLDBResponse struct {
	ATTRIBUTEDEFINITIONXHTMLDB
}

// ATTRIBUTEDEFINITIONXHTMLWOP is a ATTRIBUTEDEFINITIONXHTML without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEDEFINITIONXHTMLWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	ISEDITABLEAttr bool `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEDEFINITIONXHTML_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"ISEDITABLEAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoATTRIBUTEDEFINITIONXHTMLStruct struct {
	// stores ATTRIBUTEDEFINITIONXHTMLDB according to their gorm ID
	Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB map[uint]*ATTRIBUTEDEFINITIONXHTMLDB

	// stores ATTRIBUTEDEFINITIONXHTMLDB ID according to ATTRIBUTEDEFINITIONXHTML address
	Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID map[*models.ATTRIBUTEDEFINITIONXHTML]uint

	// stores ATTRIBUTEDEFINITIONXHTML according to their gorm ID
	Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr map[uint]*models.ATTRIBUTEDEFINITIONXHTML

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEDEFINITIONXHTML.stage
	return
}

func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEDEFINITIONXHTML.db
}

// GetATTRIBUTEDEFINITIONXHTMLDBFromATTRIBUTEDEFINITIONXHTMLPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) GetATTRIBUTEDEFINITIONXHTMLDBFromATTRIBUTEDEFINITIONXHTMLPtr(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) {
	id := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]
	attributedefinitionxhtmlDB = backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[id]
	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseOne commits all staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributedefinitionxhtml := range stage.ATTRIBUTEDEFINITIONXHTMLs {
		backRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseOneInstance(attributedefinitionxhtml)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributedefinitionxhtml := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr {
		if _, ok := stage.ATTRIBUTEDEFINITIONXHTMLs[attributedefinitionxhtml]; !ok {
			backRepoATTRIBUTEDEFINITIONXHTML.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CommitDeleteInstance commits deletion of ATTRIBUTEDEFINITIONXHTML to the BackRepo
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CommitDeleteInstance(id uint) (Error error) {

	attributedefinitionxhtml := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[id]

	// attributedefinitionxhtml is not staged anymore, remove attributedefinitionxhtmlDB
	attributedefinitionxhtmlDB := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[id]
	query := backRepoATTRIBUTEDEFINITIONXHTML.db.Unscoped().Delete(&attributedefinitionxhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID, attributedefinitionxhtml)
	delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr, id)
	delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB, id)

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseOneInstance commits attributedefinitionxhtml staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CommitPhaseOneInstance(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) (Error error) {

	// check if the attributedefinitionxhtml is not commited yet
	if _, ok := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]; ok {
		return
	}

	// initiate attributedefinitionxhtml
	var attributedefinitionxhtmlDB ATTRIBUTEDEFINITIONXHTMLDB
	attributedefinitionxhtmlDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml)

	query := backRepoATTRIBUTEDEFINITIONXHTML.db.Create(&attributedefinitionxhtmlDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml] = attributedefinitionxhtmlDB.ID
	backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[attributedefinitionxhtmlDB.ID] = attributedefinitionxhtml
	backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[attributedefinitionxhtmlDB.ID] = &attributedefinitionxhtmlDB

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseTwo commits all staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionxhtml := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr {
		backRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseTwoInstance(backRepo, idx, attributedefinitionxhtml)
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) (Error error) {

	// fetch matching attributedefinitionxhtmlDB
	if attributedefinitionxhtmlDB, ok := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[idx]; ok {

		attributedefinitionxhtmlDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributedefinitionxhtml.ALTERNATIVEID translates to updating the attributedefinitionxhtml.ALTERNATIVEIDID
		attributedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionxhtml.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[attributedefinitionxhtml.ALTERNATIVEID]; ok {
				attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				attributedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = 0
			attributedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value attributedefinitionxhtml.DEFAULTVALUE translates to updating the attributedefinitionxhtml.DEFAULTVALUEID
		attributedefinitionxhtmlDB.DEFAULTVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionxhtml.DEFAULTVALUE != nil {
			if DEFAULTVALUEId, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[attributedefinitionxhtml.DEFAULTVALUE]; ok {
				attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64 = int64(DEFAULTVALUEId)
				attributedefinitionxhtmlDB.DEFAULTVALUEID.Valid = true
			}
		} else {
			attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64 = 0
			attributedefinitionxhtmlDB.DEFAULTVALUEID.Valid = true
		}

		// commit pointer value attributedefinitionxhtml.TYPE translates to updating the attributedefinitionxhtml.TYPEID
		attributedefinitionxhtmlDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionxhtml.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[attributedefinitionxhtml.TYPE]; ok {
				attributedefinitionxhtmlDB.TYPEID.Int64 = int64(TYPEId)
				attributedefinitionxhtmlDB.TYPEID.Valid = true
			}
		} else {
			attributedefinitionxhtmlDB.TYPEID.Int64 = 0
			attributedefinitionxhtmlDB.TYPEID.Valid = true
		}

		query := backRepoATTRIBUTEDEFINITIONXHTML.db.Save(&attributedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEDEFINITIONXHTML intance %s", attributedefinitionxhtml.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CheckoutPhaseOne() (Error error) {

	attributedefinitionxhtmlDBArray := make([]ATTRIBUTEDEFINITIONXHTMLDB, 0)
	query := backRepoATTRIBUTEDEFINITIONXHTML.db.Find(&attributedefinitionxhtmlDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributedefinitionxhtmlInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEDEFINITIONXHTML]any)
	for key, value := range backRepoATTRIBUTEDEFINITIONXHTML.stage.ATTRIBUTEDEFINITIONXHTMLs {
		attributedefinitionxhtmlInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributedefinitionxhtmlDB := range attributedefinitionxhtmlDBArray {
		backRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseOneInstance(&attributedefinitionxhtmlDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributedefinitionxhtml, ok := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[attributedefinitionxhtmlDB.ID]
		if ok {
			delete(attributedefinitionxhtmlInstancesToBeRemovedFromTheStage, attributedefinitionxhtml)
		}
	}

	// remove from stage and back repo's 3 maps all attributedefinitionxhtmls that are not in the checkout
	for attributedefinitionxhtml := range attributedefinitionxhtmlInstancesToBeRemovedFromTheStage {
		attributedefinitionxhtml.Unstage(backRepoATTRIBUTEDEFINITIONXHTML.GetStage())

		// remove instance from the back repo 3 maps
		attributedefinitionxhtmlID := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]
		delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID, attributedefinitionxhtml)
		delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB, attributedefinitionxhtmlID)
		delete(backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr, attributedefinitionxhtmlID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributedefinitionxhtmlDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributedefinitionxhtmlDB
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CheckoutPhaseOneInstance(attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) (Error error) {

	attributedefinitionxhtml, ok := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[attributedefinitionxhtmlDB.ID]
	if !ok {
		attributedefinitionxhtml = new(models.ATTRIBUTEDEFINITIONXHTML)

		backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[attributedefinitionxhtmlDB.ID] = attributedefinitionxhtml
		backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml] = attributedefinitionxhtmlDB.ID

		// append model store with the new element
		attributedefinitionxhtml.Name = attributedefinitionxhtmlDB.Name_Data.String
		attributedefinitionxhtml.Stage(backRepoATTRIBUTEDEFINITIONXHTML.GetStage())
	}
	attributedefinitionxhtmlDB.CopyBasicFieldsToATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributedefinitionxhtml.Stage(backRepoATTRIBUTEDEFINITIONXHTML.GetStage())

	// preserve pointer to attributedefinitionxhtmlDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB)[attributedefinitionxhtmlDB hold variable pointers
	attributedefinitionxhtmlDB_Data := *attributedefinitionxhtmlDB
	preservedPtrToATTRIBUTEDEFINITIONXHTML := &attributedefinitionxhtmlDB_Data
	backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[attributedefinitionxhtmlDB.ID] = preservedPtrToATTRIBUTEDEFINITIONXHTML

	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributedefinitionxhtmlDB := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB {
		backRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseTwoInstance(backRepo, attributedefinitionxhtmlDB)
	}
	return
}

// BackRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) (Error error) {

	attributedefinitionxhtml := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr[attributedefinitionxhtmlDB.ID]

	attributedefinitionxhtmlDB.DecodePointers(backRepo, attributedefinitionxhtml)

	return
}

func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) DecodePointers(backRepo *BackRepoStruct, attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	attributedefinitionxhtml.ALTERNATIVEID = nil
	if attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 != 0 {
		attributedefinitionxhtml.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64)]
	}
	// DEFAULTVALUE field
	attributedefinitionxhtml.DEFAULTVALUE = nil
	if attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64 != 0 {
		attributedefinitionxhtml.DEFAULTVALUE = backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[uint(attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64)]
	}
	// TYPE field
	attributedefinitionxhtml.TYPE = nil
	if attributedefinitionxhtmlDB.TYPEID.Int64 != 0 {
		attributedefinitionxhtml.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(attributedefinitionxhtmlDB.TYPEID.Int64)]
	}
	return
}

// CommitATTRIBUTEDEFINITIONXHTML allows commit of a single attributedefinitionxhtml (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) {
	backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseOneInstance(attributedefinitionxhtml)
	if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]; ok {
		backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.CommitPhaseTwoInstance(backRepo, id, attributedefinitionxhtml)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEDEFINITIONXHTML allows checkout of a single attributedefinitionxhtml (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) {
	// check if the attributedefinitionxhtml is staged
	if _, ok := backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLPtr_ATTRIBUTEDEFINITIONXHTMLDBID[attributedefinitionxhtml]; ok {
			var attributedefinitionxhtmlDB ATTRIBUTEDEFINITIONXHTMLDB
			attributedefinitionxhtmlDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.db.First(&attributedefinitionxhtmlDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEDEFINITIONXHTML : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseOneInstance(&attributedefinitionxhtmlDB)
			backRepo.BackRepoATTRIBUTEDEFINITIONXHTML.CheckoutPhaseTwoInstance(backRepo, &attributedefinitionxhtmlDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) {
	// insertion point for fields commit

	attributedefinitionxhtmlDB.Name_Data.String = attributedefinitionxhtml.Name
	attributedefinitionxhtmlDB.Name_Data.Valid = true

	attributedefinitionxhtmlDB.DESCAttr_Data.String = attributedefinitionxhtml.DESCAttr
	attributedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = attributedefinitionxhtml.IDENTIFIERAttr
	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool = attributedefinitionxhtml.ISEDITABLEAttr
	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = attributedefinitionxhtml.LASTCHANGEAttr
	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String = attributedefinitionxhtml.LONGNAMEAttr
	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML_WOP
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTML_WOP(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML_WOP) {
	// insertion point for fields commit

	attributedefinitionxhtmlDB.Name_Data.String = attributedefinitionxhtml.Name
	attributedefinitionxhtmlDB.Name_Data.Valid = true

	attributedefinitionxhtmlDB.DESCAttr_Data.String = attributedefinitionxhtml.DESCAttr
	attributedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = attributedefinitionxhtml.IDENTIFIERAttr
	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool = attributedefinitionxhtml.ISEDITABLEAttr
	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = attributedefinitionxhtml.LASTCHANGEAttr
	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String = attributedefinitionxhtml.LONGNAMEAttr
	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTMLWOP
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTMLWOP(attributedefinitionxhtml *ATTRIBUTEDEFINITIONXHTMLWOP) {
	// insertion point for fields commit

	attributedefinitionxhtmlDB.Name_Data.String = attributedefinitionxhtml.Name
	attributedefinitionxhtmlDB.Name_Data.Valid = true

	attributedefinitionxhtmlDB.DESCAttr_Data.String = attributedefinitionxhtml.DESCAttr
	attributedefinitionxhtmlDB.DESCAttr_Data.Valid = true

	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String = attributedefinitionxhtml.IDENTIFIERAttr
	attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool = attributedefinitionxhtml.ISEDITABLEAttr
	attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String = attributedefinitionxhtml.LASTCHANGEAttr
	attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String = attributedefinitionxhtml.LONGNAMEAttr
	attributedefinitionxhtmlDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONXHTML
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsToATTRIBUTEDEFINITIONXHTML(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionxhtml.Name = attributedefinitionxhtmlDB.Name_Data.String
	attributedefinitionxhtml.DESCAttr = attributedefinitionxhtmlDB.DESCAttr_Data.String
	attributedefinitionxhtml.IDENTIFIERAttr = attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	attributedefinitionxhtml.ISEDITABLEAttr = attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionxhtml.LASTCHANGEAttr = attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	attributedefinitionxhtml.LONGNAMEAttr = attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONXHTML_WOP
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsToATTRIBUTEDEFINITIONXHTML_WOP(attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionxhtml.Name = attributedefinitionxhtmlDB.Name_Data.String
	attributedefinitionxhtml.DESCAttr = attributedefinitionxhtmlDB.DESCAttr_Data.String
	attributedefinitionxhtml.IDENTIFIERAttr = attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	attributedefinitionxhtml.ISEDITABLEAttr = attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionxhtml.LASTCHANGEAttr = attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	attributedefinitionxhtml.LONGNAMEAttr = attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONXHTMLWOP
func (attributedefinitionxhtmlDB *ATTRIBUTEDEFINITIONXHTMLDB) CopyBasicFieldsToATTRIBUTEDEFINITIONXHTMLWOP(attributedefinitionxhtml *ATTRIBUTEDEFINITIONXHTMLWOP) {
	attributedefinitionxhtml.ID = int(attributedefinitionxhtmlDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionxhtml.Name = attributedefinitionxhtmlDB.Name_Data.String
	attributedefinitionxhtml.DESCAttr = attributedefinitionxhtmlDB.DESCAttr_Data.String
	attributedefinitionxhtml.IDENTIFIERAttr = attributedefinitionxhtmlDB.IDENTIFIERAttr_Data.String
	attributedefinitionxhtml.ISEDITABLEAttr = attributedefinitionxhtmlDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionxhtml.LASTCHANGEAttr = attributedefinitionxhtmlDB.LASTCHANGEAttr_Data.String
	attributedefinitionxhtml.LONGNAMEAttr = attributedefinitionxhtmlDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONXHTMLDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONXHTMLDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONXHTMLDB, 0)
	for _, attributedefinitionxhtmlDB := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB {
		forBackup = append(forBackup, attributedefinitionxhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEDEFINITIONXHTML ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEDEFINITIONXHTML file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONXHTMLDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONXHTMLDB, 0)
	for _, attributedefinitionxhtmlDB := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB {
		forBackup = append(forBackup, attributedefinitionxhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEDEFINITIONXHTML")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEDEFINITIONXHTML_Fields, -1)
	for _, attributedefinitionxhtmlDB := range forBackup {

		var attributedefinitionxhtmlWOP ATTRIBUTEDEFINITIONXHTMLWOP
		attributedefinitionxhtmlDB.CopyBasicFieldsToATTRIBUTEDEFINITIONXHTMLWOP(&attributedefinitionxhtmlWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributedefinitionxhtmlWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEDEFINITIONXHTML" sheet all ATTRIBUTEDEFINITIONXHTMLDB instances
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEDEFINITIONXHTML"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEDEFINITIONXHTML.rowVisitorATTRIBUTEDEFINITIONXHTML)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) rowVisitorATTRIBUTEDEFINITIONXHTML(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributedefinitionxhtmlWOP ATTRIBUTEDEFINITIONXHTMLWOP
		row.ReadStruct(&attributedefinitionxhtmlWOP)

		// add the unmarshalled struct to the stage
		attributedefinitionxhtmlDB := new(ATTRIBUTEDEFINITIONXHTMLDB)
		attributedefinitionxhtmlDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONXHTMLWOP(&attributedefinitionxhtmlWOP)

		attributedefinitionxhtmlDB_ID_atBackupTime := attributedefinitionxhtmlDB.ID
		attributedefinitionxhtmlDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONXHTML.db.Create(attributedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[attributedefinitionxhtmlDB.ID] = attributedefinitionxhtmlDB
		BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID[attributedefinitionxhtmlDB_ID_atBackupTime] = attributedefinitionxhtmlDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEDEFINITIONXHTMLDB.json" in dirPath that stores an array
// of ATTRIBUTEDEFINITIONXHTMLDB and stores it in the database
// the map BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONXHTMLDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEDEFINITIONXHTML file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEDEFINITIONXHTMLDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB
	for _, attributedefinitionxhtmlDB := range forRestore {

		attributedefinitionxhtmlDB_ID_atBackupTime := attributedefinitionxhtmlDB.ID
		attributedefinitionxhtmlDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONXHTML.db.Create(attributedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[attributedefinitionxhtmlDB.ID] = attributedefinitionxhtmlDB
		BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID[attributedefinitionxhtmlDB_ID_atBackupTime] = attributedefinitionxhtmlDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEDEFINITIONXHTML file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEDEFINITIONXHTML>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) RestorePhaseTwo() {

	for _, attributedefinitionxhtmlDB := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB {

		// next line of code is to avert unused variable compilation error
		_ = attributedefinitionxhtmlDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 != 0 {
			attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(attributedefinitionxhtmlDB.ALTERNATIVEIDID.Int64)])
			attributedefinitionxhtmlDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing DEFAULTVALUE field
		if attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64 != 0 {
			attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64 = int64(BackRepoDEFAULTVALUEid_atBckpTime_newID[uint(attributedefinitionxhtmlDB.DEFAULTVALUEID.Int64)])
			attributedefinitionxhtmlDB.DEFAULTVALUEID.Valid = true
		}

		// reindexing TYPE field
		if attributedefinitionxhtmlDB.TYPEID.Int64 != 0 {
			attributedefinitionxhtmlDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(attributedefinitionxhtmlDB.TYPEID.Int64)])
			attributedefinitionxhtmlDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEDEFINITIONXHTML.db.Model(attributedefinitionxhtmlDB).Updates(*attributedefinitionxhtmlDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEDEFINITIONXHTML.ResetReversePointers commits all staged instances of ATTRIBUTEDEFINITIONXHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionxhtml := range backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLPtr {
		backRepoATTRIBUTEDEFINITIONXHTML.ResetReversePointersInstance(backRepo, idx, attributedefinitionxhtml)
	}

	return
}

func (backRepoATTRIBUTEDEFINITIONXHTML *BackRepoATTRIBUTEDEFINITIONXHTMLStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionxhtml *models.ATTRIBUTEDEFINITIONXHTML) (Error error) {

	// fetch matching attributedefinitionxhtmlDB
	if attributedefinitionxhtmlDB, ok := backRepoATTRIBUTEDEFINITIONXHTML.Map_ATTRIBUTEDEFINITIONXHTMLDBID_ATTRIBUTEDEFINITIONXHTMLDB[idx]; ok {
		_ = attributedefinitionxhtmlDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEDEFINITIONXHTMLid_atBckpTime_newID map[uint]uint
