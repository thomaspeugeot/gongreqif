// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RELATIONGROUPTYPE_sql sql.NullBool
var dummy_RELATIONGROUPTYPE_time time.Duration
var dummy_RELATIONGROUPTYPE_sort sort.Float64Slice

// RELATIONGROUPTYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model relationgrouptypeAPI
type RELATIONGROUPTYPEAPI struct {
	gorm.Model

	models.RELATIONGROUPTYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RELATIONGROUPTYPEPointersEncoding RELATIONGROUPTYPEPointersEncoding
}

// RELATIONGROUPTYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RELATIONGROUPTYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field SPECATTRIBUTES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SPECATTRIBUTESID sql.NullInt64
}

// RELATIONGROUPTYPEDB describes a relationgrouptype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model relationgrouptypeDB
type RELATIONGROUPTYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field relationgrouptypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field relationgrouptypeDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field relationgrouptypeDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field relationgrouptypeDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field relationgrouptypeDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RELATIONGROUPTYPEPointersEncoding
}

// RELATIONGROUPTYPEDBs arrays relationgrouptypeDBs
// swagger:response relationgrouptypeDBsResponse
type RELATIONGROUPTYPEDBs []RELATIONGROUPTYPEDB

// RELATIONGROUPTYPEDBResponse provides response
// swagger:response relationgrouptypeDBResponse
type RELATIONGROUPTYPEDBResponse struct {
	RELATIONGROUPTYPEDB
}

// RELATIONGROUPTYPEWOP is a RELATIONGROUPTYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RELATIONGROUPTYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	LASTCHANGEAttr string `xlsx:"4"`

	LONGNAMEAttr string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var RELATIONGROUPTYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
}

type BackRepoRELATIONGROUPTYPEStruct struct {
	// stores RELATIONGROUPTYPEDB according to their gorm ID
	Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB map[uint]*RELATIONGROUPTYPEDB

	// stores RELATIONGROUPTYPEDB ID according to RELATIONGROUPTYPE address
	Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID map[*models.RELATIONGROUPTYPE]uint

	// stores RELATIONGROUPTYPE according to their gorm ID
	Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr map[uint]*models.RELATIONGROUPTYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRELATIONGROUPTYPE.stage
	return
}

func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) GetDB() *gorm.DB {
	return backRepoRELATIONGROUPTYPE.db
}

// GetRELATIONGROUPTYPEDBFromRELATIONGROUPTYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) GetRELATIONGROUPTYPEDBFromRELATIONGROUPTYPEPtr(relationgrouptype *models.RELATIONGROUPTYPE) (relationgrouptypeDB *RELATIONGROUPTYPEDB) {
	id := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]
	relationgrouptypeDB = backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[id]
	return
}

// BackRepoRELATIONGROUPTYPE.CommitPhaseOne commits all staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for relationgrouptype := range stage.RELATIONGROUPTYPEs {
		backRepoRELATIONGROUPTYPE.CommitPhaseOneInstance(relationgrouptype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, relationgrouptype := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr {
		if _, ok := stage.RELATIONGROUPTYPEs[relationgrouptype]; !ok {
			backRepoRELATIONGROUPTYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRELATIONGROUPTYPE.CommitDeleteInstance commits deletion of RELATIONGROUPTYPE to the BackRepo
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	relationgrouptype := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[id]

	// relationgrouptype is not staged anymore, remove relationgrouptypeDB
	relationgrouptypeDB := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[id]
	query := backRepoRELATIONGROUPTYPE.db.Unscoped().Delete(&relationgrouptypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID, relationgrouptype)
	delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr, id)
	delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB, id)

	return
}

// BackRepoRELATIONGROUPTYPE.CommitPhaseOneInstance commits relationgrouptype staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CommitPhaseOneInstance(relationgrouptype *models.RELATIONGROUPTYPE) (Error error) {

	// check if the relationgrouptype is not commited yet
	if _, ok := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]; ok {
		return
	}

	// initiate relationgrouptype
	var relationgrouptypeDB RELATIONGROUPTYPEDB
	relationgrouptypeDB.CopyBasicFieldsFromRELATIONGROUPTYPE(relationgrouptype)

	query := backRepoRELATIONGROUPTYPE.db.Create(&relationgrouptypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype] = relationgrouptypeDB.ID
	backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[relationgrouptypeDB.ID] = relationgrouptype
	backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[relationgrouptypeDB.ID] = &relationgrouptypeDB

	return
}

// BackRepoRELATIONGROUPTYPE.CommitPhaseTwo commits all staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, relationgrouptype := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr {
		backRepoRELATIONGROUPTYPE.CommitPhaseTwoInstance(backRepo, idx, relationgrouptype)
	}

	return
}

// BackRepoRELATIONGROUPTYPE.CommitPhaseTwoInstance commits {{structname }} of models.RELATIONGROUPTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, relationgrouptype *models.RELATIONGROUPTYPE) (Error error) {

	// fetch matching relationgrouptypeDB
	if relationgrouptypeDB, ok := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[idx]; ok {

		relationgrouptypeDB.CopyBasicFieldsFromRELATIONGROUPTYPE(relationgrouptype)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value relationgrouptype.ALTERNATIVEID translates to updating the relationgrouptype.ALTERNATIVEIDID
		relationgrouptypeDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if relationgrouptype.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[relationgrouptype.ALTERNATIVEID]; ok {
				relationgrouptypeDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				relationgrouptypeDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			relationgrouptypeDB.ALTERNATIVEIDID.Int64 = 0
			relationgrouptypeDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value relationgrouptype.SPECATTRIBUTES translates to updating the relationgrouptype.SPECATTRIBUTESID
		relationgrouptypeDB.SPECATTRIBUTESID.Valid = true // allow for a 0 value (nil association)
		if relationgrouptype.SPECATTRIBUTES != nil {
			if SPECATTRIBUTESId, ok := backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESPtr_SPECATTRIBUTESDBID[relationgrouptype.SPECATTRIBUTES]; ok {
				relationgrouptypeDB.SPECATTRIBUTESID.Int64 = int64(SPECATTRIBUTESId)
				relationgrouptypeDB.SPECATTRIBUTESID.Valid = true
			}
		} else {
			relationgrouptypeDB.SPECATTRIBUTESID.Int64 = 0
			relationgrouptypeDB.SPECATTRIBUTESID.Valid = true
		}

		query := backRepoRELATIONGROUPTYPE.db.Save(&relationgrouptypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RELATIONGROUPTYPE intance %s", relationgrouptype.Name))
		return err
	}

	return
}

// BackRepoRELATIONGROUPTYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CheckoutPhaseOne() (Error error) {

	relationgrouptypeDBArray := make([]RELATIONGROUPTYPEDB, 0)
	query := backRepoRELATIONGROUPTYPE.db.Find(&relationgrouptypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	relationgrouptypeInstancesToBeRemovedFromTheStage := make(map[*models.RELATIONGROUPTYPE]any)
	for key, value := range backRepoRELATIONGROUPTYPE.stage.RELATIONGROUPTYPEs {
		relationgrouptypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, relationgrouptypeDB := range relationgrouptypeDBArray {
		backRepoRELATIONGROUPTYPE.CheckoutPhaseOneInstance(&relationgrouptypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		relationgrouptype, ok := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[relationgrouptypeDB.ID]
		if ok {
			delete(relationgrouptypeInstancesToBeRemovedFromTheStage, relationgrouptype)
		}
	}

	// remove from stage and back repo's 3 maps all relationgrouptypes that are not in the checkout
	for relationgrouptype := range relationgrouptypeInstancesToBeRemovedFromTheStage {
		relationgrouptype.Unstage(backRepoRELATIONGROUPTYPE.GetStage())

		// remove instance from the back repo 3 maps
		relationgrouptypeID := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]
		delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID, relationgrouptype)
		delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB, relationgrouptypeID)
		delete(backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr, relationgrouptypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a relationgrouptypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the relationgrouptypeDB
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CheckoutPhaseOneInstance(relationgrouptypeDB *RELATIONGROUPTYPEDB) (Error error) {

	relationgrouptype, ok := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[relationgrouptypeDB.ID]
	if !ok {
		relationgrouptype = new(models.RELATIONGROUPTYPE)

		backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[relationgrouptypeDB.ID] = relationgrouptype
		backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype] = relationgrouptypeDB.ID

		// append model store with the new element
		relationgrouptype.Name = relationgrouptypeDB.Name_Data.String
		relationgrouptype.Stage(backRepoRELATIONGROUPTYPE.GetStage())
	}
	relationgrouptypeDB.CopyBasicFieldsToRELATIONGROUPTYPE(relationgrouptype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	relationgrouptype.Stage(backRepoRELATIONGROUPTYPE.GetStage())

	// preserve pointer to relationgrouptypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB)[relationgrouptypeDB hold variable pointers
	relationgrouptypeDB_Data := *relationgrouptypeDB
	preservedPtrToRELATIONGROUPTYPE := &relationgrouptypeDB_Data
	backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[relationgrouptypeDB.ID] = preservedPtrToRELATIONGROUPTYPE

	return
}

// BackRepoRELATIONGROUPTYPE.CheckoutPhaseTwo Checkouts all staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, relationgrouptypeDB := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB {
		backRepoRELATIONGROUPTYPE.CheckoutPhaseTwoInstance(backRepo, relationgrouptypeDB)
	}
	return
}

// BackRepoRELATIONGROUPTYPE.CheckoutPhaseTwoInstance Checkouts staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, relationgrouptypeDB *RELATIONGROUPTYPEDB) (Error error) {

	relationgrouptype := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr[relationgrouptypeDB.ID]

	relationgrouptypeDB.DecodePointers(backRepo, relationgrouptype)

	return
}

func (relationgrouptypeDB *RELATIONGROUPTYPEDB) DecodePointers(backRepo *BackRepoStruct, relationgrouptype *models.RELATIONGROUPTYPE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVEID field
	relationgrouptype.ALTERNATIVEID = nil
	if relationgrouptypeDB.ALTERNATIVEIDID.Int64 != 0 {
		relationgrouptype.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(relationgrouptypeDB.ALTERNATIVEIDID.Int64)]
	}
	// SPECATTRIBUTES field
	relationgrouptype.SPECATTRIBUTES = nil
	if relationgrouptypeDB.SPECATTRIBUTESID.Int64 != 0 {
		relationgrouptype.SPECATTRIBUTES = backRepo.BackRepoSPECATTRIBUTES.Map_SPECATTRIBUTESDBID_SPECATTRIBUTESPtr[uint(relationgrouptypeDB.SPECATTRIBUTESID.Int64)]
	}
	return
}

// CommitRELATIONGROUPTYPE allows commit of a single relationgrouptype (if already staged)
func (backRepo *BackRepoStruct) CommitRELATIONGROUPTYPE(relationgrouptype *models.RELATIONGROUPTYPE) {
	backRepo.BackRepoRELATIONGROUPTYPE.CommitPhaseOneInstance(relationgrouptype)
	if id, ok := backRepo.BackRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]; ok {
		backRepo.BackRepoRELATIONGROUPTYPE.CommitPhaseTwoInstance(backRepo, id, relationgrouptype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRELATIONGROUPTYPE allows checkout of a single relationgrouptype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRELATIONGROUPTYPE(relationgrouptype *models.RELATIONGROUPTYPE) {
	// check if the relationgrouptype is staged
	if _, ok := backRepo.BackRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]; ok {

		if id, ok := backRepo.BackRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEPtr_RELATIONGROUPTYPEDBID[relationgrouptype]; ok {
			var relationgrouptypeDB RELATIONGROUPTYPEDB
			relationgrouptypeDB.ID = id

			if err := backRepo.BackRepoRELATIONGROUPTYPE.db.First(&relationgrouptypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutRELATIONGROUPTYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRELATIONGROUPTYPE.CheckoutPhaseOneInstance(&relationgrouptypeDB)
			backRepo.BackRepoRELATIONGROUPTYPE.CheckoutPhaseTwoInstance(backRepo, &relationgrouptypeDB)
		}
	}
}

// CopyBasicFieldsFromRELATIONGROUPTYPE
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsFromRELATIONGROUPTYPE(relationgrouptype *models.RELATIONGROUPTYPE) {
	// insertion point for fields commit

	relationgrouptypeDB.Name_Data.String = relationgrouptype.Name
	relationgrouptypeDB.Name_Data.Valid = true

	relationgrouptypeDB.DESCAttr_Data.String = relationgrouptype.DESCAttr
	relationgrouptypeDB.DESCAttr_Data.Valid = true

	relationgrouptypeDB.IDENTIFIERAttr_Data.String = relationgrouptype.IDENTIFIERAttr
	relationgrouptypeDB.IDENTIFIERAttr_Data.Valid = true

	relationgrouptypeDB.LASTCHANGEAttr_Data.String = relationgrouptype.LASTCHANGEAttr
	relationgrouptypeDB.LASTCHANGEAttr_Data.Valid = true

	relationgrouptypeDB.LONGNAMEAttr_Data.String = relationgrouptype.LONGNAMEAttr
	relationgrouptypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromRELATIONGROUPTYPE_WOP
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsFromRELATIONGROUPTYPE_WOP(relationgrouptype *models.RELATIONGROUPTYPE_WOP) {
	// insertion point for fields commit

	relationgrouptypeDB.Name_Data.String = relationgrouptype.Name
	relationgrouptypeDB.Name_Data.Valid = true

	relationgrouptypeDB.DESCAttr_Data.String = relationgrouptype.DESCAttr
	relationgrouptypeDB.DESCAttr_Data.Valid = true

	relationgrouptypeDB.IDENTIFIERAttr_Data.String = relationgrouptype.IDENTIFIERAttr
	relationgrouptypeDB.IDENTIFIERAttr_Data.Valid = true

	relationgrouptypeDB.LASTCHANGEAttr_Data.String = relationgrouptype.LASTCHANGEAttr
	relationgrouptypeDB.LASTCHANGEAttr_Data.Valid = true

	relationgrouptypeDB.LONGNAMEAttr_Data.String = relationgrouptype.LONGNAMEAttr
	relationgrouptypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsFromRELATIONGROUPTYPEWOP
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsFromRELATIONGROUPTYPEWOP(relationgrouptype *RELATIONGROUPTYPEWOP) {
	// insertion point for fields commit

	relationgrouptypeDB.Name_Data.String = relationgrouptype.Name
	relationgrouptypeDB.Name_Data.Valid = true

	relationgrouptypeDB.DESCAttr_Data.String = relationgrouptype.DESCAttr
	relationgrouptypeDB.DESCAttr_Data.Valid = true

	relationgrouptypeDB.IDENTIFIERAttr_Data.String = relationgrouptype.IDENTIFIERAttr
	relationgrouptypeDB.IDENTIFIERAttr_Data.Valid = true

	relationgrouptypeDB.LASTCHANGEAttr_Data.String = relationgrouptype.LASTCHANGEAttr
	relationgrouptypeDB.LASTCHANGEAttr_Data.Valid = true

	relationgrouptypeDB.LONGNAMEAttr_Data.String = relationgrouptype.LONGNAMEAttr
	relationgrouptypeDB.LONGNAMEAttr_Data.Valid = true
}

// CopyBasicFieldsToRELATIONGROUPTYPE
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsToRELATIONGROUPTYPE(relationgrouptype *models.RELATIONGROUPTYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	relationgrouptype.Name = relationgrouptypeDB.Name_Data.String
	relationgrouptype.DESCAttr = relationgrouptypeDB.DESCAttr_Data.String
	relationgrouptype.IDENTIFIERAttr = relationgrouptypeDB.IDENTIFIERAttr_Data.String
	relationgrouptype.LASTCHANGEAttr = relationgrouptypeDB.LASTCHANGEAttr_Data.String
	relationgrouptype.LONGNAMEAttr = relationgrouptypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToRELATIONGROUPTYPE_WOP
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsToRELATIONGROUPTYPE_WOP(relationgrouptype *models.RELATIONGROUPTYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	relationgrouptype.Name = relationgrouptypeDB.Name_Data.String
	relationgrouptype.DESCAttr = relationgrouptypeDB.DESCAttr_Data.String
	relationgrouptype.IDENTIFIERAttr = relationgrouptypeDB.IDENTIFIERAttr_Data.String
	relationgrouptype.LASTCHANGEAttr = relationgrouptypeDB.LASTCHANGEAttr_Data.String
	relationgrouptype.LONGNAMEAttr = relationgrouptypeDB.LONGNAMEAttr_Data.String
}

// CopyBasicFieldsToRELATIONGROUPTYPEWOP
func (relationgrouptypeDB *RELATIONGROUPTYPEDB) CopyBasicFieldsToRELATIONGROUPTYPEWOP(relationgrouptype *RELATIONGROUPTYPEWOP) {
	relationgrouptype.ID = int(relationgrouptypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	relationgrouptype.Name = relationgrouptypeDB.Name_Data.String
	relationgrouptype.DESCAttr = relationgrouptypeDB.DESCAttr_Data.String
	relationgrouptype.IDENTIFIERAttr = relationgrouptypeDB.IDENTIFIERAttr_Data.String
	relationgrouptype.LASTCHANGEAttr = relationgrouptypeDB.LASTCHANGEAttr_Data.String
	relationgrouptype.LONGNAMEAttr = relationgrouptypeDB.LONGNAMEAttr_Data.String
}

// Backup generates a json file from a slice of all RELATIONGROUPTYPEDB instances in the backrepo
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RELATIONGROUPTYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATIONGROUPTYPEDB, 0)
	for _, relationgrouptypeDB := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB {
		forBackup = append(forBackup, relationgrouptypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RELATIONGROUPTYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RELATIONGROUPTYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all RELATIONGROUPTYPEDB instances in the backrepo
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATIONGROUPTYPEDB, 0)
	for _, relationgrouptypeDB := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB {
		forBackup = append(forBackup, relationgrouptypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RELATIONGROUPTYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RELATIONGROUPTYPE_Fields, -1)
	for _, relationgrouptypeDB := range forBackup {

		var relationgrouptypeWOP RELATIONGROUPTYPEWOP
		relationgrouptypeDB.CopyBasicFieldsToRELATIONGROUPTYPEWOP(&relationgrouptypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&relationgrouptypeWOP, -1)
	}
}

// RestoreXL from the "RELATIONGROUPTYPE" sheet all RELATIONGROUPTYPEDB instances
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRELATIONGROUPTYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RELATIONGROUPTYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRELATIONGROUPTYPE.rowVisitorRELATIONGROUPTYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) rowVisitorRELATIONGROUPTYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var relationgrouptypeWOP RELATIONGROUPTYPEWOP
		row.ReadStruct(&relationgrouptypeWOP)

		// add the unmarshalled struct to the stage
		relationgrouptypeDB := new(RELATIONGROUPTYPEDB)
		relationgrouptypeDB.CopyBasicFieldsFromRELATIONGROUPTYPEWOP(&relationgrouptypeWOP)

		relationgrouptypeDB_ID_atBackupTime := relationgrouptypeDB.ID
		relationgrouptypeDB.ID = 0
		query := backRepoRELATIONGROUPTYPE.db.Create(relationgrouptypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[relationgrouptypeDB.ID] = relationgrouptypeDB
		BackRepoRELATIONGROUPTYPEid_atBckpTime_newID[relationgrouptypeDB_ID_atBackupTime] = relationgrouptypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RELATIONGROUPTYPEDB.json" in dirPath that stores an array
// of RELATIONGROUPTYPEDB and stores it in the database
// the map BackRepoRELATIONGROUPTYPEid_atBckpTime_newID is updated accordingly
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRELATIONGROUPTYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RELATIONGROUPTYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RELATIONGROUPTYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RELATIONGROUPTYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB
	for _, relationgrouptypeDB := range forRestore {

		relationgrouptypeDB_ID_atBackupTime := relationgrouptypeDB.ID
		relationgrouptypeDB.ID = 0
		query := backRepoRELATIONGROUPTYPE.db.Create(relationgrouptypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[relationgrouptypeDB.ID] = relationgrouptypeDB
		BackRepoRELATIONGROUPTYPEid_atBckpTime_newID[relationgrouptypeDB_ID_atBackupTime] = relationgrouptypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RELATIONGROUPTYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RELATIONGROUPTYPE>id_atBckpTime_newID
// to compute new index
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) RestorePhaseTwo() {

	for _, relationgrouptypeDB := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = relationgrouptypeDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVEID field
		if relationgrouptypeDB.ALTERNATIVEIDID.Int64 != 0 {
			relationgrouptypeDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(relationgrouptypeDB.ALTERNATIVEIDID.Int64)])
			relationgrouptypeDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing SPECATTRIBUTES field
		if relationgrouptypeDB.SPECATTRIBUTESID.Int64 != 0 {
			relationgrouptypeDB.SPECATTRIBUTESID.Int64 = int64(BackRepoSPECATTRIBUTESid_atBckpTime_newID[uint(relationgrouptypeDB.SPECATTRIBUTESID.Int64)])
			relationgrouptypeDB.SPECATTRIBUTESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoRELATIONGROUPTYPE.db.Model(relationgrouptypeDB).Updates(*relationgrouptypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRELATIONGROUPTYPE.ResetReversePointers commits all staged instances of RELATIONGROUPTYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, relationgrouptype := range backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEPtr {
		backRepoRELATIONGROUPTYPE.ResetReversePointersInstance(backRepo, idx, relationgrouptype)
	}

	return
}

func (backRepoRELATIONGROUPTYPE *BackRepoRELATIONGROUPTYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, relationgrouptype *models.RELATIONGROUPTYPE) (Error error) {

	// fetch matching relationgrouptypeDB
	if relationgrouptypeDB, ok := backRepoRELATIONGROUPTYPE.Map_RELATIONGROUPTYPEDBID_RELATIONGROUPTYPEDB[idx]; ok {
		_ = relationgrouptypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRELATIONGROUPTYPEid_atBckpTime_newID map[uint]uint
