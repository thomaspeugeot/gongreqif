// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEDEFINITIONENUMERATION_sql sql.NullBool
var dummy_ATTRIBUTEDEFINITIONENUMERATION_time time.Duration
var dummy_ATTRIBUTEDEFINITIONENUMERATION_sort sort.Float64Slice

// ATTRIBUTEDEFINITIONENUMERATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributedefinitionenumerationAPI
type ATTRIBUTEDEFINITIONENUMERATIONAPI struct {
	gorm.Model

	models.ATTRIBUTEDEFINITIONENUMERATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEDEFINITIONENUMERATIONPointersEncoding ATTRIBUTEDEFINITIONENUMERATIONPointersEncoding
}

// ATTRIBUTEDEFINITIONENUMERATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEDEFINITIONENUMERATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFAULTVALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFAULTVALUEID sql.NullInt64

	// field ALTERNATIVEID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVEIDID sql.NullInt64

	// field TYPE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TYPEID sql.NullInt64
}

// ATTRIBUTEDEFINITIONENUMERATIONDB describes a attributedefinitionenumeration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributedefinitionenumerationDB
type ATTRIBUTEDEFINITIONENUMERATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributedefinitionenumerationDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributedefinitionenumerationDB.DESCAttr
	DESCAttr_Data sql.NullString

	// Declation for basic field attributedefinitionenumerationDB.IDENTIFIERAttr
	IDENTIFIERAttr_Data sql.NullString

	// Declation for basic field attributedefinitionenumerationDB.ISEDITABLEAttr
	// provide the sql storage for the boolan
	ISEDITABLEAttr_Data sql.NullBool

	// Declation for basic field attributedefinitionenumerationDB.LASTCHANGEAttr
	LASTCHANGEAttr_Data sql.NullString

	// Declation for basic field attributedefinitionenumerationDB.LONGNAMEAttr
	LONGNAMEAttr_Data sql.NullString

	// Declation for basic field attributedefinitionenumerationDB.MULTIVALUEDAttr
	// provide the sql storage for the boolan
	MULTIVALUEDAttr_Data sql.NullBool
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEDEFINITIONENUMERATIONPointersEncoding
}

// ATTRIBUTEDEFINITIONENUMERATIONDBs arrays attributedefinitionenumerationDBs
// swagger:response attributedefinitionenumerationDBsResponse
type ATTRIBUTEDEFINITIONENUMERATIONDBs []ATTRIBUTEDEFINITIONENUMERATIONDB

// ATTRIBUTEDEFINITIONENUMERATIONDBResponse provides response
// swagger:response attributedefinitionenumerationDBResponse
type ATTRIBUTEDEFINITIONENUMERATIONDBResponse struct {
	ATTRIBUTEDEFINITIONENUMERATIONDB
}

// ATTRIBUTEDEFINITIONENUMERATIONWOP is a ATTRIBUTEDEFINITIONENUMERATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEDEFINITIONENUMERATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESCAttr string `xlsx:"2"`

	IDENTIFIERAttr string `xlsx:"3"`

	ISEDITABLEAttr bool `xlsx:"4"`

	LASTCHANGEAttr string `xlsx:"5"`

	LONGNAMEAttr string `xlsx:"6"`

	MULTIVALUEDAttr bool `xlsx:"7"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEDEFINITIONENUMERATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESCAttr",
	"IDENTIFIERAttr",
	"ISEDITABLEAttr",
	"LASTCHANGEAttr",
	"LONGNAMEAttr",
	"MULTIVALUEDAttr",
}

type BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct struct {
	// stores ATTRIBUTEDEFINITIONENUMERATIONDB according to their gorm ID
	Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB map[uint]*ATTRIBUTEDEFINITIONENUMERATIONDB

	// stores ATTRIBUTEDEFINITIONENUMERATIONDB ID according to ATTRIBUTEDEFINITIONENUMERATION address
	Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID map[*models.ATTRIBUTEDEFINITIONENUMERATION]uint

	// stores ATTRIBUTEDEFINITIONENUMERATION according to their gorm ID
	Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr map[uint]*models.ATTRIBUTEDEFINITIONENUMERATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEDEFINITIONENUMERATION.stage
	return
}

func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEDEFINITIONENUMERATION.db
}

// GetATTRIBUTEDEFINITIONENUMERATIONDBFromATTRIBUTEDEFINITIONENUMERATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) GetATTRIBUTEDEFINITIONENUMERATIONDBFromATTRIBUTEDEFINITIONENUMERATIONPtr(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) {
	id := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]
	attributedefinitionenumerationDB = backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[id]
	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseOne commits all staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributedefinitionenumeration := range stage.ATTRIBUTEDEFINITIONENUMERATIONs {
		backRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseOneInstance(attributedefinitionenumeration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributedefinitionenumeration := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr {
		if _, ok := stage.ATTRIBUTEDEFINITIONENUMERATIONs[attributedefinitionenumeration]; !ok {
			backRepoATTRIBUTEDEFINITIONENUMERATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitDeleteInstance commits deletion of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	attributedefinitionenumeration := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[id]

	// attributedefinitionenumeration is not staged anymore, remove attributedefinitionenumerationDB
	attributedefinitionenumerationDB := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[id]
	query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Unscoped().Delete(&attributedefinitionenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID, attributedefinitionenumeration)
	delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr, id)
	delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB, id)

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseOneInstance commits attributedefinitionenumeration staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CommitPhaseOneInstance(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) (Error error) {

	// check if the attributedefinitionenumeration is not commited yet
	if _, ok := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]; ok {
		return
	}

	// initiate attributedefinitionenumeration
	var attributedefinitionenumerationDB ATTRIBUTEDEFINITIONENUMERATIONDB
	attributedefinitionenumerationDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration)

	query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Create(&attributedefinitionenumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration] = attributedefinitionenumerationDB.ID
	backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[attributedefinitionenumerationDB.ID] = attributedefinitionenumeration
	backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[attributedefinitionenumerationDB.ID] = &attributedefinitionenumerationDB

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseTwo commits all staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionenumeration := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr {
		backRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseTwoInstance(backRepo, idx, attributedefinitionenumeration)
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) (Error error) {

	// fetch matching attributedefinitionenumerationDB
	if attributedefinitionenumerationDB, ok := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[idx]; ok {

		attributedefinitionenumerationDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributedefinitionenumeration.DEFAULTVALUE translates to updating the attributedefinitionenumeration.DEFAULTVALUEID
		attributedefinitionenumerationDB.DEFAULTVALUEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionenumeration.DEFAULTVALUE != nil {
			if DEFAULTVALUEId, ok := backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEPtr_DEFAULTVALUEDBID[attributedefinitionenumeration.DEFAULTVALUE]; ok {
				attributedefinitionenumerationDB.DEFAULTVALUEID.Int64 = int64(DEFAULTVALUEId)
				attributedefinitionenumerationDB.DEFAULTVALUEID.Valid = true
			}
		} else {
			attributedefinitionenumerationDB.DEFAULTVALUEID.Int64 = 0
			attributedefinitionenumerationDB.DEFAULTVALUEID.Valid = true
		}

		// commit pointer value attributedefinitionenumeration.ALTERNATIVEID translates to updating the attributedefinitionenumeration.ALTERNATIVEIDID
		attributedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionenumeration.ALTERNATIVEID != nil {
			if ALTERNATIVEIDId, ok := backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDPtr_ALTERNATIVEIDDBID[attributedefinitionenumeration.ALTERNATIVEID]; ok {
				attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = int64(ALTERNATIVEIDId)
				attributedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
			}
		} else {
			attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = 0
			attributedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
		}

		// commit pointer value attributedefinitionenumeration.TYPE translates to updating the attributedefinitionenumeration.TYPEID
		attributedefinitionenumerationDB.TYPEID.Valid = true // allow for a 0 value (nil association)
		if attributedefinitionenumeration.TYPE != nil {
			if TYPEId, ok := backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEPtr_REQIFTYPEDBID[attributedefinitionenumeration.TYPE]; ok {
				attributedefinitionenumerationDB.TYPEID.Int64 = int64(TYPEId)
				attributedefinitionenumerationDB.TYPEID.Valid = true
			}
		} else {
			attributedefinitionenumerationDB.TYPEID.Int64 = 0
			attributedefinitionenumerationDB.TYPEID.Valid = true
		}

		query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Save(&attributedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEDEFINITIONENUMERATION intance %s", attributedefinitionenumeration.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CheckoutPhaseOne() (Error error) {

	attributedefinitionenumerationDBArray := make([]ATTRIBUTEDEFINITIONENUMERATIONDB, 0)
	query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Find(&attributedefinitionenumerationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributedefinitionenumerationInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEDEFINITIONENUMERATION]any)
	for key, value := range backRepoATTRIBUTEDEFINITIONENUMERATION.stage.ATTRIBUTEDEFINITIONENUMERATIONs {
		attributedefinitionenumerationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributedefinitionenumerationDB := range attributedefinitionenumerationDBArray {
		backRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseOneInstance(&attributedefinitionenumerationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributedefinitionenumeration, ok := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[attributedefinitionenumerationDB.ID]
		if ok {
			delete(attributedefinitionenumerationInstancesToBeRemovedFromTheStage, attributedefinitionenumeration)
		}
	}

	// remove from stage and back repo's 3 maps all attributedefinitionenumerations that are not in the checkout
	for attributedefinitionenumeration := range attributedefinitionenumerationInstancesToBeRemovedFromTheStage {
		attributedefinitionenumeration.Unstage(backRepoATTRIBUTEDEFINITIONENUMERATION.GetStage())

		// remove instance from the back repo 3 maps
		attributedefinitionenumerationID := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]
		delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID, attributedefinitionenumeration)
		delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB, attributedefinitionenumerationID)
		delete(backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr, attributedefinitionenumerationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributedefinitionenumerationDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributedefinitionenumerationDB
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CheckoutPhaseOneInstance(attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) (Error error) {

	attributedefinitionenumeration, ok := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[attributedefinitionenumerationDB.ID]
	if !ok {
		attributedefinitionenumeration = new(models.ATTRIBUTEDEFINITIONENUMERATION)

		backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[attributedefinitionenumerationDB.ID] = attributedefinitionenumeration
		backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration] = attributedefinitionenumerationDB.ID

		// append model store with the new element
		attributedefinitionenumeration.Name = attributedefinitionenumerationDB.Name_Data.String
		attributedefinitionenumeration.Stage(backRepoATTRIBUTEDEFINITIONENUMERATION.GetStage())
	}
	attributedefinitionenumerationDB.CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributedefinitionenumeration.Stage(backRepoATTRIBUTEDEFINITIONENUMERATION.GetStage())

	// preserve pointer to attributedefinitionenumerationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB)[attributedefinitionenumerationDB hold variable pointers
	attributedefinitionenumerationDB_Data := *attributedefinitionenumerationDB
	preservedPtrToATTRIBUTEDEFINITIONENUMERATION := &attributedefinitionenumerationDB_Data
	backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[attributedefinitionenumerationDB.ID] = preservedPtrToATTRIBUTEDEFINITIONENUMERATION

	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributedefinitionenumerationDB := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB {
		backRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance(backRepo, attributedefinitionenumerationDB)
	}
	return
}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) (Error error) {

	attributedefinitionenumeration := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr[attributedefinitionenumerationDB.ID]

	attributedefinitionenumerationDB.DecodePointers(backRepo, attributedefinitionenumeration)

	return
}

func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) DecodePointers(backRepo *BackRepoStruct, attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) {

	// insertion point for checkout of pointer encoding
	// DEFAULTVALUE field
	attributedefinitionenumeration.DEFAULTVALUE = nil
	if attributedefinitionenumerationDB.DEFAULTVALUEID.Int64 != 0 {
		attributedefinitionenumeration.DEFAULTVALUE = backRepo.BackRepoDEFAULTVALUE.Map_DEFAULTVALUEDBID_DEFAULTVALUEPtr[uint(attributedefinitionenumerationDB.DEFAULTVALUEID.Int64)]
	}
	// ALTERNATIVEID field
	attributedefinitionenumeration.ALTERNATIVEID = nil
	if attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64 != 0 {
		attributedefinitionenumeration.ALTERNATIVEID = backRepo.BackRepoALTERNATIVEID.Map_ALTERNATIVEIDDBID_ALTERNATIVEIDPtr[uint(attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64)]
	}
	// TYPE field
	attributedefinitionenumeration.TYPE = nil
	if attributedefinitionenumerationDB.TYPEID.Int64 != 0 {
		attributedefinitionenumeration.TYPE = backRepo.BackRepoREQIFTYPE.Map_REQIFTYPEDBID_REQIFTYPEPtr[uint(attributedefinitionenumerationDB.TYPEID.Int64)]
	}
	return
}

// CommitATTRIBUTEDEFINITIONENUMERATION allows commit of a single attributedefinitionenumeration (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) {
	backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseOneInstance(attributedefinitionenumeration)
	if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]; ok {
		backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.CommitPhaseTwoInstance(backRepo, id, attributedefinitionenumeration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEDEFINITIONENUMERATION allows checkout of a single attributedefinitionenumeration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) {
	// check if the attributedefinitionenumeration is staged
	if _, ok := backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONPtr_ATTRIBUTEDEFINITIONENUMERATIONDBID[attributedefinitionenumeration]; ok {
			var attributedefinitionenumerationDB ATTRIBUTEDEFINITIONENUMERATIONDB
			attributedefinitionenumerationDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.db.First(&attributedefinitionenumerationDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEDEFINITIONENUMERATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseOneInstance(&attributedefinitionenumerationDB)
			backRepo.BackRepoATTRIBUTEDEFINITIONENUMERATION.CheckoutPhaseTwoInstance(backRepo, &attributedefinitionenumerationDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) {
	// insertion point for fields commit

	attributedefinitionenumerationDB.Name_Data.String = attributedefinitionenumeration.Name
	attributedefinitionenumerationDB.Name_Data.Valid = true

	attributedefinitionenumerationDB.DESCAttr_Data.String = attributedefinitionenumeration.DESCAttr
	attributedefinitionenumerationDB.DESCAttr_Data.Valid = true

	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String = attributedefinitionenumeration.IDENTIFIERAttr
	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool = attributedefinitionenumeration.ISEDITABLEAttr
	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String = attributedefinitionenumeration.LASTCHANGEAttr
	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LONGNAMEAttr_Data.String = attributedefinitionenumeration.LONGNAMEAttr
	attributedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true

	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool = attributedefinitionenumeration.MULTIVALUEDAttr
	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION_WOP
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATION_WOP(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION_WOP) {
	// insertion point for fields commit

	attributedefinitionenumerationDB.Name_Data.String = attributedefinitionenumeration.Name
	attributedefinitionenumerationDB.Name_Data.Valid = true

	attributedefinitionenumerationDB.DESCAttr_Data.String = attributedefinitionenumeration.DESCAttr
	attributedefinitionenumerationDB.DESCAttr_Data.Valid = true

	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String = attributedefinitionenumeration.IDENTIFIERAttr
	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool = attributedefinitionenumeration.ISEDITABLEAttr
	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String = attributedefinitionenumeration.LASTCHANGEAttr
	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LONGNAMEAttr_Data.String = attributedefinitionenumeration.LONGNAMEAttr
	attributedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true

	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool = attributedefinitionenumeration.MULTIVALUEDAttr
	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATIONWOP
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATIONWOP(attributedefinitionenumeration *ATTRIBUTEDEFINITIONENUMERATIONWOP) {
	// insertion point for fields commit

	attributedefinitionenumerationDB.Name_Data.String = attributedefinitionenumeration.Name
	attributedefinitionenumerationDB.Name_Data.Valid = true

	attributedefinitionenumerationDB.DESCAttr_Data.String = attributedefinitionenumeration.DESCAttr
	attributedefinitionenumerationDB.DESCAttr_Data.Valid = true

	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String = attributedefinitionenumeration.IDENTIFIERAttr
	attributedefinitionenumerationDB.IDENTIFIERAttr_Data.Valid = true

	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool = attributedefinitionenumeration.ISEDITABLEAttr
	attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String = attributedefinitionenumeration.LASTCHANGEAttr
	attributedefinitionenumerationDB.LASTCHANGEAttr_Data.Valid = true

	attributedefinitionenumerationDB.LONGNAMEAttr_Data.String = attributedefinitionenumeration.LONGNAMEAttr
	attributedefinitionenumerationDB.LONGNAMEAttr_Data.Valid = true

	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool = attributedefinitionenumeration.MULTIVALUEDAttr
	attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATION
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATION(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionenumeration.Name = attributedefinitionenumerationDB.Name_Data.String
	attributedefinitionenumeration.DESCAttr = attributedefinitionenumerationDB.DESCAttr_Data.String
	attributedefinitionenumeration.IDENTIFIERAttr = attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	attributedefinitionenumeration.ISEDITABLEAttr = attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionenumeration.LASTCHANGEAttr = attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	attributedefinitionenumeration.LONGNAMEAttr = attributedefinitionenumerationDB.LONGNAMEAttr_Data.String
	attributedefinitionenumeration.MULTIVALUEDAttr = attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATION_WOP
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATION_WOP(attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionenumeration.Name = attributedefinitionenumerationDB.Name_Data.String
	attributedefinitionenumeration.DESCAttr = attributedefinitionenumerationDB.DESCAttr_Data.String
	attributedefinitionenumeration.IDENTIFIERAttr = attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	attributedefinitionenumeration.ISEDITABLEAttr = attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionenumeration.LASTCHANGEAttr = attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	attributedefinitionenumeration.LONGNAMEAttr = attributedefinitionenumerationDB.LONGNAMEAttr_Data.String
	attributedefinitionenumeration.MULTIVALUEDAttr = attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool
}

// CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATIONWOP
func (attributedefinitionenumerationDB *ATTRIBUTEDEFINITIONENUMERATIONDB) CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATIONWOP(attributedefinitionenumeration *ATTRIBUTEDEFINITIONENUMERATIONWOP) {
	attributedefinitionenumeration.ID = int(attributedefinitionenumerationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributedefinitionenumeration.Name = attributedefinitionenumerationDB.Name_Data.String
	attributedefinitionenumeration.DESCAttr = attributedefinitionenumerationDB.DESCAttr_Data.String
	attributedefinitionenumeration.IDENTIFIERAttr = attributedefinitionenumerationDB.IDENTIFIERAttr_Data.String
	attributedefinitionenumeration.ISEDITABLEAttr = attributedefinitionenumerationDB.ISEDITABLEAttr_Data.Bool
	attributedefinitionenumeration.LASTCHANGEAttr = attributedefinitionenumerationDB.LASTCHANGEAttr_Data.String
	attributedefinitionenumeration.LONGNAMEAttr = attributedefinitionenumerationDB.LONGNAMEAttr_Data.String
	attributedefinitionenumeration.MULTIVALUEDAttr = attributedefinitionenumerationDB.MULTIVALUEDAttr_Data.Bool
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONENUMERATIONDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONENUMERATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONENUMERATIONDB, 0)
	for _, attributedefinitionenumerationDB := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB {
		forBackup = append(forBackup, attributedefinitionenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEDEFINITIONENUMERATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEDEFINITIONENUMERATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEDEFINITIONENUMERATIONDB instances in the backrepo
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEDEFINITIONENUMERATIONDB, 0)
	for _, attributedefinitionenumerationDB := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB {
		forBackup = append(forBackup, attributedefinitionenumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEDEFINITIONENUMERATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEDEFINITIONENUMERATION_Fields, -1)
	for _, attributedefinitionenumerationDB := range forBackup {

		var attributedefinitionenumerationWOP ATTRIBUTEDEFINITIONENUMERATIONWOP
		attributedefinitionenumerationDB.CopyBasicFieldsToATTRIBUTEDEFINITIONENUMERATIONWOP(&attributedefinitionenumerationWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributedefinitionenumerationWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEDEFINITIONENUMERATION" sheet all ATTRIBUTEDEFINITIONENUMERATIONDB instances
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEDEFINITIONENUMERATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEDEFINITIONENUMERATION.rowVisitorATTRIBUTEDEFINITIONENUMERATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) rowVisitorATTRIBUTEDEFINITIONENUMERATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributedefinitionenumerationWOP ATTRIBUTEDEFINITIONENUMERATIONWOP
		row.ReadStruct(&attributedefinitionenumerationWOP)

		// add the unmarshalled struct to the stage
		attributedefinitionenumerationDB := new(ATTRIBUTEDEFINITIONENUMERATIONDB)
		attributedefinitionenumerationDB.CopyBasicFieldsFromATTRIBUTEDEFINITIONENUMERATIONWOP(&attributedefinitionenumerationWOP)

		attributedefinitionenumerationDB_ID_atBackupTime := attributedefinitionenumerationDB.ID
		attributedefinitionenumerationDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Create(attributedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[attributedefinitionenumerationDB.ID] = attributedefinitionenumerationDB
		BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID[attributedefinitionenumerationDB_ID_atBackupTime] = attributedefinitionenumerationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEDEFINITIONENUMERATIONDB.json" in dirPath that stores an array
// of ATTRIBUTEDEFINITIONENUMERATIONDB and stores it in the database
// the map BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEDEFINITIONENUMERATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEDEFINITIONENUMERATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEDEFINITIONENUMERATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB
	for _, attributedefinitionenumerationDB := range forRestore {

		attributedefinitionenumerationDB_ID_atBackupTime := attributedefinitionenumerationDB.ID
		attributedefinitionenumerationDB.ID = 0
		query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Create(attributedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[attributedefinitionenumerationDB.ID] = attributedefinitionenumerationDB
		BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID[attributedefinitionenumerationDB_ID_atBackupTime] = attributedefinitionenumerationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEDEFINITIONENUMERATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEDEFINITIONENUMERATION>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) RestorePhaseTwo() {

	for _, attributedefinitionenumerationDB := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = attributedefinitionenumerationDB

		// insertion point for reindexing pointers encoding
		// reindexing DEFAULTVALUE field
		if attributedefinitionenumerationDB.DEFAULTVALUEID.Int64 != 0 {
			attributedefinitionenumerationDB.DEFAULTVALUEID.Int64 = int64(BackRepoDEFAULTVALUEid_atBckpTime_newID[uint(attributedefinitionenumerationDB.DEFAULTVALUEID.Int64)])
			attributedefinitionenumerationDB.DEFAULTVALUEID.Valid = true
		}

		// reindexing ALTERNATIVEID field
		if attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64 != 0 {
			attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64 = int64(BackRepoALTERNATIVEIDid_atBckpTime_newID[uint(attributedefinitionenumerationDB.ALTERNATIVEIDID.Int64)])
			attributedefinitionenumerationDB.ALTERNATIVEIDID.Valid = true
		}

		// reindexing TYPE field
		if attributedefinitionenumerationDB.TYPEID.Int64 != 0 {
			attributedefinitionenumerationDB.TYPEID.Int64 = int64(BackRepoREQIFTYPEid_atBckpTime_newID[uint(attributedefinitionenumerationDB.TYPEID.Int64)])
			attributedefinitionenumerationDB.TYPEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEDEFINITIONENUMERATION.db.Model(attributedefinitionenumerationDB).Updates(*attributedefinitionenumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEDEFINITIONENUMERATION.ResetReversePointers commits all staged instances of ATTRIBUTEDEFINITIONENUMERATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributedefinitionenumeration := range backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONPtr {
		backRepoATTRIBUTEDEFINITIONENUMERATION.ResetReversePointersInstance(backRepo, idx, attributedefinitionenumeration)
	}

	return
}

func (backRepoATTRIBUTEDEFINITIONENUMERATION *BackRepoATTRIBUTEDEFINITIONENUMERATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributedefinitionenumeration *models.ATTRIBUTEDEFINITIONENUMERATION) (Error error) {

	// fetch matching attributedefinitionenumerationDB
	if attributedefinitionenumerationDB, ok := backRepoATTRIBUTEDEFINITIONENUMERATION.Map_ATTRIBUTEDEFINITIONENUMERATIONDBID_ATTRIBUTEDEFINITIONENUMERATIONDB[idx]; ok {
		_ = attributedefinitionenumerationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEDEFINITIONENUMERATIONid_atBckpTime_newID map[uint]uint
