// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPECIFIEDVALUES_sql sql.NullBool
var dummy_SPECIFIEDVALUES_time time.Duration
var dummy_SPECIFIEDVALUES_sort sort.Float64Slice

// SPECIFIEDVALUESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model specifiedvaluesAPI
type SPECIFIEDVALUESAPI struct {
	gorm.Model

	models.SPECIFIEDVALUES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPECIFIEDVALUESPointersEncoding SPECIFIEDVALUESPointersEncoding
}

// SPECIFIEDVALUESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPECIFIEDVALUESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ENUMVALUE is a slice of pointers to another Struct (optional or 0..1)
	ENUMVALUE IntSlice `gorm:"type:TEXT"`
}

// SPECIFIEDVALUESDB describes a specifiedvalues in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model specifiedvaluesDB
type SPECIFIEDVALUESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field specifiedvaluesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPECIFIEDVALUESPointersEncoding
}

// SPECIFIEDVALUESDBs arrays specifiedvaluesDBs
// swagger:response specifiedvaluesDBsResponse
type SPECIFIEDVALUESDBs []SPECIFIEDVALUESDB

// SPECIFIEDVALUESDBResponse provides response
// swagger:response specifiedvaluesDBResponse
type SPECIFIEDVALUESDBResponse struct {
	SPECIFIEDVALUESDB
}

// SPECIFIEDVALUESWOP is a SPECIFIEDVALUES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPECIFIEDVALUESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SPECIFIEDVALUES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSPECIFIEDVALUESStruct struct {
	// stores SPECIFIEDVALUESDB according to their gorm ID
	Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB map[uint]*SPECIFIEDVALUESDB

	// stores SPECIFIEDVALUESDB ID according to SPECIFIEDVALUES address
	Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID map[*models.SPECIFIEDVALUES]uint

	// stores SPECIFIEDVALUES according to their gorm ID
	Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr map[uint]*models.SPECIFIEDVALUES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPECIFIEDVALUES.stage
	return
}

func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) GetDB() *gorm.DB {
	return backRepoSPECIFIEDVALUES.db
}

// GetSPECIFIEDVALUESDBFromSPECIFIEDVALUESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) GetSPECIFIEDVALUESDBFromSPECIFIEDVALUESPtr(specifiedvalues *models.SPECIFIEDVALUES) (specifiedvaluesDB *SPECIFIEDVALUESDB) {
	id := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]
	specifiedvaluesDB = backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[id]
	return
}

// BackRepoSPECIFIEDVALUES.CommitPhaseOne commits all staged instances of SPECIFIEDVALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for specifiedvalues := range stage.SPECIFIEDVALUESs {
		backRepoSPECIFIEDVALUES.CommitPhaseOneInstance(specifiedvalues)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, specifiedvalues := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr {
		if _, ok := stage.SPECIFIEDVALUESs[specifiedvalues]; !ok {
			backRepoSPECIFIEDVALUES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPECIFIEDVALUES.CommitDeleteInstance commits deletion of SPECIFIEDVALUES to the BackRepo
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CommitDeleteInstance(id uint) (Error error) {

	specifiedvalues := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[id]

	// specifiedvalues is not staged anymore, remove specifiedvaluesDB
	specifiedvaluesDB := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[id]
	query := backRepoSPECIFIEDVALUES.db.Unscoped().Delete(&specifiedvaluesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID, specifiedvalues)
	delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr, id)
	delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB, id)

	return
}

// BackRepoSPECIFIEDVALUES.CommitPhaseOneInstance commits specifiedvalues staged instances of SPECIFIEDVALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CommitPhaseOneInstance(specifiedvalues *models.SPECIFIEDVALUES) (Error error) {

	// check if the specifiedvalues is not commited yet
	if _, ok := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]; ok {
		return
	}

	// initiate specifiedvalues
	var specifiedvaluesDB SPECIFIEDVALUESDB
	specifiedvaluesDB.CopyBasicFieldsFromSPECIFIEDVALUES(specifiedvalues)

	query := backRepoSPECIFIEDVALUES.db.Create(&specifiedvaluesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues] = specifiedvaluesDB.ID
	backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[specifiedvaluesDB.ID] = specifiedvalues
	backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[specifiedvaluesDB.ID] = &specifiedvaluesDB

	return
}

// BackRepoSPECIFIEDVALUES.CommitPhaseTwo commits all staged instances of SPECIFIEDVALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, specifiedvalues := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr {
		backRepoSPECIFIEDVALUES.CommitPhaseTwoInstance(backRepo, idx, specifiedvalues)
	}

	return
}

// BackRepoSPECIFIEDVALUES.CommitPhaseTwoInstance commits {{structname }} of models.SPECIFIEDVALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, specifiedvalues *models.SPECIFIEDVALUES) (Error error) {

	// fetch matching specifiedvaluesDB
	if specifiedvaluesDB, ok := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[idx]; ok {

		specifiedvaluesDB.CopyBasicFieldsFromSPECIFIEDVALUES(specifiedvalues)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		specifiedvaluesDB.SPECIFIEDVALUESPointersEncoding.ENUMVALUE = make([]int, 0)
		// 2. encode
		for _, enumvalueAssocEnd := range specifiedvalues.ENUMVALUE {
			enumvalueAssocEnd_DB :=
				backRepo.BackRepoENUMVALUE.GetENUMVALUEDBFromENUMVALUEPtr(enumvalueAssocEnd)
			
			// the stage might be inconsistant, meaning that the enumvalueAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if enumvalueAssocEnd_DB == nil {
				continue
			}
			
			specifiedvaluesDB.SPECIFIEDVALUESPointersEncoding.ENUMVALUE =
				append(specifiedvaluesDB.SPECIFIEDVALUESPointersEncoding.ENUMVALUE, int(enumvalueAssocEnd_DB.ID))
		}

		query := backRepoSPECIFIEDVALUES.db.Save(&specifiedvaluesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPECIFIEDVALUES intance %s", specifiedvalues.Name))
		return err
	}

	return
}

// BackRepoSPECIFIEDVALUES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CheckoutPhaseOne() (Error error) {

	specifiedvaluesDBArray := make([]SPECIFIEDVALUESDB, 0)
	query := backRepoSPECIFIEDVALUES.db.Find(&specifiedvaluesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	specifiedvaluesInstancesToBeRemovedFromTheStage := make(map[*models.SPECIFIEDVALUES]any)
	for key, value := range backRepoSPECIFIEDVALUES.stage.SPECIFIEDVALUESs {
		specifiedvaluesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, specifiedvaluesDB := range specifiedvaluesDBArray {
		backRepoSPECIFIEDVALUES.CheckoutPhaseOneInstance(&specifiedvaluesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		specifiedvalues, ok := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[specifiedvaluesDB.ID]
		if ok {
			delete(specifiedvaluesInstancesToBeRemovedFromTheStage, specifiedvalues)
		}
	}

	// remove from stage and back repo's 3 maps all specifiedvaluess that are not in the checkout
	for specifiedvalues := range specifiedvaluesInstancesToBeRemovedFromTheStage {
		specifiedvalues.Unstage(backRepoSPECIFIEDVALUES.GetStage())

		// remove instance from the back repo 3 maps
		specifiedvaluesID := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]
		delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID, specifiedvalues)
		delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB, specifiedvaluesID)
		delete(backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr, specifiedvaluesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a specifiedvaluesDB that has been found in the DB, updates the backRepo and stages the
// models version of the specifiedvaluesDB
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CheckoutPhaseOneInstance(specifiedvaluesDB *SPECIFIEDVALUESDB) (Error error) {

	specifiedvalues, ok := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[specifiedvaluesDB.ID]
	if !ok {
		specifiedvalues = new(models.SPECIFIEDVALUES)

		backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[specifiedvaluesDB.ID] = specifiedvalues
		backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues] = specifiedvaluesDB.ID

		// append model store with the new element
		specifiedvalues.Name = specifiedvaluesDB.Name_Data.String
		specifiedvalues.Stage(backRepoSPECIFIEDVALUES.GetStage())
	}
	specifiedvaluesDB.CopyBasicFieldsToSPECIFIEDVALUES(specifiedvalues)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	specifiedvalues.Stage(backRepoSPECIFIEDVALUES.GetStage())

	// preserve pointer to specifiedvaluesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB)[specifiedvaluesDB hold variable pointers
	specifiedvaluesDB_Data := *specifiedvaluesDB
	preservedPtrToSPECIFIEDVALUES := &specifiedvaluesDB_Data
	backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[specifiedvaluesDB.ID] = preservedPtrToSPECIFIEDVALUES

	return
}

// BackRepoSPECIFIEDVALUES.CheckoutPhaseTwo Checkouts all staged instances of SPECIFIEDVALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, specifiedvaluesDB := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB {
		backRepoSPECIFIEDVALUES.CheckoutPhaseTwoInstance(backRepo, specifiedvaluesDB)
	}
	return
}

// BackRepoSPECIFIEDVALUES.CheckoutPhaseTwoInstance Checkouts staged instances of SPECIFIEDVALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, specifiedvaluesDB *SPECIFIEDVALUESDB) (Error error) {

	specifiedvalues := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr[specifiedvaluesDB.ID]

	specifiedvaluesDB.DecodePointers(backRepo, specifiedvalues)

	return
}

func (specifiedvaluesDB *SPECIFIEDVALUESDB) DecodePointers(backRepo *BackRepoStruct, specifiedvalues *models.SPECIFIEDVALUES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem specifiedvalues.ENUMVALUE in the stage from the encode in the back repo
	// It parses all ENUMVALUEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	specifiedvalues.ENUMVALUE = specifiedvalues.ENUMVALUE[:0]
	for _, _ENUMVALUEid := range specifiedvaluesDB.SPECIFIEDVALUESPointersEncoding.ENUMVALUE {
		specifiedvalues.ENUMVALUE = append(specifiedvalues.ENUMVALUE, backRepo.BackRepoENUMVALUE.Map_ENUMVALUEDBID_ENUMVALUEPtr[uint(_ENUMVALUEid)])
	}

	return
}

// CommitSPECIFIEDVALUES allows commit of a single specifiedvalues (if already staged)
func (backRepo *BackRepoStruct) CommitSPECIFIEDVALUES(specifiedvalues *models.SPECIFIEDVALUES) {
	backRepo.BackRepoSPECIFIEDVALUES.CommitPhaseOneInstance(specifiedvalues)
	if id, ok := backRepo.BackRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]; ok {
		backRepo.BackRepoSPECIFIEDVALUES.CommitPhaseTwoInstance(backRepo, id, specifiedvalues)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPECIFIEDVALUES allows checkout of a single specifiedvalues (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPECIFIEDVALUES(specifiedvalues *models.SPECIFIEDVALUES) {
	// check if the specifiedvalues is staged
	if _, ok := backRepo.BackRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]; ok {

		if id, ok := backRepo.BackRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESPtr_SPECIFIEDVALUESDBID[specifiedvalues]; ok {
			var specifiedvaluesDB SPECIFIEDVALUESDB
			specifiedvaluesDB.ID = id

			if err := backRepo.BackRepoSPECIFIEDVALUES.db.First(&specifiedvaluesDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPECIFIEDVALUES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPECIFIEDVALUES.CheckoutPhaseOneInstance(&specifiedvaluesDB)
			backRepo.BackRepoSPECIFIEDVALUES.CheckoutPhaseTwoInstance(backRepo, &specifiedvaluesDB)
		}
	}
}

// CopyBasicFieldsFromSPECIFIEDVALUES
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsFromSPECIFIEDVALUES(specifiedvalues *models.SPECIFIEDVALUES) {
	// insertion point for fields commit

	specifiedvaluesDB.Name_Data.String = specifiedvalues.Name
	specifiedvaluesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFIEDVALUES_WOP
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsFromSPECIFIEDVALUES_WOP(specifiedvalues *models.SPECIFIEDVALUES_WOP) {
	// insertion point for fields commit

	specifiedvaluesDB.Name_Data.String = specifiedvalues.Name
	specifiedvaluesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSPECIFIEDVALUESWOP
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsFromSPECIFIEDVALUESWOP(specifiedvalues *SPECIFIEDVALUESWOP) {
	// insertion point for fields commit

	specifiedvaluesDB.Name_Data.String = specifiedvalues.Name
	specifiedvaluesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSPECIFIEDVALUES
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsToSPECIFIEDVALUES(specifiedvalues *models.SPECIFIEDVALUES) {
	// insertion point for checkout of basic fields (back repo to stage)
	specifiedvalues.Name = specifiedvaluesDB.Name_Data.String
}

// CopyBasicFieldsToSPECIFIEDVALUES_WOP
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsToSPECIFIEDVALUES_WOP(specifiedvalues *models.SPECIFIEDVALUES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	specifiedvalues.Name = specifiedvaluesDB.Name_Data.String
}

// CopyBasicFieldsToSPECIFIEDVALUESWOP
func (specifiedvaluesDB *SPECIFIEDVALUESDB) CopyBasicFieldsToSPECIFIEDVALUESWOP(specifiedvalues *SPECIFIEDVALUESWOP) {
	specifiedvalues.ID = int(specifiedvaluesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	specifiedvalues.Name = specifiedvaluesDB.Name_Data.String
}

// Backup generates a json file from a slice of all SPECIFIEDVALUESDB instances in the backrepo
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPECIFIEDVALUESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFIEDVALUESDB, 0)
	for _, specifiedvaluesDB := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB {
		forBackup = append(forBackup, specifiedvaluesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPECIFIEDVALUES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPECIFIEDVALUES file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPECIFIEDVALUESDB instances in the backrepo
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPECIFIEDVALUESDB, 0)
	for _, specifiedvaluesDB := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB {
		forBackup = append(forBackup, specifiedvaluesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPECIFIEDVALUES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPECIFIEDVALUES_Fields, -1)
	for _, specifiedvaluesDB := range forBackup {

		var specifiedvaluesWOP SPECIFIEDVALUESWOP
		specifiedvaluesDB.CopyBasicFieldsToSPECIFIEDVALUESWOP(&specifiedvaluesWOP)

		row := sh.AddRow()
		row.WriteStruct(&specifiedvaluesWOP, -1)
	}
}

// RestoreXL from the "SPECIFIEDVALUES" sheet all SPECIFIEDVALUESDB instances
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPECIFIEDVALUESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPECIFIEDVALUES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPECIFIEDVALUES.rowVisitorSPECIFIEDVALUES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) rowVisitorSPECIFIEDVALUES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var specifiedvaluesWOP SPECIFIEDVALUESWOP
		row.ReadStruct(&specifiedvaluesWOP)

		// add the unmarshalled struct to the stage
		specifiedvaluesDB := new(SPECIFIEDVALUESDB)
		specifiedvaluesDB.CopyBasicFieldsFromSPECIFIEDVALUESWOP(&specifiedvaluesWOP)

		specifiedvaluesDB_ID_atBackupTime := specifiedvaluesDB.ID
		specifiedvaluesDB.ID = 0
		query := backRepoSPECIFIEDVALUES.db.Create(specifiedvaluesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[specifiedvaluesDB.ID] = specifiedvaluesDB
		BackRepoSPECIFIEDVALUESid_atBckpTime_newID[specifiedvaluesDB_ID_atBackupTime] = specifiedvaluesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPECIFIEDVALUESDB.json" in dirPath that stores an array
// of SPECIFIEDVALUESDB and stores it in the database
// the map BackRepoSPECIFIEDVALUESid_atBckpTime_newID is updated accordingly
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPECIFIEDVALUESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPECIFIEDVALUESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPECIFIEDVALUES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPECIFIEDVALUESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB
	for _, specifiedvaluesDB := range forRestore {

		specifiedvaluesDB_ID_atBackupTime := specifiedvaluesDB.ID
		specifiedvaluesDB.ID = 0
		query := backRepoSPECIFIEDVALUES.db.Create(specifiedvaluesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[specifiedvaluesDB.ID] = specifiedvaluesDB
		BackRepoSPECIFIEDVALUESid_atBckpTime_newID[specifiedvaluesDB_ID_atBackupTime] = specifiedvaluesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPECIFIEDVALUES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPECIFIEDVALUES>id_atBckpTime_newID
// to compute new index
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) RestorePhaseTwo() {

	for _, specifiedvaluesDB := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB {

		// next line of code is to avert unused variable compilation error
		_ = specifiedvaluesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPECIFIEDVALUES.db.Model(specifiedvaluesDB).Updates(*specifiedvaluesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPECIFIEDVALUES.ResetReversePointers commits all staged instances of SPECIFIEDVALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, specifiedvalues := range backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESPtr {
		backRepoSPECIFIEDVALUES.ResetReversePointersInstance(backRepo, idx, specifiedvalues)
	}

	return
}

func (backRepoSPECIFIEDVALUES *BackRepoSPECIFIEDVALUESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, specifiedvalues *models.SPECIFIEDVALUES) (Error error) {

	// fetch matching specifiedvaluesDB
	if specifiedvaluesDB, ok := backRepoSPECIFIEDVALUES.Map_SPECIFIEDVALUESDBID_SPECIFIEDVALUESDB[idx]; ok {
		_ = specifiedvaluesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPECIFIEDVALUESid_atBckpTime_newID map[uint]uint
