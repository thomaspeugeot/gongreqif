// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TOOLEXTENSIONS_sql sql.NullBool
var dummy_TOOLEXTENSIONS_time time.Duration
var dummy_TOOLEXTENSIONS_sort sort.Float64Slice

// TOOLEXTENSIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model toolextensionsAPI
type TOOLEXTENSIONSAPI struct {
	gorm.Model

	models.TOOLEXTENSIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TOOLEXTENSIONSPointersEncoding TOOLEXTENSIONSPointersEncoding
}

// TOOLEXTENSIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TOOLEXTENSIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQIFTOOLEXTENSION is a slice of pointers to another Struct (optional or 0..1)
	REQIFTOOLEXTENSION IntSlice `gorm:"type:TEXT"`
}

// TOOLEXTENSIONSDB describes a toolextensions in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model toolextensionsDB
type TOOLEXTENSIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field toolextensionsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TOOLEXTENSIONSPointersEncoding
}

// TOOLEXTENSIONSDBs arrays toolextensionsDBs
// swagger:response toolextensionsDBsResponse
type TOOLEXTENSIONSDBs []TOOLEXTENSIONSDB

// TOOLEXTENSIONSDBResponse provides response
// swagger:response toolextensionsDBResponse
type TOOLEXTENSIONSDBResponse struct {
	TOOLEXTENSIONSDB
}

// TOOLEXTENSIONSWOP is a TOOLEXTENSIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TOOLEXTENSIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var TOOLEXTENSIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTOOLEXTENSIONSStruct struct {
	// stores TOOLEXTENSIONSDB according to their gorm ID
	Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB map[uint]*TOOLEXTENSIONSDB

	// stores TOOLEXTENSIONSDB ID according to TOOLEXTENSIONS address
	Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID map[*models.TOOLEXTENSIONS]uint

	// stores TOOLEXTENSIONS according to their gorm ID
	Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr map[uint]*models.TOOLEXTENSIONS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTOOLEXTENSIONS.stage
	return
}

func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) GetDB() *gorm.DB {
	return backRepoTOOLEXTENSIONS.db
}

// GetTOOLEXTENSIONSDBFromTOOLEXTENSIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) GetTOOLEXTENSIONSDBFromTOOLEXTENSIONSPtr(toolextensions *models.TOOLEXTENSIONS) (toolextensionsDB *TOOLEXTENSIONSDB) {
	id := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]
	toolextensionsDB = backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[id]
	return
}

// BackRepoTOOLEXTENSIONS.CommitPhaseOne commits all staged instances of TOOLEXTENSIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for toolextensions := range stage.TOOLEXTENSIONSs {
		backRepoTOOLEXTENSIONS.CommitPhaseOneInstance(toolextensions)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, toolextensions := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr {
		if _, ok := stage.TOOLEXTENSIONSs[toolextensions]; !ok {
			backRepoTOOLEXTENSIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTOOLEXTENSIONS.CommitDeleteInstance commits deletion of TOOLEXTENSIONS to the BackRepo
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	toolextensions := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[id]

	// toolextensions is not staged anymore, remove toolextensionsDB
	toolextensionsDB := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[id]
	query := backRepoTOOLEXTENSIONS.db.Unscoped().Delete(&toolextensionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID, toolextensions)
	delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr, id)
	delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB, id)

	return
}

// BackRepoTOOLEXTENSIONS.CommitPhaseOneInstance commits toolextensions staged instances of TOOLEXTENSIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CommitPhaseOneInstance(toolextensions *models.TOOLEXTENSIONS) (Error error) {

	// check if the toolextensions is not commited yet
	if _, ok := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]; ok {
		return
	}

	// initiate toolextensions
	var toolextensionsDB TOOLEXTENSIONSDB
	toolextensionsDB.CopyBasicFieldsFromTOOLEXTENSIONS(toolextensions)

	query := backRepoTOOLEXTENSIONS.db.Create(&toolextensionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions] = toolextensionsDB.ID
	backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[toolextensionsDB.ID] = toolextensions
	backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[toolextensionsDB.ID] = &toolextensionsDB

	return
}

// BackRepoTOOLEXTENSIONS.CommitPhaseTwo commits all staged instances of TOOLEXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, toolextensions := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr {
		backRepoTOOLEXTENSIONS.CommitPhaseTwoInstance(backRepo, idx, toolextensions)
	}

	return
}

// BackRepoTOOLEXTENSIONS.CommitPhaseTwoInstance commits {{structname }} of models.TOOLEXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, toolextensions *models.TOOLEXTENSIONS) (Error error) {

	// fetch matching toolextensionsDB
	if toolextensionsDB, ok := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[idx]; ok {

		toolextensionsDB.CopyBasicFieldsFromTOOLEXTENSIONS(toolextensions)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		toolextensionsDB.TOOLEXTENSIONSPointersEncoding.REQIFTOOLEXTENSION = make([]int, 0)
		// 2. encode
		for _, reqiftoolextensionAssocEnd := range toolextensions.REQIFTOOLEXTENSION {
			reqiftoolextensionAssocEnd_DB :=
				backRepo.BackRepoREQIFTOOLEXTENSION.GetREQIFTOOLEXTENSIONDBFromREQIFTOOLEXTENSIONPtr(reqiftoolextensionAssocEnd)
			
			// the stage might be inconsistant, meaning that the reqiftoolextensionAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if reqiftoolextensionAssocEnd_DB == nil {
				continue
			}
			
			toolextensionsDB.TOOLEXTENSIONSPointersEncoding.REQIFTOOLEXTENSION =
				append(toolextensionsDB.TOOLEXTENSIONSPointersEncoding.REQIFTOOLEXTENSION, int(reqiftoolextensionAssocEnd_DB.ID))
		}

		query := backRepoTOOLEXTENSIONS.db.Save(&toolextensionsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TOOLEXTENSIONS intance %s", toolextensions.Name))
		return err
	}

	return
}

// BackRepoTOOLEXTENSIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CheckoutPhaseOne() (Error error) {

	toolextensionsDBArray := make([]TOOLEXTENSIONSDB, 0)
	query := backRepoTOOLEXTENSIONS.db.Find(&toolextensionsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	toolextensionsInstancesToBeRemovedFromTheStage := make(map[*models.TOOLEXTENSIONS]any)
	for key, value := range backRepoTOOLEXTENSIONS.stage.TOOLEXTENSIONSs {
		toolextensionsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, toolextensionsDB := range toolextensionsDBArray {
		backRepoTOOLEXTENSIONS.CheckoutPhaseOneInstance(&toolextensionsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		toolextensions, ok := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[toolextensionsDB.ID]
		if ok {
			delete(toolextensionsInstancesToBeRemovedFromTheStage, toolextensions)
		}
	}

	// remove from stage and back repo's 3 maps all toolextensionss that are not in the checkout
	for toolextensions := range toolextensionsInstancesToBeRemovedFromTheStage {
		toolextensions.Unstage(backRepoTOOLEXTENSIONS.GetStage())

		// remove instance from the back repo 3 maps
		toolextensionsID := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]
		delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID, toolextensions)
		delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB, toolextensionsID)
		delete(backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr, toolextensionsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a toolextensionsDB that has been found in the DB, updates the backRepo and stages the
// models version of the toolextensionsDB
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CheckoutPhaseOneInstance(toolextensionsDB *TOOLEXTENSIONSDB) (Error error) {

	toolextensions, ok := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[toolextensionsDB.ID]
	if !ok {
		toolextensions = new(models.TOOLEXTENSIONS)

		backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[toolextensionsDB.ID] = toolextensions
		backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions] = toolextensionsDB.ID

		// append model store with the new element
		toolextensions.Name = toolextensionsDB.Name_Data.String
		toolextensions.Stage(backRepoTOOLEXTENSIONS.GetStage())
	}
	toolextensionsDB.CopyBasicFieldsToTOOLEXTENSIONS(toolextensions)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	toolextensions.Stage(backRepoTOOLEXTENSIONS.GetStage())

	// preserve pointer to toolextensionsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB)[toolextensionsDB hold variable pointers
	toolextensionsDB_Data := *toolextensionsDB
	preservedPtrToTOOLEXTENSIONS := &toolextensionsDB_Data
	backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[toolextensionsDB.ID] = preservedPtrToTOOLEXTENSIONS

	return
}

// BackRepoTOOLEXTENSIONS.CheckoutPhaseTwo Checkouts all staged instances of TOOLEXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, toolextensionsDB := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB {
		backRepoTOOLEXTENSIONS.CheckoutPhaseTwoInstance(backRepo, toolextensionsDB)
	}
	return
}

// BackRepoTOOLEXTENSIONS.CheckoutPhaseTwoInstance Checkouts staged instances of TOOLEXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, toolextensionsDB *TOOLEXTENSIONSDB) (Error error) {

	toolextensions := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr[toolextensionsDB.ID]

	toolextensionsDB.DecodePointers(backRepo, toolextensions)

	return
}

func (toolextensionsDB *TOOLEXTENSIONSDB) DecodePointers(backRepo *BackRepoStruct, toolextensions *models.TOOLEXTENSIONS) {

	// insertion point for checkout of pointer encoding
	// This loop redeem toolextensions.REQIFTOOLEXTENSION in the stage from the encode in the back repo
	// It parses all REQIFTOOLEXTENSIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	toolextensions.REQIFTOOLEXTENSION = toolextensions.REQIFTOOLEXTENSION[:0]
	for _, _REQIFTOOLEXTENSIONid := range toolextensionsDB.TOOLEXTENSIONSPointersEncoding.REQIFTOOLEXTENSION {
		toolextensions.REQIFTOOLEXTENSION = append(toolextensions.REQIFTOOLEXTENSION, backRepo.BackRepoREQIFTOOLEXTENSION.Map_REQIFTOOLEXTENSIONDBID_REQIFTOOLEXTENSIONPtr[uint(_REQIFTOOLEXTENSIONid)])
	}

	return
}

// CommitTOOLEXTENSIONS allows commit of a single toolextensions (if already staged)
func (backRepo *BackRepoStruct) CommitTOOLEXTENSIONS(toolextensions *models.TOOLEXTENSIONS) {
	backRepo.BackRepoTOOLEXTENSIONS.CommitPhaseOneInstance(toolextensions)
	if id, ok := backRepo.BackRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]; ok {
		backRepo.BackRepoTOOLEXTENSIONS.CommitPhaseTwoInstance(backRepo, id, toolextensions)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTOOLEXTENSIONS allows checkout of a single toolextensions (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTOOLEXTENSIONS(toolextensions *models.TOOLEXTENSIONS) {
	// check if the toolextensions is staged
	if _, ok := backRepo.BackRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]; ok {

		if id, ok := backRepo.BackRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSPtr_TOOLEXTENSIONSDBID[toolextensions]; ok {
			var toolextensionsDB TOOLEXTENSIONSDB
			toolextensionsDB.ID = id

			if err := backRepo.BackRepoTOOLEXTENSIONS.db.First(&toolextensionsDB, id).Error; err != nil {
				log.Fatalln("CheckoutTOOLEXTENSIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTOOLEXTENSIONS.CheckoutPhaseOneInstance(&toolextensionsDB)
			backRepo.BackRepoTOOLEXTENSIONS.CheckoutPhaseTwoInstance(backRepo, &toolextensionsDB)
		}
	}
}

// CopyBasicFieldsFromTOOLEXTENSIONS
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsFromTOOLEXTENSIONS(toolextensions *models.TOOLEXTENSIONS) {
	// insertion point for fields commit

	toolextensionsDB.Name_Data.String = toolextensions.Name
	toolextensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTOOLEXTENSIONS_WOP
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsFromTOOLEXTENSIONS_WOP(toolextensions *models.TOOLEXTENSIONS_WOP) {
	// insertion point for fields commit

	toolextensionsDB.Name_Data.String = toolextensions.Name
	toolextensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTOOLEXTENSIONSWOP
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsFromTOOLEXTENSIONSWOP(toolextensions *TOOLEXTENSIONSWOP) {
	// insertion point for fields commit

	toolextensionsDB.Name_Data.String = toolextensions.Name
	toolextensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTOOLEXTENSIONS
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsToTOOLEXTENSIONS(toolextensions *models.TOOLEXTENSIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	toolextensions.Name = toolextensionsDB.Name_Data.String
}

// CopyBasicFieldsToTOOLEXTENSIONS_WOP
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsToTOOLEXTENSIONS_WOP(toolextensions *models.TOOLEXTENSIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	toolextensions.Name = toolextensionsDB.Name_Data.String
}

// CopyBasicFieldsToTOOLEXTENSIONSWOP
func (toolextensionsDB *TOOLEXTENSIONSDB) CopyBasicFieldsToTOOLEXTENSIONSWOP(toolextensions *TOOLEXTENSIONSWOP) {
	toolextensions.ID = int(toolextensionsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	toolextensions.Name = toolextensionsDB.Name_Data.String
}

// Backup generates a json file from a slice of all TOOLEXTENSIONSDB instances in the backrepo
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TOOLEXTENSIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TOOLEXTENSIONSDB, 0)
	for _, toolextensionsDB := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB {
		forBackup = append(forBackup, toolextensionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TOOLEXTENSIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TOOLEXTENSIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all TOOLEXTENSIONSDB instances in the backrepo
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TOOLEXTENSIONSDB, 0)
	for _, toolextensionsDB := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB {
		forBackup = append(forBackup, toolextensionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TOOLEXTENSIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TOOLEXTENSIONS_Fields, -1)
	for _, toolextensionsDB := range forBackup {

		var toolextensionsWOP TOOLEXTENSIONSWOP
		toolextensionsDB.CopyBasicFieldsToTOOLEXTENSIONSWOP(&toolextensionsWOP)

		row := sh.AddRow()
		row.WriteStruct(&toolextensionsWOP, -1)
	}
}

// RestoreXL from the "TOOLEXTENSIONS" sheet all TOOLEXTENSIONSDB instances
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTOOLEXTENSIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TOOLEXTENSIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTOOLEXTENSIONS.rowVisitorTOOLEXTENSIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) rowVisitorTOOLEXTENSIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var toolextensionsWOP TOOLEXTENSIONSWOP
		row.ReadStruct(&toolextensionsWOP)

		// add the unmarshalled struct to the stage
		toolextensionsDB := new(TOOLEXTENSIONSDB)
		toolextensionsDB.CopyBasicFieldsFromTOOLEXTENSIONSWOP(&toolextensionsWOP)

		toolextensionsDB_ID_atBackupTime := toolextensionsDB.ID
		toolextensionsDB.ID = 0
		query := backRepoTOOLEXTENSIONS.db.Create(toolextensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[toolextensionsDB.ID] = toolextensionsDB
		BackRepoTOOLEXTENSIONSid_atBckpTime_newID[toolextensionsDB_ID_atBackupTime] = toolextensionsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TOOLEXTENSIONSDB.json" in dirPath that stores an array
// of TOOLEXTENSIONSDB and stores it in the database
// the map BackRepoTOOLEXTENSIONSid_atBckpTime_newID is updated accordingly
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTOOLEXTENSIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TOOLEXTENSIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TOOLEXTENSIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TOOLEXTENSIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB
	for _, toolextensionsDB := range forRestore {

		toolextensionsDB_ID_atBackupTime := toolextensionsDB.ID
		toolextensionsDB.ID = 0
		query := backRepoTOOLEXTENSIONS.db.Create(toolextensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[toolextensionsDB.ID] = toolextensionsDB
		BackRepoTOOLEXTENSIONSid_atBckpTime_newID[toolextensionsDB_ID_atBackupTime] = toolextensionsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TOOLEXTENSIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TOOLEXTENSIONS>id_atBckpTime_newID
// to compute new index
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) RestorePhaseTwo() {

	for _, toolextensionsDB := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = toolextensionsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTOOLEXTENSIONS.db.Model(toolextensionsDB).Updates(*toolextensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTOOLEXTENSIONS.ResetReversePointers commits all staged instances of TOOLEXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, toolextensions := range backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSPtr {
		backRepoTOOLEXTENSIONS.ResetReversePointersInstance(backRepo, idx, toolextensions)
	}

	return
}

func (backRepoTOOLEXTENSIONS *BackRepoTOOLEXTENSIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, toolextensions *models.TOOLEXTENSIONS) (Error error) {

	// fetch matching toolextensionsDB
	if toolextensionsDB, ok := backRepoTOOLEXTENSIONS.Map_TOOLEXTENSIONSDBID_TOOLEXTENSIONSDB[idx]; ok {
		_ = toolextensionsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTOOLEXTENSIONSid_atBckpTime_newID map[uint]uint
