// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongreqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTEVALUEREAL_sql sql.NullBool
var dummy_ATTRIBUTEVALUEREAL_time time.Duration
var dummy_ATTRIBUTEVALUEREAL_sort sort.Float64Slice

// ATTRIBUTEVALUEREALAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributevaluerealAPI
type ATTRIBUTEVALUEREALAPI struct {
	gorm.Model

	models.ATTRIBUTEVALUEREAL_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTEVALUEREALPointersEncoding ATTRIBUTEVALUEREALPointersEncoding
}

// ATTRIBUTEVALUEREALPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTEVALUEREALPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFINITION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DEFINITIONID sql.NullInt64
}

// ATTRIBUTEVALUEREALDB describes a attributevaluereal in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributevaluerealDB
type ATTRIBUTEVALUEREALDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributevaluerealDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributevaluerealDB.THEVALUEAttr
	THEVALUEAttr_Data sql.NullFloat64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTEVALUEREALPointersEncoding
}

// ATTRIBUTEVALUEREALDBs arrays attributevaluerealDBs
// swagger:response attributevaluerealDBsResponse
type ATTRIBUTEVALUEREALDBs []ATTRIBUTEVALUEREALDB

// ATTRIBUTEVALUEREALDBResponse provides response
// swagger:response attributevaluerealDBResponse
type ATTRIBUTEVALUEREALDBResponse struct {
	ATTRIBUTEVALUEREALDB
}

// ATTRIBUTEVALUEREALWOP is a ATTRIBUTEVALUEREAL without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTEVALUEREALWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	THEVALUEAttr float64 `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ATTRIBUTEVALUEREAL_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"THEVALUEAttr",
}

type BackRepoATTRIBUTEVALUEREALStruct struct {
	// stores ATTRIBUTEVALUEREALDB according to their gorm ID
	Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB map[uint]*ATTRIBUTEVALUEREALDB

	// stores ATTRIBUTEVALUEREALDB ID according to ATTRIBUTEVALUEREAL address
	Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID map[*models.ATTRIBUTEVALUEREAL]uint

	// stores ATTRIBUTEVALUEREAL according to their gorm ID
	Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr map[uint]*models.ATTRIBUTEVALUEREAL

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTEVALUEREAL.stage
	return
}

func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTEVALUEREAL.db
}

// GetATTRIBUTEVALUEREALDBFromATTRIBUTEVALUEREALPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) GetATTRIBUTEVALUEREALDBFromATTRIBUTEVALUEREALPtr(attributevaluereal *models.ATTRIBUTEVALUEREAL) (attributevaluerealDB *ATTRIBUTEVALUEREALDB) {
	id := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]
	attributevaluerealDB = backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[id]
	return
}

// BackRepoATTRIBUTEVALUEREAL.CommitPhaseOne commits all staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributevaluereal := range stage.ATTRIBUTEVALUEREALs {
		backRepoATTRIBUTEVALUEREAL.CommitPhaseOneInstance(attributevaluereal)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributevaluereal := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr {
		if _, ok := stage.ATTRIBUTEVALUEREALs[attributevaluereal]; !ok {
			backRepoATTRIBUTEVALUEREAL.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTEVALUEREAL.CommitDeleteInstance commits deletion of ATTRIBUTEVALUEREAL to the BackRepo
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CommitDeleteInstance(id uint) (Error error) {

	attributevaluereal := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[id]

	// attributevaluereal is not staged anymore, remove attributevaluerealDB
	attributevaluerealDB := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[id]
	query := backRepoATTRIBUTEVALUEREAL.db.Unscoped().Delete(&attributevaluerealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID, attributevaluereal)
	delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr, id)
	delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB, id)

	return
}

// BackRepoATTRIBUTEVALUEREAL.CommitPhaseOneInstance commits attributevaluereal staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CommitPhaseOneInstance(attributevaluereal *models.ATTRIBUTEVALUEREAL) (Error error) {

	// check if the attributevaluereal is not commited yet
	if _, ok := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]; ok {
		return
	}

	// initiate attributevaluereal
	var attributevaluerealDB ATTRIBUTEVALUEREALDB
	attributevaluerealDB.CopyBasicFieldsFromATTRIBUTEVALUEREAL(attributevaluereal)

	query := backRepoATTRIBUTEVALUEREAL.db.Create(&attributevaluerealDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal] = attributevaluerealDB.ID
	backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[attributevaluerealDB.ID] = attributevaluereal
	backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[attributevaluerealDB.ID] = &attributevaluerealDB

	return
}

// BackRepoATTRIBUTEVALUEREAL.CommitPhaseTwo commits all staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevaluereal := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr {
		backRepoATTRIBUTEVALUEREAL.CommitPhaseTwoInstance(backRepo, idx, attributevaluereal)
	}

	return
}

// BackRepoATTRIBUTEVALUEREAL.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTEVALUEREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributevaluereal *models.ATTRIBUTEVALUEREAL) (Error error) {

	// fetch matching attributevaluerealDB
	if attributevaluerealDB, ok := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[idx]; ok {

		attributevaluerealDB.CopyBasicFieldsFromATTRIBUTEVALUEREAL(attributevaluereal)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributevaluereal.DEFINITION translates to updating the attributevaluereal.DEFINITIONID
		attributevaluerealDB.DEFINITIONID.Valid = true // allow for a 0 value (nil association)
		if attributevaluereal.DEFINITION != nil {
			if DEFINITIONId, ok := backRepo.BackRepoDEFINITION.Map_DEFINITIONPtr_DEFINITIONDBID[attributevaluereal.DEFINITION]; ok {
				attributevaluerealDB.DEFINITIONID.Int64 = int64(DEFINITIONId)
				attributevaluerealDB.DEFINITIONID.Valid = true
			}
		} else {
			attributevaluerealDB.DEFINITIONID.Int64 = 0
			attributevaluerealDB.DEFINITIONID.Valid = true
		}

		query := backRepoATTRIBUTEVALUEREAL.db.Save(&attributevaluerealDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTEVALUEREAL intance %s", attributevaluereal.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTEVALUEREAL.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CheckoutPhaseOne() (Error error) {

	attributevaluerealDBArray := make([]ATTRIBUTEVALUEREALDB, 0)
	query := backRepoATTRIBUTEVALUEREAL.db.Find(&attributevaluerealDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributevaluerealInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTEVALUEREAL]any)
	for key, value := range backRepoATTRIBUTEVALUEREAL.stage.ATTRIBUTEVALUEREALs {
		attributevaluerealInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributevaluerealDB := range attributevaluerealDBArray {
		backRepoATTRIBUTEVALUEREAL.CheckoutPhaseOneInstance(&attributevaluerealDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributevaluereal, ok := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[attributevaluerealDB.ID]
		if ok {
			delete(attributevaluerealInstancesToBeRemovedFromTheStage, attributevaluereal)
		}
	}

	// remove from stage and back repo's 3 maps all attributevaluereals that are not in the checkout
	for attributevaluereal := range attributevaluerealInstancesToBeRemovedFromTheStage {
		attributevaluereal.Unstage(backRepoATTRIBUTEVALUEREAL.GetStage())

		// remove instance from the back repo 3 maps
		attributevaluerealID := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]
		delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID, attributevaluereal)
		delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB, attributevaluerealID)
		delete(backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr, attributevaluerealID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributevaluerealDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributevaluerealDB
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CheckoutPhaseOneInstance(attributevaluerealDB *ATTRIBUTEVALUEREALDB) (Error error) {

	attributevaluereal, ok := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[attributevaluerealDB.ID]
	if !ok {
		attributevaluereal = new(models.ATTRIBUTEVALUEREAL)

		backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[attributevaluerealDB.ID] = attributevaluereal
		backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal] = attributevaluerealDB.ID

		// append model store with the new element
		attributevaluereal.Name = attributevaluerealDB.Name_Data.String
		attributevaluereal.Stage(backRepoATTRIBUTEVALUEREAL.GetStage())
	}
	attributevaluerealDB.CopyBasicFieldsToATTRIBUTEVALUEREAL(attributevaluereal)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributevaluereal.Stage(backRepoATTRIBUTEVALUEREAL.GetStage())

	// preserve pointer to attributevaluerealDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB)[attributevaluerealDB hold variable pointers
	attributevaluerealDB_Data := *attributevaluerealDB
	preservedPtrToATTRIBUTEVALUEREAL := &attributevaluerealDB_Data
	backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[attributevaluerealDB.ID] = preservedPtrToATTRIBUTEVALUEREAL

	return
}

// BackRepoATTRIBUTEVALUEREAL.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributevaluerealDB := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB {
		backRepoATTRIBUTEVALUEREAL.CheckoutPhaseTwoInstance(backRepo, attributevaluerealDB)
	}
	return
}

// BackRepoATTRIBUTEVALUEREAL.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributevaluerealDB *ATTRIBUTEVALUEREALDB) (Error error) {

	attributevaluereal := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr[attributevaluerealDB.ID]

	attributevaluerealDB.DecodePointers(backRepo, attributevaluereal)

	return
}

func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) DecodePointers(backRepo *BackRepoStruct, attributevaluereal *models.ATTRIBUTEVALUEREAL) {

	// insertion point for checkout of pointer encoding
	// DEFINITION field
	attributevaluereal.DEFINITION = nil
	if attributevaluerealDB.DEFINITIONID.Int64 != 0 {
		attributevaluereal.DEFINITION = backRepo.BackRepoDEFINITION.Map_DEFINITIONDBID_DEFINITIONPtr[uint(attributevaluerealDB.DEFINITIONID.Int64)]
	}
	return
}

// CommitATTRIBUTEVALUEREAL allows commit of a single attributevaluereal (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTEVALUEREAL(attributevaluereal *models.ATTRIBUTEVALUEREAL) {
	backRepo.BackRepoATTRIBUTEVALUEREAL.CommitPhaseOneInstance(attributevaluereal)
	if id, ok := backRepo.BackRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]; ok {
		backRepo.BackRepoATTRIBUTEVALUEREAL.CommitPhaseTwoInstance(backRepo, id, attributevaluereal)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTEVALUEREAL allows checkout of a single attributevaluereal (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTEVALUEREAL(attributevaluereal *models.ATTRIBUTEVALUEREAL) {
	// check if the attributevaluereal is staged
	if _, ok := backRepo.BackRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALPtr_ATTRIBUTEVALUEREALDBID[attributevaluereal]; ok {
			var attributevaluerealDB ATTRIBUTEVALUEREALDB
			attributevaluerealDB.ID = id

			if err := backRepo.BackRepoATTRIBUTEVALUEREAL.db.First(&attributevaluerealDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTEVALUEREAL : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTEVALUEREAL.CheckoutPhaseOneInstance(&attributevaluerealDB)
			backRepo.BackRepoATTRIBUTEVALUEREAL.CheckoutPhaseTwoInstance(backRepo, &attributevaluerealDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTEVALUEREAL
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsFromATTRIBUTEVALUEREAL(attributevaluereal *models.ATTRIBUTEVALUEREAL) {
	// insertion point for fields commit

	attributevaluerealDB.Name_Data.String = attributevaluereal.Name
	attributevaluerealDB.Name_Data.Valid = true

	attributevaluerealDB.THEVALUEAttr_Data.Float64 = attributevaluereal.THEVALUEAttr
	attributevaluerealDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEREAL_WOP
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsFromATTRIBUTEVALUEREAL_WOP(attributevaluereal *models.ATTRIBUTEVALUEREAL_WOP) {
	// insertion point for fields commit

	attributevaluerealDB.Name_Data.String = attributevaluereal.Name
	attributevaluerealDB.Name_Data.Valid = true

	attributevaluerealDB.THEVALUEAttr_Data.Float64 = attributevaluereal.THEVALUEAttr
	attributevaluerealDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTEVALUEREALWOP
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsFromATTRIBUTEVALUEREALWOP(attributevaluereal *ATTRIBUTEVALUEREALWOP) {
	// insertion point for fields commit

	attributevaluerealDB.Name_Data.String = attributevaluereal.Name
	attributevaluerealDB.Name_Data.Valid = true

	attributevaluerealDB.THEVALUEAttr_Data.Float64 = attributevaluereal.THEVALUEAttr
	attributevaluerealDB.THEVALUEAttr_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTEVALUEREAL
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsToATTRIBUTEVALUEREAL(attributevaluereal *models.ATTRIBUTEVALUEREAL) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluereal.Name = attributevaluerealDB.Name_Data.String
	attributevaluereal.THEVALUEAttr = attributevaluerealDB.THEVALUEAttr_Data.Float64
}

// CopyBasicFieldsToATTRIBUTEVALUEREAL_WOP
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsToATTRIBUTEVALUEREAL_WOP(attributevaluereal *models.ATTRIBUTEVALUEREAL_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluereal.Name = attributevaluerealDB.Name_Data.String
	attributevaluereal.THEVALUEAttr = attributevaluerealDB.THEVALUEAttr_Data.Float64
}

// CopyBasicFieldsToATTRIBUTEVALUEREALWOP
func (attributevaluerealDB *ATTRIBUTEVALUEREALDB) CopyBasicFieldsToATTRIBUTEVALUEREALWOP(attributevaluereal *ATTRIBUTEVALUEREALWOP) {
	attributevaluereal.ID = int(attributevaluerealDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributevaluereal.Name = attributevaluerealDB.Name_Data.String
	attributevaluereal.THEVALUEAttr = attributevaluerealDB.THEVALUEAttr_Data.Float64
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEREALDB instances in the backrepo
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEREALDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEREALDB, 0)
	for _, attributevaluerealDB := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB {
		forBackup = append(forBackup, attributevaluerealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTEVALUEREAL ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTEVALUEREAL file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTEVALUEREALDB instances in the backrepo
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTEVALUEREALDB, 0)
	for _, attributevaluerealDB := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB {
		forBackup = append(forBackup, attributevaluerealDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTEVALUEREAL")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTEVALUEREAL_Fields, -1)
	for _, attributevaluerealDB := range forBackup {

		var attributevaluerealWOP ATTRIBUTEVALUEREALWOP
		attributevaluerealDB.CopyBasicFieldsToATTRIBUTEVALUEREALWOP(&attributevaluerealWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributevaluerealWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTEVALUEREAL" sheet all ATTRIBUTEVALUEREALDB instances
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTEVALUEREAL"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTEVALUEREAL.rowVisitorATTRIBUTEVALUEREAL)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) rowVisitorATTRIBUTEVALUEREAL(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributevaluerealWOP ATTRIBUTEVALUEREALWOP
		row.ReadStruct(&attributevaluerealWOP)

		// add the unmarshalled struct to the stage
		attributevaluerealDB := new(ATTRIBUTEVALUEREALDB)
		attributevaluerealDB.CopyBasicFieldsFromATTRIBUTEVALUEREALWOP(&attributevaluerealWOP)

		attributevaluerealDB_ID_atBackupTime := attributevaluerealDB.ID
		attributevaluerealDB.ID = 0
		query := backRepoATTRIBUTEVALUEREAL.db.Create(attributevaluerealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[attributevaluerealDB.ID] = attributevaluerealDB
		BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID[attributevaluerealDB_ID_atBackupTime] = attributevaluerealDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTEVALUEREALDB.json" in dirPath that stores an array
// of ATTRIBUTEVALUEREALDB and stores it in the database
// the map BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTEVALUEREALDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTEVALUEREAL file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTEVALUEREALDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB
	for _, attributevaluerealDB := range forRestore {

		attributevaluerealDB_ID_atBackupTime := attributevaluerealDB.ID
		attributevaluerealDB.ID = 0
		query := backRepoATTRIBUTEVALUEREAL.db.Create(attributevaluerealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[attributevaluerealDB.ID] = attributevaluerealDB
		BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID[attributevaluerealDB_ID_atBackupTime] = attributevaluerealDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTEVALUEREAL file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTEVALUEREAL>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) RestorePhaseTwo() {

	for _, attributevaluerealDB := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB {

		// next line of code is to avert unused variable compilation error
		_ = attributevaluerealDB

		// insertion point for reindexing pointers encoding
		// reindexing DEFINITION field
		if attributevaluerealDB.DEFINITIONID.Int64 != 0 {
			attributevaluerealDB.DEFINITIONID.Int64 = int64(BackRepoDEFINITIONid_atBckpTime_newID[uint(attributevaluerealDB.DEFINITIONID.Int64)])
			attributevaluerealDB.DEFINITIONID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoATTRIBUTEVALUEREAL.db.Model(attributevaluerealDB).Updates(*attributevaluerealDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTEVALUEREAL.ResetReversePointers commits all staged instances of ATTRIBUTEVALUEREAL to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributevaluereal := range backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALPtr {
		backRepoATTRIBUTEVALUEREAL.ResetReversePointersInstance(backRepo, idx, attributevaluereal)
	}

	return
}

func (backRepoATTRIBUTEVALUEREAL *BackRepoATTRIBUTEVALUEREALStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributevaluereal *models.ATTRIBUTEVALUEREAL) (Error error) {

	// fetch matching attributevaluerealDB
	if attributevaluerealDB, ok := backRepoATTRIBUTEVALUEREAL.Map_ATTRIBUTEVALUEREALDBID_ATTRIBUTEVALUEREALDB[idx]; ok {
		_ = attributevaluerealDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTEVALUEREALid_atBckpTime_newID map[uint]uint
